; 6502bench SourceGen v1.7.3
KBD             .eq     $c000             ;R last key pressed + 128
SETSTDZP        .eq     $c008             ;W use main stack and zero page
KBDSTRB         .eq     $c010             ;RW keyboard strobe
SPKR            .eq     $c030             ;RW toggle speaker
TXTCLR          .eq     $c050             ;RW display graphics
MIXCLR          .eq     $c052             ;RW display full screen
TXTPAGE1        .eq     $c054             ;RW display page 1
HIRES           .eq     $c057             ;RW display hi-res graphics
BUTN0           .eq     $c061             ;R switch input 0 / open-apple
BUTN1           .eq     $c062             ;R switch input 1 / closed-apple
MON_PREAD       .eq     $fb1e             ;read paddle specifed by X-reg, return in Y-reg
MON_WAIT        .eq     $fca8             ;delay for (26 + 27*Acc + 5*(Acc*Acc))/2 cycles

                .org    $0000
DstHGR          .dd2    $27a8
PageNum         .dd1    $20
                .junk   4
SrcP            .dd2    $90ce
Src_Erase       .dd2    $8b80
XLocDiv7        .dd1    $00
YLoc            .dd1    $9e
XLocation       .dd1    $e8
YLocation       .dd1    $78
                .junk   1
div7_1          .dd1    $21
div7_2          .dd1    $21
bltHeight       .dd1    $00
                .junk   1
dstPtr          .dd2    $3dd0
enmXPtr         .dd2    $0000
enmYptr         .dd2    $ffff
XLocDiv7Ptr     .dd2    $7054
YLocPtr         .dd1    $ff
YLocPtrHi       .dd1    $ff
ptrYstart       .dd1    $00
                .dd1    $00
ptrYEnd         .dd1    $00
                .dd1    $28
ptrXStart       .dd1    $00
                .dd1    $18
ptrS2toolboxX   .dd1    $00
                .dd1    $17
ptrS2toolboxY   .dd1    $42
                .dd1    $42
StringPtr       .dd1    $80
                .dd1    $19
                .junk   1
SND16bit?       .dd1    $60
                .dd1    $e3
                .junk   1
SNDClickList    .dd1    $1d
                .junk   1
SNDfromTbl      .dd1    $ff
                .dd1    $ff
SND32           .dd1    $ff
SNDskip?        .dd1    $00
SNDclickCarry   .dd1    $f0
SND35           .dd1    $fd
SNDdummyWasteCycle .dd1 $f0               ;meaningless variable that just increase
                .junk   1
timer1          .dd1    $13
indexVar        .dd1    $fd
                .junk   12
ptrBoxX         .dd1    $00
                .dd1    $00
ptrBoxY         .dd1    $00
                .dd1    $ff
SndPtr          .dd1    $00
                .dd1    $00
PointerToMusic  .dd2    $ffff
protectionXorPtr .dd1   $75
                .dd1    $ef
ProtectionPtr2  .dd1    $ff
                .dd1    $ff
                .junk   174
                .junk   256
                .junk   256
                .junk   256
junk0400        .junk   256
protectionJunk  .junk   768               ;if zero'd will reboot
                .dd1    $20
                .dd1    $04
                .dd1    $22
                .dd1    $20
                .dd1    $00
                .dd1    $33
                .dd1    $20
                .dd1    $bf
                .dd1    $71
                .dd1    $4c
                .dd1    $2d
                .dd1    $08
PlayerX         .dd1    $00
InputType0K1Joy .dd1    $00
isRestoreMuteSav .dd1   $00
s1HoleIndex     .dd1    $00
YregSave        .dd1    $00
PlayerY         .dd1    $00
PlayerXsav      .dd1    $00
PlayerYSav      .dd1    $00
AddrNotUsed?    .dd1    $00
AddrHi          .dd1    $00
                .dd1    $00
PreshiftAddrHi  .dd1    $00
isJump          .dd1    $00
s3BoxFaceDirection? .dd1 $00
MackJumpStep    .dd1    $00
                .dd1    $00
SavedKBD        .dd1    $00
isMute          .dd1    $00
skipTstKeyIf0   .dd1    $01
PlayerGoUpFlag  .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
pdlX            .dd1    $00
pdlY            .dd1    $00
XRegSave1       .dd1    $00
ZeroIfStandStill .dd1   $00
YcheckAt15Or24  .dd1    $00
fixS2PlayerY    .dd1    $00
generalCounter  .dd1    $00
lifeRelated     .dd1    $00
isSkipStartMusic .dd1   $00
EnmCount        .dd1    $01

********************************************************************************
* Main                                                                         *
********************************************************************************
Start           lda     #$21              ;Set to Stage1
                sta     goStage+1
                lda     #$09
                sta     goStage+2
                sta     KBDSTRB
                lda     #$00              ;ready for the title page
                sta     NextStage
                jsr     InitLIFE
                jsr     HGRdo
                lda     isMute
                sta     isNoSoundSav
Start2          jsr     setInGameLoop
                jsr     Key1
                lda     isRestoreMuteSav
                beq     Start2
Start3          lda     #$00
                sta     EnmCount
                sta     isInGameLoop      ;No in game loop, need some setup
                lda     isNoSoundSav
                sta     isMute
                jsr     encryptJmp
                sta     KeyRIGHT
                jsr     InitLIFE
goStage         jmp     St1_1

Stage3          jsr     s3initB
Stage3Resume    jsr     s3DrawBoard
                jsr     PrtScore
                jsr     PrtHisScore
                lda     isInGameLoop
                bne     @loop
                lda     isSkipStartMusic
                bne     St3_3
                ldy     #>TitleMusic
                ldx     #<TitleMusic
                jsr     playMusic
                jmp     @loop

St3_3           jsr     Wait3
@loop           jsr     testPlayerYXat18
                jsr     TstPlayerYatB0
                jsr     tstKey
                jsr     s3PlayerOnBelt    ;if Player On Belt then pull to left
                lda     PlayerX
                jsr     s3CheckPlayerX    ;test Player X >= 7F, ret 1 else 0
                sta     s3PlayerXover7F
                jsr     s3UpDownBelt
                jsr     tstS2Flg
                jsr     testPlayerXNearBelt
                jsr     s3TstReorientPlayerDirection
                jsr     s3PlayLeftPlatform
                jsr     s3doMackFalling   ;Player at falling area?
                jsr     s3TestPickBox     ;?? Player picked box
                jsr     s3TestDropMaterial
                jsr     checkCtrlKey
                jsr     s2updPresser
                jsr     s3TestPlayerFallInHole
                jsr     setMackMusic
                jsr     doSound
                ldx     #$00
                jsr     MON_PREAD
                sty     pdlX
                jsr     UptEnemies
                jsr     s3AnimeHBelt
                jsr     s3AnimeTallRollingPoint
                jsr     s3AnimeINpoint
                jsr     getSt1TopGift     ;Stage 3
                jsr     tstEnm
                jsr     s3TestDropBox
                jsr     s3UptRivetToPot
                jsr     s2CheckRIghtPressor ;?st3 bonus piece subtract 8
                jsr     isHitEletric      ;check Playery $28to$8, X?
                jsr     s3drawSpike
                jsr     s3CheckCompleted
                jsr     s3OffTallBelt
                jsr     tstAddLIFE
                lda     #$01
                sta     PointsToAdd+2
                jsr     BonusUpdatePrint
                ldx     #$01
                jsr     MON_PREAD
                sty     pdlY
                lda     isMute
                bne     St3_4
                lda     #$30
                jsr     MON_WAIT
St3_4           jsr     checkStart
                jmp     @loop

St1_1           jsr     s1_InitBlockHole
Stage1Resume    jsr     drawS1InitObj
                jsr     PrtScore
                jsr     PrtHisScore
                lda     isInGameLoop
                bne     Stage1Loop
                lda     isSkipStartMusic
                bne     St1_3
                ldy     #>TitleMusic      ;TitleMusic
                ldx     #<TitleMusic
                jsr     playMusic
                jmp     Stage1Loop

St1_3           jsr     Wait3
Stage1Loop      jsr     testPlayerYXat18
                jsr     tstKey
                jsr     checkJump
                jsr     s1TestJumpPad
                jsr     S1checkPickedBlock
                jsr     s1DrawHoldIngBlock
                jsr     TestS1DropBlock
                jsr     s1TestFixedAllHole
                jsr     s1_fall_into_Hole
                jsr     UptEnemies
                jsr     tstEnm
                jsr     tstEhammer        ;Bonus Item
                jsr     S1TstWelding
                jsr     setMackMusic
                jsr     doSound
                ldx     #$00
                jsr     MON_PREAD
                sty     pdlX
                jsr     doNail
                jsr     collideNail
                jsr     checkCtrlKey
                jsr     getSt1TopGift
                jsr     TestS1Bell        ;did Player Ring the bell
                jsr     doJackHammer
                jsr     tstLIFT
                jsr     s1_collpasMack?
                jsr     s1_TestLift
                jsr     tstAddLIFE        ;check 7?
                lda     #$01
                sta     PointsToAdd+2
                jsr     BonusUpdatePrint
                ldx     #$01
                jsr     MON_PREAD
                sty     pdlY
                lda     isMute
                beq     St1_4
                lda     #$30
                jsr     MON_WAIT
St1_4           jsr     checkStart
                jmp     Stage1Loop

St2_1           jsr     s2_initArray
Stage2Resume    jsr     s2PutInitialObj
                jsr     PrtScore
                jsr     PrtHisScore
                lda     isInGameLoop
                bne     St2Loop
                lda     isSkipStartMusic
                bne     St2_3
                ldy     #>TitleMusic
                ldx     #<TitleMusic
                jsr     playMusic
                jmp     St2Loop

St2_3           jsr     Wait3
St2Loop         jsr     doS2Lift
                jsr     testPlayerYXat18
                jsr     tS2onLift
                jsr     testPlayerSomething
                jsr     TstPlayerYatB0    ;S2 ground is BC
                jsr     tstKey
                jsr     S2TestPlayerY2
                jsr     tstEnm
                jsr     tstS2Flg
                jsr     tstS2mackMoveOnRail
                jsr     s2UpdateMackGoUpRail
                jsr     doS2IncineratorFire
                jsr     doSt2Dropping
                jsr     doSt2DropToPot
                jsr     testS2UpperBelt
                jsr     TstS2OnBelt2
                ldx     #$00
                jsr     MON_PREAD
                sty     pdlX
                jsr     s2updPresser
                jsr     setMackMusic
                jsr     doSound
                jsr     s2CraneHandler
                jsr     checkCtrlKey
                jsr     s2_hitLeftBlock
                jsr     UptEnemies
                jsr     getSt1TopGift
                jsr     s2CheckRIghtPressor
                jsr     s2_HitTNT
                jsr     s2CheckLowerLeftClapper
                jsr     s2_Hitdump
                jsr     s2HitUpperRoller
                jsr     s2MagnetUpd
                jsr     S2MagnetPickMack?
                jsr     S2_SpinRollerPoint ;draw st2 belt roller
                jsr     s2UpdateTNT
                jsr     s2UpdClamper
                jsr     s2TestToolboxTaken
                jsr     tstEnm
                jsr     tstAddLIFE
                lda     #$01
                sta     PointsToAdd+2
                jsr     BonusUpdatePrint
                ldx     #$01
                jsr     MON_PREAD
                sty     pdlY
                lda     isMute
                beq     St2Skip
                lda     #$30
                jsr     MON_WAIT
St2Skip         jsr     checkStart
                jmp     St2Loop

InitLIFE        lda     #$02
                sta     LIFE
                lda     #$20
                sta     PageNum
                lda     #$01
                sta     drawLevVlVar
                lda     #$00
                sta     isRestoreMuteSav
                sta     drawLevVlVar+1
                sta     generalCounter
                sta     isGaveBonusLife
                ldx     #$04
InitLIFE_loop   sta     Bonus,x
                sta     Score,x
                dex
                bpl     InitLIFE_loop
                lda     #$ff
                rts

init0A9B        lda     #$00
                sta     s3BoxFaceDirection?
                sta     isRestoreMuteSav
                sta     isJump
                sta     MackJumpStep
                sta     tbls3AnimeHBelt
                sta     s1rivetVarLfdc
                sta     BonusPieceHereIf0
                sta     s2MagnetFlag
                sta     segment8+3
                sta     isPicked
                sta     s2Tbldump1
                sta     s2Tbldump1+1
                sta     s2DumpFalg
                sta     s2DumpState1
                sta     s2DumpDec32qw3
                sta     tnt
                sta     S2IncineratorVar2
                sta     isS3SpikeInit
                sta     s2UpdClamper222
                sta     JackHammerFlag
                sta     liftPoleVar
                sta     gotAirHammer
                sta     s1UnusedLIFT
                sta     vtestPlayerYXat18
                sta     s1OnjumpPad
                sta     s1MackJumpDirection
                sta     skipTstKeyIf0
                sta     SpinningMackType
                sta     Bonus             ;Init Bonus
                sta     Bonus+1
                sta     Bonus+2
                sta     Bonus+3
                sta     BonusHPos-1
                sta     KBDSTRB
                sta     vDoneFlag
                sta     vFlagCountBon
                sta     isMackOnS2Rail?
                sta     S2_RailCountDown
                sta     s2_RailVar
                sta     S23NonZeroCheck?
                sta     XRegSave1
                sta     fixS2PlayerY
                sta     s2s3JumpFlag
                sta     S2Thing
                sta     s2OnUppeerBelt
                sta     sdbelt22
                sta     tbls2dumpX
                sta     tbls2dumpX+1
                sta     tbls2dumpY
                sta     tbls2dumpY+1
                sta     PlayerS3AboutToFallVar
                sta     s3If0TestPlayLeftPlatform
                sta     S2LiftY
                sta     s3vPlayerBeltVar
                sta     Vars3TestDropBox
                sta     lifeRelated
                sta     vSmall
                sta     s3RivetToPotPoint
                sta     s2s3JumpFlag+1
                lda     #$01
                sta     S2PressVar1
                sta     tntErase+2
                sta     spinMackWait
                sta     S2LiftWait
                lda     #$04
                sta     YregSave
                ldy     generalCounter
                lda     tblBonus,y
                sta     Bonus+3           ;store initial bonus, thousand digit e.g 5000
                lda     #$0f
                sta     YcheckAt15Or24
                lda     #$7d
                sta     savedSrcP2+1
                lda     #$80
                sta     savedSrcP2
                lda     #$70
                sta     LIFE-1
                lda     #$bc
                sta     onLF0
                lda     #$b4
                sta     liftY?
                jsr     HGRdo
                lda     #$1a
                sta     SndPtr+1
                sta     SNDPtrToX+1
                lda     #$f4
                sta     SndPtr
                sta     SNDPtrToX
                rts

HGRdo           lda     #$20
                sta     selfMod+2
HGR_2           ldx     #$00
HGR_3           lda     #$00
selfMod         sta     YTableL,x
                inx
                bne     HGR_3
                cmp     #$eb
                beq     @SpaceKey
                cmp     #$ea
                beq     @Key0orJ
                inc     selfMod+2
                lda     selfMod+2
                cmp     #$40
                bne     HGR_2
                bit     TXTCLR
                bit     TXTPAGE1
                bit     MIXCLR
                bit     HIRES
                rts

Key1            lda     KBD               ;from demo loop
                bmi     KeyPressed        ;Key Pressed
                jmp     @KeyK

KeyPressed      sta     SavedKBD
                jsr     checkCtrlS
                lda     SavedKBD
                jsr     tesrKeyStageSelect
                lda     SavedKBD
                cmp     #$b0
                beq     @Key0orJ
                cmp     #$ca
                beq     @Key0orJ
                cmp     #$a0
                beq     @SpaceKey
                cmp     #$cb
                bne     @KeyK
@SpaceKey       lda     #$00
                sta     InputType0K1Joy
                jmp     Key1_5

@KeyK           lda     KBD
                cmp     SETSTDZP          ;key differ from prevuous?
                bne     Key1_exit
                ldx     #$00
                jsr     MON_PREAD
                cpy     #$ff
                beq     Key1_exit
                lda     BUTN0
                cmp     #$80
                bcs     @Key0orJ
                rts                       ;No key, paddle nor button push

@Key0orJ        lda     #$01
                sta     InputType0K1Joy
Key1_5          lda     #$01
                sta     isRestoreMuteSav
Key1_exit       rts

TblmacWalkRight2 .dd1   $00
                .dd1    $94
                .dd1    $00
                .dd1    $96
                .dd1    $00
                .dd1    $98
                .dd1    $00
                .dd1    $96
TblmackRightSprite .dd1 $00
                .dd1    $9a
                .dd1    $00
                .dd1    $9c
                .dd1    $00
                .dd1    $9e
                .dd1    $00
                .dd1    $9c
TblmackFrontSprite .dd1 $00
                .dd1    $a4
SavedMackPadSprite .dd1 $00
                .dd1    $a6
TblJumpForX     .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
TbljumpUp       .dd1    $fe
                .dd1    $fe
                .dd1    $fe
                .dd1    $fe
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02

tstKey          lda     skipTstKeyIf0
                beq     @_1
                rts

@_1             lda     isJump
                beq     @_2
                jmp     KeyIsSpace

@_2             lda     InputType0K1Joy
                beq     @CheckGameKey     ;use Keyboard to Play
                jmp     CheckBTN          ;use Joystick to play

@CheckGameKey   lda     KBD
                bmi     @KeyPressed
                lda     #$00
                sta     ZeroIfStandStill
                rts

@KeyPressed     ldx     XRegSave1
                bne     isSpace
isKeyA          cmp     #‘A’ | $80
                bne     isKeyZ
                jmp     KeyIsA

isKeyZ          cmp     #‘Z’ | $80
                bne     isKeyRIght
                jmp     KeyIsZ

isKeyRIght      cmp     #$95
                bne     isKeyLEFT
KeyRIGHT        jmp     KeyIsRight

isKeyLEFT       cmp     #$88
                bne     isSpace
                jmp     KeyIsLeft

isSpace         cmp     #‘ ’ | $80
                bne     @_1
                jmp     KeyIsSpace

@_1             lda     #$00
                sta     ZeroIfStandStill
                rts

KeyIsA          jsr     TestPlayerUp
                lda     PlayerGoUpFlag
                bne     TryUp
                rts

TryUp           lda     #$00
                sta     s3BoxFaceDirection?
                dec     PlayerY
                dec     PlayerY
                lda     PlayerY
                and     #$02
                tay
                iny
                lda     TblmackFrontSprite,y ;mack updown bitmap tbl point to $a400 $a600
                sta     AddrHi
                sta     SrcP+1
                jmp     xDrawPlayer

KeyIsZ          jsr     TestPlayerDown
                lda     PlayerGoUpFlag
                bne     TryDown
                rts

TryDown         lda     #$02
                sta     s3BoxFaceDirection?
                inc     PlayerY
                inc     PlayerY
DrawDownMackFixed lda   #>mackFrontSprite ;mack updown bitmap at $a400
                sta     AddrHi
                sta     SrcP+1
                jsr     checkMackFaceDirection
                jmp     xDrawPlayer

KeyIsRight      lda     S23NonZeroCheck?
                bne     @_1
                jsr     tstUpOnFloor
                lda     PlayerGoUpFlag
                bne     @_1
                rts

@_1             inc     PlayerX
                inc     PlayerX
                lda     PlayerX
                and     #$06
                tay
                iny
@_2             lda     TblmacWalkRight2,y ;mack tbl at $9400 walk right, 9600 stand right
                sta     AddrHi
                sta     SrcP+1
                jsr     checkMackFaceDirection
                lda     #$01
                sta     s3BoxFaceDirection?
                jmp     xDrawPlayer

KeyIsLeft       lda     S23NonZeroCheck?
                bne     MovePlayerUp
                jsr     tstUpOnFloor
                lda     PlayerGoUpFlag
                bne     MovePlayerUp
                rts

MovePlayerUp    dec     PlayerX
                dec     PlayerX
                lda     #$03
                sta     s3BoxFaceDirection?
                lda     PlayerX
                and     #$06
                tay
                iny
                lda     TblmackRightSprite,y ;point to 9a00,9c00 (walk left, stand left)
                sta     AddrHi
                sta     SrcP+1
                jsr     checkMackFaceDirection
                jmp     xDrawPlayer

KeyIsSpace      lda     s2s3JumpFlag
                beq     @_1
                lda     #$00
                sta     ZeroIfStandStill
                rts

@_1             lda     isJump
                bne     @_2
                sta     KBDSTRB
                lda     #$00
                sta     MackJumpStep
                sta     S23NonZeroCheck?
                sta     isMackOnS2Rail?
                lda     #$01
                sta     isJump
                ldy     #>JumpMusic
                ldx     #<JumpMusic
                jsr     InitTune
@_2             lda     s3BoxFaceDirection?
                cmp     #$01
                bne     @_3
                lda     #>macJumpRightSprite ;point to jump right bitmap at a000
                sta     AddrHi
                sta     SrcP+1
                lda     #$18              ;set Self Modify code to adding
                sta     @_selfModCarry
                lda     #$79
                sta     @_selfModAddSub
                jmp     @_5

@_3             lda     s3BoxFaceDirection?
                cmp     #$03
                beq     @_4
                lda     #$00
                sta     isJump
                rts

@_4             lda     #>macJumpLeftSprite ;point to jump left bitmap at a200
                sta     AddrHi
                sta     SrcP+1
                lda     #$38              ;set Self Modify code to  SEC. SBC
                sta     @_selfModCarry
                lda     #$f9
                sta     @_selfModAddSub
@_5             ldy     MackJumpStep
@_selfModCarry  clc
                lda     PlayerX
@_selfModAddSub adc     TblJumpForX,y     ;point to go right, central and left (2,0,-2)
                sta     PlayerX
                clc
                lda     PlayerY
                adc     TbljumpUp,y
                ora     fixS2PlayerY
                sta     PlayerY
                iny
                sty     MackJumpStep
                jsr     checkBelt2
                jsr     xDrawPlayer
                jsr     testStage23Jump
                lda     MackJumpStep
                cmp     YcheckAt15Or24
                bcs     ErazsMack
                rts

ErazsMack       lda     #$00
                sta     isJump
                sta     S2Thing
                sta     XRegSave1
                lda     s2s3JumpFlag+1
                beq     @_1
                lda     #92
                sta     PlayerX
                lda     #0
                sta     s2s3JumpFlag+1
@_1             lda     s3BoxFaceDirection?
                cmp     #1
                beq     @_2
                jmp     reDrawMackStandLeftSprite

@_2             jmp     reDrawMacStandRightSprite

; We might have drawn Mack but because he landed on belt, so need to remove and
; redraw to face different direction, there might be other usage to be discover
xDrawPlayer     lda     PlayerX
                and     #$fe
                sta     PlayerX
                sta     XLocDiv7
                lda     PlayerY
                sta     YLoc
                lda     PlayerXsav
                sta     XLocation
                lda     PlayerYSav
                sta     YLocation
                lda     PreshiftAddrHi
                sta     Src_Erase+1       ;get old Drawn Location to erase
                jsr     XorPreshiftShape
                lda     PlayerX
                sta     PlayerXsav
                lda     PlayerY
                sta     PlayerYSav
                lda     AddrHi
                sta     PreshiftAddrHi
                lda     #$01
                sta     ZeroIfStandStill
                rts

                .dd1    $68
                .dd1    $68
                .dd1    $28
                .dd1    $28
                .dd1    $88
                .dd1    $88
                .dd1    $48
                .dd1    $48
                .dd1    $88
                .dd1    $68
                .dd1    $48
                .dd1    $28
                .dd1    $a8
                .dd1    $88
                .dd1    $68
                .dd1    $48
                .dd1    $88
                .dd1    $bd
                .dd1    $31
                .dd1    $e7
                .dd1    $bd
                .dd1    $07
                .dd1    $15
                .dd1    $cb
                .dd1    $15
                .dd1    $93
                .dd1    $e7
tblS1TestUp     .dd1    $00
                .dd1    $03
                .dd1    $03
                .dd1    $00
YStartpoint     .dd1    $00
YEndpoint?      .dd1    $00
XendPoint       .dd1    $00

TestPlayerUp    lda     PlayerY
                cmp     #188
                bcs     @_1
                ora     #$01
                sta     PlayerY
@_1             ldy     StagePlay         ;stage 1 is 2, stage 2 is 3, stage 3 is 1
                lda     tblS1TestUp,y     ;0, 3 ,3 ?
                tay
@loop           lda     (ptrXStart),y     ;look up S1 $e5c
                beq     @_3
                clc
                adc     #14               ;add offset
                jmp     @_4

@_3             clc
                adc     #$08
@_4             sta     XendPoint         ;targetX?
                lda     PlayerY
                cmp     (ptrYEnd),y       ;s1 = $e52
                bcc     @_5
                jmp     @_next

@_5             cmp     (ptrYstart),y     ;? Ypoint 2
                bcs     @YinRange
                jmp     @_next

@YinRange       lda     PlayerX
                cmp     (ptrXStart),y     ;;s1 e5c
                bcs     @_7
                jmp     @_next

@_7             cmp     XendPoint
                bcc     @XYinRange
                jmp     @_next

@XYinRange      jmp     TestPlayerUpDownMatchXY

@_next          dey                       ;next point
                bpl     @loop
                lda     #$00              ;cannot go up
                sta     PlayerGoUpFlag
                sta     ZeroIfStandStill
                rts

TestPlayerDown  ldy     StagePlay         ;stage 1 is 2, stage 2 is 3, stage 3 is 1
                lda     tblS1TestUp,y
                tay
@loop           lda     (ptrXStart),y
                beq     @_2
                clc
                adc     #14
                jmp     @_3

@_2             clc
                adc     #8
@_3             sta     XendPoint
                lda     (ptrYstart),y
                sec
                sbc     #$01
                sta     YStartpoint
                lda     (ptrYEnd),y
                sec
                sbc     #$01
                sta     YEndpoint?
                lda     PlayerY           ;IS y between start end point?
                cmp     YStartpoint
                bcs     @_4
                jmp     @next

@_4             cmp     YEndpoint?
                bcc     @_YinRange
                jmp     @next

@_YinRange      lda     PlayerX
                cmp     (ptrXStart),y
                bcs     @_6
                jmp     @next

@_6             cmp     XendPoint
                bcc     @XYinRange2
                jmp     @next

@XYinRange2     jmp     TestPlayerUpDownMatchXY

@next           dey
                bpl     @loop
                lda     #$00
                sta     PlayerGoUpFlag
                sta     ZeroIfStandStill
                rts

TestPlayerUpDownMatchXY lda #$01
                sta     PlayerGoUpFlag    ;Player Can Go up
                rts

St1FloorsHeight .dd1    $27
                .dd1    $47
                .dd1    $67
                .dd1    $87
                .dd1    $a7
                .dd1    $bc

tstUpOnFloor    ldy     #$05
@loop           lda     PlayerY
                cmp     St1FloorsHeight,y
                beq     @onFloor
                dey
                bpl     @loop
                lda     #$00
                sta     PlayerGoUpFlag
                rts

@onFloor        cmp     #167
                beq     @on167
                lda     #$01
                sta     PlayerGoUpFlag
                rts

@on167          lda     StagePlay         ;stage 1 is 2, stage 2 is 3, stage 3 is 1
                cmp     #$03
                beq     @OnStage2
                lda     #$01
                sta     PlayerGoUpFlag
                rts

@OnStage2       lda     #$00
                sta     PlayerGoUpFlag
                rts

checkMackFaceDirection lda s3BoxFaceDirection?
                cmp     #$01
                beq     @_1
                cmp     #$02
                beq     @_type2
                cmp     #$03
                beq     @_type3
                rts

@_1             jsr     @_type3
                lda     PlayerX
                ldx     StagePlay         ;stage 1 is 2, stage 2 is 3, stage 3 is 1
                cmp     TbltargetXpos,x   ;check Player X
                bne     exitBeltCheck     ;not yet
                lda     tblNextXpos,x     ;get Next Player X position?
                sta     PlayerX
                rts

@_type3         lda     PlayerX
                cmp     #251
                bcc     exitBeltCheck     ;Player X < 251
                lda     #$00              ;why set player X to 0 ?
                sta     PlayerX
                rts

@_type2         lda     PlayerY
                cmp     #189
                bne     exitBeltCheck
                lda     #188              ;restrict Player Y to 188
                sta     PlayerY
exitBeltCheck   rts

TbltargetXpos   .dd1    0
                .dd1    240
                .dd1    0
                .dd1    240
tblNextXpos     .dd1    0
                .dd1    238
                .dd1    254
                .dd1    238

checkBelt2      lda     s3BoxFaceDirection?
                cmp     #1
                beq     @_1
                cmp     #3
                beq     @_3
                rts

@_1             lda     PlayerX
                ldx     StagePlay         ;stage 1 is 2, stage 2 is 3, stage 3 is 1
                cmp     TbltargetXpos,x
                bne     exitBeltCheck
                lda     tblNextXpos,x
                sta     PlayerX
                lda     #3
                sta     s3BoxFaceDirection?
                rts

@_3             lda     PlayerX
                cmp     #254
                bne     exitBeltCheck
                lda     #0
                sta     PlayerX           ;why zero?
                lda     #1
                sta     s3BoxFaceDirection?
                rts

StartLineByte   .dd1    $00
EndLineByte     .dd1    $00
Yline           .dd1    $00
Ything2         .dd1    $00
OrByte          .dd1    $00
XorByte         .dd1    $00
rivetX          .dd1    $00
rivetY          .dd1    $00
rivetPosSav     .dd1    $00
rivetPosSavB    .dd1    $00
rivetSubtract   .dd1    $00
rivetAddB       .dd1    $00
s1rivetVarLfdc  .dd1    $00
rivetSavedAddB  .dd1    $00
s1rivetStepY    .dd1    $00
                .dd1    $00
                .dd1    $00
drawGroundLineVar .dd1  $00
xRegSave2       .dd1    $00
tblS1FloorsY    .dd1    $27
                .dd1    $47
                .dd1    $67
                .dd1    $87
                .dd1    $a7
                .dd1    $bc
tblS1FloorY     .dd1    47
                .dd1    79
                .dd1    111
                .dd1    143
                .dd1    175
                .dd1    188
tblS1FloorXdiv7 .dd1    $04
                .dd1    $06
                .dd1    $08
                .dd1    $0a
                .dd1    $0c
                .dd1    $0e
                .dd1    $10
                .dd1    $12
                .dd1    $14
                .dd1    $16
                .dd1    $18
                .dd1    $1a
                .dd1    $1c
                .dd1    $1e
tblSt1Floor2    .dd1    $60
                .dd1    $00
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $00
                .dd1    $20
                .dd1    $20
                .dd1    $00
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $00
                .dd1    $40
tblS1SteelbarY  .dd1    71
                .dd1    103
                .dd1    135
                .dd1    167
S1SteelBarXLocDiv7 .dd1 $08
                .dd1    $1a
S1BaseStandY    .dd1    $bf
tblS1BaseStandX .dd1    $06
                .dd1    $0e
                .dd1    $14
                .dd1    $1c

s3DrawBoard     jsr     init0A9B
                lda     #$01              ;orange blue type
                sta     RailTypeIdx
                sta     StagePlay         ;stage 3 is 1
                jsr     s3_DrawPlatform
                jsr     s3DrawJumpad
                jsr     drawS13Ground
                jsr     s3DrawStorage
                jsr     s3DrawLowRoller
                jsr     s3LeftBelt
                jsr     s3drawRightside   ;upper platform, create hole, 2 bottom nail maker
                lda     #$05
                sta     S3PickBoxIndex
                jsr     s3PutPickitem
                lda     #$09
                jsr     s3NailCollectPot
                lda     #$19
                jsr     s3NailCollectPot
                lda     #>TBLChainXdiv7
                sta     XLocDiv7Ptr+1
                lda     #<TBLChainXdiv7
                sta     XLocDiv7Ptr
                lda     #>TBLChainY
                sta     YLocPtrHi
                lda     #<TBLChainY
                sta     YLocPtr
                jsr     PutClimbingChains
                lda     #$0e
                sta     ptrYstart+1
                lda     #$46
                sta     ptrYstart
                lda     #$0e
                sta     ptrYEnd+1
                lda     #$4a
                sta     ptrYEnd
                lda     #$0e
                sta     ptrXStart+1
                lda     #$58
                sta     ptrXStart
                jsr     s3TopPlatform
                jsr     drawTopAndRightStatus
                jsr     drawLevelTenthDigit ;put real Level 2digit
                jsr     PrtLIFE
                jsr     PrintBonus
                jsr     putBonusPiece
                lda     #$01
                sta     IdxcmpIdxToEnmXPtr?
                jsr     callShiftBytes
                ldy     IdxcmpIdxToEnmXPtr?
@_2             lda     TblcmpIdxToEnmXPtr?,y
                sta     tblCmpIdxToEnmXPtr?,y
                tya
                asl     A
                tax
                lda     tEX,x
                sta     TblEnmXPtr,y
                sta     enmXPtr
                lda     tEy,x
                sta     TblEnmYPtr,y
                sta     enmYptr
                inx
                lda     tEX,x
                sta     TblEnmXPtrHi,y
                sta     enmXPtr+1
                lda     tEy,x
                sta     TblEnmYPtrHi,y
                sta     enmYptr+1
                lda     tEUnknpwn,y
                sta     IdxToEnmXPtr,y
                sta     timer1
                sty     indexVar
                ldx     indexVar
                ldy     timer1
                lda     (enmXPtr),y
                sta     enmX,x
                lda     (enmYptr),y
                sta     enmY,x
                ldy     indexVar
                dey
                bpl     @_2
                lda     #$e0
                sta     PlayerX
                lda     #$47
                sta     PlayerY
                lda     #>mac2WalkLeftSprite
                sta     SrcP+1
                sta     PreshiftAddrHi
                jsr     DrawInitMack
                lda     #$03
                sta     s3BoxFaceDirection?
                lda     #$36
                sta     S2PressVar4
                lda     #$46
                sta     S2PressV6
                lda     #$07
                sta     S2Presser_XByte
                lda     #$36
                sta     S2Presser_XByte+1
                lda     #$38
                sta     S2Presser_XByte+2
                lda     #$30
                sta     S2Presser_XByte+3
                jsr     PutPresser
                jsr     s3SetVar
                jsr     encryptJmp
                sta     selfModAboutToFail+1
                rts

s2PutInitialObj jsr     init0A9B
                lda     #$03
                sta     StagePlay         ;stage 2 is 3
                lda     #$00              ;put green type rail
                sta     RailTypeIdx
                jsr     s3_DrawPlatform
                jsr     drawS13Ground
                jsr     s2drawUpperConveyorBelt
                jsr     s2DrawDumpDropper
                jsr     s2drawDumpPot
                jsr     s2DrawIncinerator
                jsr     s2UpperLeftBeam
                jsr     putBonusPiece
                jsr     s2InitMovingPlatform
                jsr     drawTopAndRightStatus
                jsr     drawLevelTenthDigit
                jsr     PrtLIFE
                jsr     PrintBonus
                jsr     s2DrawMidLeftBlocker
                jsr     s2PlaceToolsbox
                lda     #>tblS2ChainXdiv7
                sta     XLocDiv7Ptr+1
                lda     #<tblS2ChainXdiv7
                sta     XLocDiv7Ptr
                lda     #>tblS2ChainY
                sta     YLocPtrHi
                lda     #<tblS2ChainY
                sta     YLocPtr
                jsr     PutClimbingChains
                lda     #$0e
                sta     ptrYstart+1
                lda     #$56
                sta     ptrYstart
                lda     #$0e
                sta     ptrYEnd+1
                lda     #$57
                sta     ptrYEnd
                lda     #$0e
                sta     ptrXStart+1
                lda     #$60
                sta     ptrXStart
                lda     #$00
                sta     IdxcmpIdxToEnmXPtr?
                jsr     callShiftBytes
                ldy     IdxcmpIdxToEnmXPtr?
@_1             lda     L4D6D,y
                sta     tblCmpIdxToEnmXPtr?,y
                tya
                asl     A
                tax
                lda     Tble_TblEnmXPtr,x
                sta     TblEnmXPtr,y
                sta     enmXPtr
                lda     Tbl_TblEnmYPtrHi,x
                sta     TblEnmYPtr,y
                sta     enmYptr
                inx
                lda     Tble_TblEnmXPtr,x
                sta     TblEnmXPtrHi,y
                sta     enmXPtr+1
                lda     Tbl_TblEnmYPtrHi,x
                sta     TblEnmYPtrHi,y
                sta     enmYptr+1
                lda     L4D61,y
                sta     IdxToEnmXPtr,y
                sta     timer1
                sty     indexVar
                ldx     indexVar
                ldy     timer1
                lda     (enmXPtr),y
                sta     enmX,x
                lda     (enmYptr),y
                sta     enmY,x
                ldy     indexVar
                dey
                bpl     @_1
                lda     #$02
                sta     PlayerX
                lda     #$bc
                sta     PlayerY
                lda     #>macStandRightSprite
                sta     SrcP+1
                sta     PreshiftAddrHi
                jsr     DrawInitMack
                lda     #$01
                sta     s3BoxFaceDirection?
                sta     XRegSave1
                lda     #$76
                sta     S2PressVar4
                lda     #$86
                sta     S2PressV6
                lda     #$1e
                sta     S2Presser_XByte
                lda     #$d7
                sta     S2Presser_XByte+1
                lda     #$d9
                sta     S2Presser_XByte+2
                lda     #$70
                sta     S2Presser_XByte+3
                jsr     PutPresser
                jsr     s3SetVar
                jsr     encryptJmp
                sta     routine6+1        ;really self mode?
                rts

drawS1InitObj   jsr     init0A9B
                lda     #2
                sta     StagePlay         ;stage 1 is 2
                jsr     XORst1Floor
                jsr     S1DrawVerticalsteelBar
                jsr     s1DrawBaseStand
                jsr     putBonusPiece
                jsr     s1createHole
                jsr     s1DrawBell1
                lda     #>tblS1ChainXdiv7
                sta     XLocDiv7Ptr+1
                lda     #<tblS1ChainXdiv7
                sta     XLocDiv7Ptr
                lda     #>tblS1ChainY
                sta     YLocPtrHi
                lda     #<tblS1ChainY
                sta     YLocPtr
                jsr     PutClimbingChains
                lda     #$0e
                sta     ptrYstart+1
                lda     #$4e
                sta     ptrYstart
                lda     #$0e
                sta     ptrYEnd+1
                lda     #$52
                sta     ptrYEnd
                lda     #$0e
                sta     ptrXStart+1
                lda     #$5c
                sta     ptrXStart
                jsr     DrawS1BlockLoop
                jsr     drawTopAndRightStatus
                jsr     drawLevelTenthDigit
                jsr     PrtLIFE
                jsr     PrintBonus
                jsr     drawS13Ground
                jsr     drawS1UpperRightthing
                jsr     drawS1Lift
                jsr     DrawS1LiftPole
                jsr     DrawS1JumpPad
                lda     generalCounter
                sta     IdxcmpIdxToEnmXPtr?
                jsr     callShiftBytes
                ldy     IdxcmpIdxToEnmXPtr?
@loop           lda     #$0b
                sta     tblCmpIdxToEnmXPtr?,y
                lda     TBLIdxToEnmXPtr,y
                sta     IdxToEnmXPtr,y
                tax
                lda     tblEnmXPos,x
                sta     enmX,y
                lda     tblEnmYPos,x
                sta     enmY,y
                lda     #>tblEnmXPos
                sta     TblEnmXPtrHi,y
                lda     #<tblEnmXPos
                sta     TblEnmXPtr,y
                lda     #>tblEnmYPos
                sta     TblEnmYPtrHi,y
                lda     #<tblEnmYPos
                sta     TblEnmYPtr,y
                dey
                bpl     @loop
                lda     #208              ;init Player Pos
                sta     PlayerX
                lda     #167
                sta     PlayerY
                lda     #>macWalkLeftSprite
                sta     PreshiftAddrHi
                sta     SrcP+1
                jsr     DrawInitMack
                lda     #$03
                sta     s3BoxFaceDirection?
                lda     #$02
                sta     PadIdx
                jsr     S1InitStuff
                jsr     encryptJmp        ;after drawn static thing, go $7431
                sta     setF0             ;will skip?
                rts

drawS13Ground   lda     #$80
                sta     OrByte
                lda     #$01
                sta     drawGroundLineVar
                lda     #$bd
                sta     Yline
                sta     Ything2
                lda     #$00
                sta     StartLineByte
                lda     #$fe
                sta     EndLineByte
                jsr     drawGroundLine
                lda     #$be
                sta     Yline
                sta     Ything2
                lda     #$01
                sta     StartLineByte
                lda     #$ff
                sta     EndLineByte
                jsr     drawGroundLine
                lda     #$bf
                sta     Yline
                sta     Ything2
                lda     #$01
                sta     StartLineByte
                lda     #$ff
                sta     EndLineByte
                jsr     drawGroundLine
                rts

drawS1UpperRightthing lda #38
                sta     XLocDiv7
                lda     #39
                sta     WidthDiv7
                lda     #42
                sta     YLoc
                sec
                sbc     #16
                sta     Ycount
                lda     #>S1clockSprite
                sta     SrcP+1
                lda     #<S1clockSprite
                sta     SrcP
                jsr     BitBlt1
                rts

DrawS1JumpPad   lda     #$23
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$bc
                sta     YLoc
                sec
                sbc     #16
                sta     Ycount
                lda     #>jumpPadSprite
                sta     SrcP+1
                lda     #<jumpPadSprite
                sta     SrcP
                jsr     BitBlt1
                rts

drawS1Lift      lda     #$00
                sta     XLocDiv7
                clc
                adc     #$03
                sta     WidthDiv7
                lda     liftY?
                sta     YLoc
                sec
                sbc     #$31
                sta     Ycount
                lda     #>liftSprite
                sta     SrcP+1
                lda     #<liftSprite
                sta     SrcP
                jsr     BitBlt1
                rts

DrawS1LiftPole  lda     #$01
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #188
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #>LiftPoleSprite
                sta     SrcP+1
                lda     #<LiftPoleSprite
                sta     SrcP
                jsr     BitBlt1
                rts

DrawInitMack    lda     PlayerX
                sta     PlayerXsav
                sta     XLocDiv7
                sta     XLocation
                lda     PlayerY
                sta     PlayerYSav
                sta     YLoc
                sta     YLocation
                lda     #$8b
                sta     Src_Erase+1
                jsr     XorPreshiftShape
                rts

drawTopAndRightStatus lda #$18
                ldx     #$8d
                jsr     PrintNumChar      ;draw 0 bonus score hiScore
                lda     #$18
                ldx     #$b8
                jsr     PrintNumChar      ;print Level 0
                lda     #$18
                ldx     #$d4
                jsr     PrintNumChar      ;Mack #
                rts

XORst1Floor     ldx     #$04
                stx     indexVar
XORst1Floor1    ldy     #$0d
                sty     timer1
XORst1Floor2    ldx     indexVar
                lda     tblS1FloorY,x
                jsr     XORst1Floor3
                dec     timer1
                ldy     timer1
                cpy     #$ff
                bne     XORst1Floor2
                dec     indexVar
                ldx     indexVar
                cpx     #$ff
                bne     XORst1Floor1
                rts

XORst1Floor3    sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     tblS1FloorXdiv7,y
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #>S1CrossBeam2
                sta     SrcP+1
                lda     #<S1CrossBeam2
                sta     SrcP
                clc
                adc     tblSt1Floor2,y
                sta     SrcP
                lda     SrcP+1
                adc     #$00
                sta     SrcP+1
                lda     #$01
                sta     bltXor
                jsr     BitBlt1
                rts

S1DrawVerticalsteelBar ldy #$03
                sty     timer1
@loop           lda     S1SteelBarXLocDiv7
                sta     XLocDiv7
                jsr     S1DrawOneSteelBar
                ldy     timer1
                lda     S1SteelBarXLocDiv7+1
                sta     XLocDiv7
                jsr     S1DrawOneSteelBar
                dec     timer1
                ldy     timer1
                cpy     #$ff
                bne     @loop
                rts

S1DrawOneSteelBar clc
                adc     #$01
                sta     WidthDiv7
                lda     tblS1SteelbarY,y  ;4 floor
                sta     YLoc
                sec
                sbc     #$18
                sta     Ycount
                lda     #>VerticalsteelBar
                sta     SrcP+1
                lda     #<VerticalsteelBar
                sta     SrcP
                lda     #$01
                sta     bltXor
                jsr     BitBlt1
                rts

s1DrawBaseStand ldy     #$03
                sty     timer1
@loop           lda     S1BaseStandY
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     tblS1BaseStandX,y
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #>s1BaseStand
                sta     SrcP+1
                lda     #<s1BaseStand
                sta     SrcP
                lda     #$01
                sta     bltXor
                jsr     BitBlt1
                dec     timer1
                ldy     timer1
                cpy     #$ff
                bne     @loop
                rts

Ycount          .dd1    $9e
WidthDiv7       .dd1    $0d
bltStore        .dd1    $00

bltXor          brk

bltORA          .dd1    $00

BitBlt1         ldx     YLoc              ;get Y
                lda     YTableL,x         ;look up address
                sta     dstPtr
                lda     YTableH,x
                ora     PageNum           ;this is hex 20, start of HGR1
                sta     dstPtr+1
                ldy     WidthDiv7
                ldx     #$00              ;always 0
@_do_a_line     lda     bltXor            ;is 14a3 not zero?
                bne     @_2               ;do XOR draw
                lda     bltORA
                bne     @_3               ;do OR draw
                lda     bltStore
                beq     @_4
                lda     #$00
                jmp     @_5

@_2             lda     (dstPtr),y
                eor     (SrcP,x)
                jmp     @_5

@_3             lda     (dstPtr),y
                ora     (SrcP,x)
                jmp     @_5

@_4             lda     (SrcP,x)          ;e.g 7FA0
@_5             sta     (dstPtr),y        ;store to screen
                dey                       ;move backward to next BLT location
                clc
                inc     SrcP              ;Update source Pointer to next element
                bne     @_6
                inc     SrcP+1            ;crossed low byte boundary, inc high byte
@_6             cpy     #$ff              ;done a line?
                beq     @_7
                cpy     XLocDiv7          ;simple clipping, crossed left boundary?
                bcs     @_do_a_line       ;nope, do mpre
@_7             dec     YLoc              ;dec Vertically
                lda     YLoc              ;done?
                cmp     #$01
                bne     @_8               ;Not yet
                rts

@_8             lda     Ycount            ;final height
                cmp     YLoc              ;dec current height that go up
                bne     BitBlt1           ;go up for more
                lda     #$00
                sta     bltStore
                sta     bltXor
                sta     bltORA
                rts

                .dd1    $a5
                .dd1    $0c
                .dd1    $38
                .dd1    $e9
                .dd1    $10
                .dd1    $8d
                .dd1    $a0
                .dd1    $14
                .dd1    $a5
                .dd1    $0b
                .dd1    $18
                .dd1    $69
                .dd1    $01
                .dd1    $8d
                .dd1    $a1
                .dd1    $14
                .dd1    $20
                .dd1    $a5
                .dd1    $14
                .dd1    $60

drawGroundLine  lda     StartLineByte
                cmp     EndLineByte
                beq     @_2
@loop           ldy     Yline
                lda     YTableL,y
                sta     dstPtr
                lda     YTableH,y
                ora     PageNum
                sta     dstPtr+1
                ldx     StartLineByte
                lda     tbl_0_1_2_4_8,x
                sta     XorByte
                lda     TBL_div7,x
                tay
                lda     (dstPtr),y
                eor     XorByte
                ora     OrByte
                sta     (dstPtr),y
                cpx     EndLineByte
                bcs     @exit
                inc     StartLineByte
                lda     drawGroundLineVar
                beq     @loop
                inc     StartLineByte
                jmp     @loop

@exit           rts

@_2             ldx     StartLineByte
                lda     tbl_0_1_2_4_8,x
                sta     XorByte
                lda     TBL_div7,x
                tay
                ldx     Yline
@loop2          lda     YTableL,x
                sta     dstPtr
                lda     YTableH,x
                ora     PageNum
                sta     dstPtr+1
                lda     (dstPtr),y
                eor     XorByte
                ora     OrByte
                sta     (dstPtr),y
                cpx     Ything2
                beq     @exit2
                inx
                jmp     @loop2

@exit2          rts

RivetShapeTable .dd1    $00               ;draw sequence of the nail like Apple Shape table
                .dd1    $04               ;draw 1 dpt, then up 3 time and draw
                .dd1    $04
                .dd1    $04
                .dd1    $03               ;then move left and draw
                .dd1    $04               ;then move up and draw
                .dd1    $01               ;then move right 4 time and drawa
                .dd1    $01
                .dd1    $01
                .dd1    $01
                .dd1    $02               ;then move down with draw
                .dd1    $03               ;move left with draw
                .dd1    $02               ;move down 3 time with draw
                .dd1    $02
                .dd1    $02
                .dd1    $03               ;then move left and draw
                .dd1    $04               ;move up 3 time with draw
                .dd1    $04
                .dd1    $04
                .dd1    $0f               ;unknown condition, exit

drawNail        ldy     #$00
                sty     timer1
drawNailLoop    ldy     timer1
                lda     (SrcP),y          ;draw a dot if zero
                beq     @drawDot
                cmp     #$01              ;move right then draw a dot
                beq     @_1
                cmp     #$02
                beq     @_2               ;move down then draw
                cmp     #$03
                beq     @_3               ;move left then draw
                cmp     #$04
                beq     @_4               ;move up then draw
                cmp     #$05
                beq     @_5               ;move right
                cmp     #$06
                beq     @_6
                cmp     #$07
                beq     @_7
                cmp     #$08
                beq     @_8
                rts

@drawDot        jsr     drawRod
                jmp     drawNailNextStep

@_1             inc     XLocDiv7
                jsr     drawRod
                jmp     drawNailNextStep

@_2             inc     YLoc
                jsr     drawRod
                jmp     drawNailNextStep

@_3             dec     XLocDiv7
                jsr     drawRod
                jmp     drawNailNextStep

@_4             dec     YLoc
                jsr     drawRod
                jmp     drawNailNextStep

@_5             inc     XLocDiv7
                jmp     drawNailNextStep

@_6             inc     YLoc
                jmp     drawNailNextStep

@_7             dec     XLocDiv7
                jmp     drawNailNextStep

@_8             dec     YLoc
                jmp     drawNailNextStep

drawRod         ldy     YLoc
                lda     YTableL,y
                sta     dstPtr
                lda     YTableH,y
                ora     PageNum
                sta     dstPtr+1
                ldx     XLocDiv7
                lda     tbl_0_1_2_4_8,x
                sta     XorByte
                lda     TBL_div7,x
                tay
                lda     (dstPtr),y
                ldx     xRegSave2
                bne     @DrawOr
                eor     XorByte           ;Exclusive Or bitmap
                ora     OrByte
                sta     (dstPtr),y
                rts

@DrawOr         ora     XorByte
                ora     OrByte
                sta     (dstPtr),y
                rts

drawNailNextStep inc    timer1
                ldy     timer1
                lda     (SrcP),y
                cmp     #$0f
                beq     @exit
                jmp     drawNailLoop

@exit           rts

tblS1NailSub    .dd1    $03
                .dd1    $04
                .dd1    $05
                .dd1    $06
tblS1NailAdd    .dd1    $fa
                .dd1    $fa
                .dd1    $fa
                .dd1    $fe
s1tblNailCompare .dd1   $0b
                .dd1    $0b
                .dd1    $0b
                .dd1    $0c
tblS1NailY      .dd1    $23
                .dd1    $23
                .dd1    $23
                .dd1    $23
s1TblNailXCompare .dd1  $1e
                .dd1    $1e
ZeroIfNailonScreen .dd1 $00
NailWaitBeforeUpdate .dd1 $02
tblS1NailDelay  .dd1    $50
                .dd1    $28

doNail          lda     ZeroIfNailonScreen
                beq     s1DrawNailClock
                dec     ZeroIfNailonScreen
                lda     #$14
                jsr     MON_WAIT
                rts

s1DrawNailClock dec     NailWaitBeforeUpdate
                beq     @_1
                rts

@_1             lda     #$01              ;cheat the delay of Nail
                sta     NailWaitBeforeUpdate
                lda     s1rivetVarLfdc
                bne     @_2
                jsr     shiftBytes
                and     #$03
                tay
                sty     s1rivetStepY
                lda     tblS1NailSub,y
                sta     rivetSubtract
                lda     tblS1NailAdd,y
                sta     rivetAddB
                sta     rivetSavedAddB
                lda     #252
                sta     rivetX
                sta     XLocDiv7
                lda     tblS1NailY,y
                sta     rivetY
                sta     YLoc
                lda     #$01
                sta     s1rivetVarLfdc
                lda     #$00
                sta     OrByte
                lda     #$15              ;9015 block of zero?
                sta     SrcP+1
                lda     #$90
                sta     SrcP
                jsr     drawNail
                lda     #$26
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$2a
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #>S1clock2Sprite
                sta     SrcP+1
                lda     #<S1clock2Sprite
                sta     SrcP
                jsr     BitBlt1
@_2             sec
                lda     rivetX
                sta     rivetPosSav
                sbc     rivetSubtract
                sta     rivetX
                clc
                lda     rivetY
                sta     rivetPosSavB
                adc     rivetAddB
                sta     rivetY
                lda     rivetPosSav
                sta     XLocDiv7
                lda     rivetPosSavB
                sta     YLoc
                lda     #$00
                sta     OrByte
                lda     #>RivetShapeTable
                sta     SrcP+1
                lda     #<RivetShapeTable
                sta     SrcP
                jsr     drawNail
                lda     rivetX
                sta     XLocDiv7
                lda     rivetY
                sta     YLoc
                lda     #$00
                sta     OrByte
                lda     #>RivetShapeTable
                sta     SrcP+1
                lda     #<RivetShapeTable
                sta     SrcP
                jsr     drawNail
                inc     rivetAddB
                lda     rivetAddB
                ldy     s1rivetStepY
                cmp     s1tblNailCompare,y
                bne     @_3
                ldy     #>Music1
                ldx     #<Music1
                jsr     InitTune
                ldy     rivetSavedAddB
                sty     rivetAddB
@_3             ldx     onLiftFlag
                lda     rivetX
                cmp     s1TblNailXCompare,x
                bcc     @_5
                lda     rivetY
                cmp     #190
                bcs     @_5               ;Nail Y over 190
                lda     rivetX
                cmp     #133
                bcc     @_4               ;nail x < 133
                rts

@_4             lda     #$26
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$2a
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #>S1clockSprite
                sta     SrcP+1
                lda     #<S1clockSprite
                sta     SrcP
                jsr     BitBlt1
                rts

@_5             lda     rivetX
                sta     XLocDiv7
                lda     rivetY
                sta     YLoc
                lda     #$00
                sta     OrByte
                lda     #$15
                sta     SrcP+1
                lda     #$90
                sta     SrcP
                jsr     drawNail
                lda     #$00
                sta     s1rivetVarLfdc
                sta     rivetX
                sta     rivetY
                ldy     generalCounter
                lda     tblS1NailDelay,y
                sta     ZeroIfNailonScreen
                rts

shiftBytes      sec
                lda     @_2
                adc     @_3
                adc     @_4
                sta     @_1
                ldx     #$04
@loop           lda     @_1,x
                sta     @_2,x
                dex
                bpl     @loop
                lda     @_1
                rts

@_1             .dd1    $00
@_2             .dd1    $00
                .dd1    $00
                .dd1    $00
@_3             .dd1    $00
@_4             .dd1    $00
                .dd1    $00
                .dd1    $00
tblS1floorABC   .dd1    $54
                .dd1    $62
                .dd1    $70
                .dd1    $7e
                .dd1    $8c
                .dd1    $9a

via2s1_InitBlockHole ldy #$01
L17D7           jsr     shiftBytes
                and     #$05
                tax
                lda     tblS1floorABC,x
                sta     S1beamX,y
                iny
                cpy     #$05
                bne     L17D7
                rts

xArry           .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
tbl1_s1_InitBlockHole .dd1 42
                .dd1    70
                .dd1    168
                .dd1    196
tblS1PickBlockStyle .dd1 0
                .dd1    32
                .dd1    0
                .dd1    32
; Holding the offset for picking block shape, it can be 0 or about xx byte such
; that we can add it to get the real address when render the picking block
tblS1Block      .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00

vias1_InitBlockHole ldy #$01
@loop           jsr     shiftBytes
                and     #$03
                tax
                lda     tbl1_s1_InitBlockHole,x
                sta     xArry,y
                lda     tblS1PickBlockStyle,x
                sta     tblS1Block,y      ;store the picking block style
                iny
                cpy     #$05
                bne     @loop
                rts

PrintNumChar    sta     StringPtr+1
                stx     StringPtr
PrintChar2      ldy     #$00
                lda     (StringPtr),y
                sta     XLocDiv7
                iny
                lda     (StringPtr),y
                sta     YLoc
                lda     #$02              ;Advance ptr by 2
                clc
                adc     StringPtr
                sta     StringPtr
                bcc     PrintChar3        ;Not cross Boundary
                inc     StringPtr+1       ;in Ptr High byte
PrintChar3      ldy     #$00
                lda     (StringPtr),y
                cmp     #$00
                beq     PrintChar5
                cmp     #$01
                bne     PrintChar6
                inc     StringPtr
                bne     PrintChar4
                inc     StringPtr+1
PrintChar4      jmp     PrintChar2

PrintChar5      rts

PrintChar6      and     #$7f
                sec
                sbc     #$20
                ldy     #$00
                sty     DstHGR+1
                asl     A
                asl     A
                asl     A
                sta     DstHGR
                rol     DstHGR+1
                lda     #$8d
                clc
                adc     DstHGR+1
                sta     DstHGR+1
                ldx     #$08
PrintChar7      ldy     YLoc
                lda     YTableL,y
                sta     SrcP
                lda     YTableH,y
                ora     PageNum
                sta     SrcP+1
                ldy     #$00
                lda     (DstHGR),y
                ldy     XLocDiv7
                sta     (SrcP),y
                inc     YLoc
                inc     DstHGR
                dex
                bne     PrintChar7
                inc     XLocDiv7
                lda     YLoc
                sec
                sbc     #$08
                sta     YLoc
                inc     StringPtr
                bne     PrintChar3
                inc     StringPtr+1
                jmp     PrintChar3

                .dd1    $00
                .dd1    $00
                .zstr   ↑“BONUS:00000  SCORE:00000  HI-SCORE:00000”
                .dd1    $27
                .dd1    $40
                .dd1    $cc
                .dd1    $01
                .dd1    $27
                .dd1    $48
                .dd1    $c5
                .dd1    $01
                .dd1    $27
                .dd1    $50
                .dd1    $d6
                .dd1    $01
                .dd1    $27
                .dd1    $58
                .dd1    $c5
                .dd1    $01
                .dd1    $27
                .dd1    $60
                .dd1    $cc
                .dd1    $01
                .dd1    $27
                .dd1    $68
                .dd1    $a0
                .dd1    $01
                .dd1    $27
                .dd1    $70
                .dd1    $b0
                .dd1    $00
                .dd1    $27
                .dd1    $90
                .dd1    $cd
                .dd1    $01
                .dd1    $27
                .dd1    $98
                .dd1    $c1
                .dd1    $01
                .dd1    $27
                .dd1    $a0
                .dd1    $c3
                .dd1    $01
                .dd1    $27
                .dd1    $a8
                .dd1    $cb
                .dd1    $01
                .dd1    $27
                .dd1    $b0
                .dd1    $a0
                .dd1    $01
                .dd1    $27
                .dd1    $b8
                .dd1    $b2
                .dd1    $00
                .dd1    $0d
                .dd1    $50
                .str    ↑“           ”
                .dd1    $01
                .dd1    $0d
                .dd1    $58
                .str    ↑“ GAME OVER ”
                .dd1    $01
                .dd1    $0d
                .dd1    $60
                .str    ↑“           ”
                .dd1    $00
                .dd1    $13
                .dd1    $30
                .dd1    $c2
                .dd1    $d9
                .dd1    $01
                .dd1    $02
                .dd1    $40
                .str    ↑“MICHAEL ABBOT AND MATTHEW ALEXANDER”
                .dd1    $01
                .dd1    $00
                .dd1    $68
                .str    ↑“    VANDAL         MACK         OSHA”
                .dd1    $01
                .dd1    $12
                .str    ↑“9(C) 1983 MICHAEL ABBOT”
                .dd1    $00
txtDedication   .dd1    $0a
                .dd1    $00
                .str    ↑“MICHAEL'S DEDICATION”
                .dd1    $01
                .dd1    $0e
                .dd1    ‘ ’
                .str    ↑“HARD HAT MACK”
                .dd1    $01
                .dd1    $13
                .dd1    ‘(’
                .str    ↑“IS”
                .dd1    $01
                .dd1    $06
                .dd1    ‘0’
                .str    ↑“DEDICATED TO MY GRANDPARENTS”
                .dd1    $01
                .dd1    $0d
                .dd1    ‘@’
                .str    ↑“MYMY AND JIMDAD”
                .dd1    $00
txtToBigAl      .dd1    $0b
                .dd1    $00
                .str    ↑“MATTHEW'S DEDICATION”
                .dd1    $01
                .dd1    $00
                .dd1    ‘@’
                .str    ↑“TO BIG AL:”
                .dd1    $01
                .dd1    $00
                .dd1    ‘P’
                .str    ↑“MAY THE OSHA NEVER DARKEN YOUR DOORWAY”
                .dd1    $00

PrtLIFE         lda     LIFE
                ora     #$30
                sta     L1A3D
                lda     #$1a
                ldx     #$3b
                jsr     PrintNumChar
                rts

                .dd1    $27
                .dd1    $b8
L1A3D           .dd1    $b0
                .dd1    $00

L1A3F           sta     SrcP+1
                stx     XLocDiv7
                stx     XLocation
                sty     YLoc
                sty     YLocation
                lda     #$8b
                sta     Src_Erase+1
                jsr     XorPreshiftShape
                rts

s3spikeShapeTbl .dd1    $00
                .dd1    $20
                .dd1    $40
                .dd1    $20
saveShapeAdr3   .dd1    $00
                .dd1    $00
saveShapeAdr3B  .dd1    $00
                .dd1    $00
isS3SpikeInit   .dd1    $00
S3spikeSkipCount .dd1   $01
s3spikesShapeNum .dd1   $00

s3drawSpike     dec     S3spikeSkipCount  ;no need to draw new spike everytime
                beq     s3drawSpike1
                rts

s3drawSpike1    lda     #$02
                sta     S3spikeSkipCount
                lda     isS3SpikeInit
                bne     s3drawSpike2
                lda     #>S3spike1        ;Init the pointer to bitmap
                sta     saveShapeAdr3+1
                lda     #<S3spike1        ;first shape to draw
                sta     saveShapeAdr3
                lda     #>BlankShape
                sta     saveShapeAdr3B+1
                lda     #<BlankShape      ;first shape to erase via XOR is blank
                sta     saveShapeAdr3B
                lda     #$01
                sta     isS3SpikeInit
                lda     #$00
                sta     s3spikesShapeNum
s3drawSpike2    lda     #$00
                sta     XLocDiv7
                sta     XLocation
                lda     #$47
                sta     YLoc
                sta     YLocation
                lda     saveShapeAdr3B+1  ;get bitmap to erase
                sta     Src_Erase+1
                lda     saveShapeAdr3B
                sta     Src_Erase
                lda     saveShapeAdr3+1   ;get bitmap to draw
                sta     SrcP+1
                lda     saveShapeAdr3
                sta     SrcP
                jsr     BltBytes
                lda     saveShapeAdr3+1   ;rememeber bitmap that just drawn
                sta     saveShapeAdr3B+1
                lda     saveShapeAdr3
                sta     saveShapeAdr3B
                inc     s3spikesShapeNum  ;next shape num counter
                ldy     s3spikesShapeNum
                cpy     #$04              ;if 4 then reset to 0
                bne     s3drawSpike3
                ldy     #$00
                sty     s3spikesShapeNum
s3drawSpike3    clc
                lda     #<S3spike1        ;calc next shape address
                adc     s3spikeShapeTbl,y ;get actual offset from look up
                sta     saveShapeAdr3
                lda     #>S3spike1
                adc     #$00
                sta     saveShapeAdr3+1
                rts

setMackMusic    lda     ZeroIfStandStill
                bne     @_1               ;Mack Moved, so go down
                lda     #$5e
                sta     SNDPtrToX+1
                lda     #$df
                sta     SNDPtrToX
                rts

@_1             lda     #$1a
                sta     SNDPtrToX+1
                lda     #$f4
                sta     SNDPtrToX
                rts

                .dd1    $08
v1af5           .dd1    $02
                .dd1    $ff
                .dd1    $01
                .dd1    $08
v1af9           .dd1    $02
                .dd1    $ff
                .dd1    $02
                .dd1    $01
a1afd           .dd1    $03
                .dd1    $ff
a1aff           .dd1    $02
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
JumpMusic       .dd1    $00
                .dd1    $02
                .dd1    $03
                .dd1    $02
                .dd1    $06
                .dd1    $02
                .dd1    $08
a10b            .dd1    $02
                .dd1    $08
                .dd1    $02
                .dd1    $06
                .dd1    $02
                .dd1    $03
                .dd1    $02
                .dd1    $00
                .dd1    $00
PickBoxMusic    .dd1    $00
                .dd1    $02
                .dd1    $03
                .dd1    $02
                .dd1    $01
                .dd1    $02
                .dd1    $04
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $05
                .dd1    $02
                .dd1    $03
                .dd1    $02
                .dd1    $06
                .dd1    $02
                .dd1    $24
                .dd1    $02
                .dd1    $00
                .dd1    $00
                .dd1    $24
                .dd1    $02
                .dd1    $06
                .dd1    $02
                .dd1    $03
                .dd1    $02
                .dd1    $05
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $04
                .dd1    $02
                .dd1    $01
                .dd1    $02
                .dd1    $03
                .dd1    $02
                .dd1    $00
                .dd1    $02
                .dd1    $00
                .dd1    $00
Music1          .dd1    $fd
                .dd1    $01
                .dd1    $08
                .dd1    $01
                .dd1    $fe
                .dd1    $01
                .dd1    $00
                .dd1    $00
collapseMackTune .dd1   $00
                .dd1    $02
                .dd1    $03
                .dd1    $02
                .dd1    $04
                .dd1    $03
                .dd1    $03
                .dd1    $02
                .dd1    $02
                .dd1    $01
                .dd1    $00
                .dd1    $02
                .dd1    $03
                .dd1    $02
                .dd1    $04
                .dd1    $03
                .dd1    $03
                .dd1    $02
                .dd1    $02
                .dd1    $01
                .dd1    $00
                .dd1    $02
                .dd1    $03
                .dd1    $02
                .dd1    $04
                .dd1    $03
                .dd1    $03
                .dd1    $02
                .dd1    $02
                .dd1    $01
                .dd1    $00
                .dd1    $00
padTune         .dd1    $08
                .dd1    $01
                .dd1    $07
                .dd1    $01
                .dd1    $06
                .dd1    $01
                .dd1    $06
                .dd1    $01
                .dd1    $07
                .dd1    $01
                .dd1    $08
                .dd1    $01
                .dd1    $00
                .dd1    $00
liftY?          .dd1    $00
liftPoleVar     .dd1    $00
onLF0           .dd1    $00
onLiftFlag      .dd1    $00
mackInLiftFlag  .dd1    $00

checkCtrlKey    lda     isInGameLoop
                beq     @_1
                rts

@_1             lda     s1AirHamVar
                beq     @_2
                rts

@_2             lda     KBD
                cmp     #$80              ;did player hit any key?
                bcs     @_3               ;yes, check what is that
                rts

@_3             cmp     #$92              ;is Ctrl-R ?
                bne     @_4
                jmp     ReadyReturnToTitle

@_4             cmp     #$9b              ;is ESC ?
                bne     @_5
                jmp     PAUSE_GAME

@_5             cmp     #$93              ;Ctrl-S
                bne     @_6
                jmp     toggleSound

@_6             cmp     #$83              ;is Ctrl-C ?
                bne     @_7
                jmp     configKeyobard    ;yes, config the keyboard

@_7             cmp     #$9d              ;ctrl-]
                bne     @_8
                jmp     msgToBigAl

@_8             cmp     #$9e
                bne     checkReturnKey
                jmp     pressedCtrlCaret

checkReturnKey  cmp     #$8d              ;return to drop EHam
                bne     @exit
                jmp     Eham

@exit           rts

checkCtrlS      cmp     #$93              ;is Ctrl-S
                beq     toggleSound
                rts

toggleSound     sta     KBDSTRB           ;Toggle Wait Var
                lda     isMute
                eor     #$01
                sta     isMute
                sta     isNoSoundSav
                rts

PAUSE_GAME      sta     KBDSTRB
@Loop           lda     KBD
                bpl     @Loop
                cmp     #$9b              ;Press ESC to pause
                beq     @exit
                jmp     PAUSE_GAME

@exit           sta     KBDSTRB
                rts

ReadyReturnToTitle sta  KBDSTRB
                jmp     Start

                .dd1    $60

FlipOnLiftFlag  lda     onLiftFlag
                eor     #$01
                sta     onLiftFlag
                lda     #$00
                sta     mackInLiftFlag
                rts

pressedCtrlCaret sta    KBDSTRB
                jsr     HGRdo
                lda     #>txtDedication   ;MichealDelication
                ldx     #<txtDedication
                jsr     PrintNumChar
@_1             lda     KBD
                bpl     @_1
                sta     KBDSTRB
                jmp     Start

msgToBigAl      sta     KBDSTRB
                jsr     HGRdo
                lda     #>txtToBigAl
                ldx     #<txtToBigAl
                jsr     PrintNumChar
L1C1E           lda     KBD
                bpl     L1C1E
                sta     KBDSTRB
                jmp     Start

                .dd1    $00
tblLIFTsprite   .dd1    $00               ;liftSprite  or MackInLift sprite
                .dd1    $c4

s1_TestLift     lda     onLiftFlag
                bne     @_1
                rts

@_1             lda     liftPoleVar
                beq     @_2
                jmp     @_6

@_2             lda     liftY?
                sec
                sbc     #$08
                cmp     #$54
                bcs     @_3
                lda     #$00
                sta     onLiftFlag
                lda     #$01
                sta     liftPoleVar
                sta     YregSave
                lda     #$54
@_3             sta     liftY?
                sta     YLoc
                sec
                sbc     #$31
                sta     Ycount
                lda     #$00
                sta     XLocDiv7
                clc
                adc     #$03
                sta     WidthDiv7
                clc
                ldy     mackInLiftFlag
                lda     #<liftSprite      ;liftSprite  or MackInLift sprite
                adc     tblLIFTsprite,y
                sta     SrcP
                lda     #>liftSprite
                adc     #$00
                sta     SrcP+1
                jsr     BitBlt1
                lda     onLF0
                sec
                sbc     #$08
                cmp     #$5c
                bcs     @_4
                lda     #$5c
@_4             sta     YLoc
                sta     onLF0
                sec
                sbc     #$10
                sta     Ycount
                lda     #$01
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #>LiftPoleSprite
                sta     SrcP+1
                lda     #<LiftPoleSprite
                sta     SrcP
                jsr     BitBlt1
                lda     liftPoleVar
                beq     @_5
                lda     #$01
                sta     YregSave
                lda     mackInLiftFlag
                beq     @_5
                lda     #$47
                sta     ypoint
                lda     #$06
                sta     xpoint7
                lda     #$01
                sta     collpasMackVar
@_5             rts

@_6             lda     liftY?
                clc
                adc     #$08
                cmp     #$b4
                bcc     @_7
                lda     #$00
                sta     liftPoleVar
                lda     #$00
                sta     onLiftFlag
                lda     #$04
                sta     YregSave
                lda     #$b4
@_7             sta     liftY?
                sta     YLoc
                sec
                sbc     #$31
                sta     Ycount
                lda     #$00
                sta     XLocDiv7
                clc
                adc     #$03
                sta     WidthDiv7
                clc
                ldy     mackInLiftFlag
                lda     #<liftSprite
                adc     tblLIFTsprite,y   ;if Mack in Lift then not 8488, but 854c
                sta     SrcP
                lda     #>liftSprite
                adc     #$00
                sta     SrcP+1
                jsr     BitBlt1
                clc
                lda     onLF0
                clc
                adc     #$08
                cmp     #$bc
                bcc     @_8
                lda     #$bc
@_8             sta     YLoc
                sta     onLF0
                sec
                sbc     #$10
                sta     Ycount
                lda     #$01
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #>LiftPoleSprite  ;LiftPoleSprite
                sta     SrcP+1
                lda     #<LiftPoleSprite
                sta     SrcP
                jsr     BitBlt1
                lda     liftPoleVar
                bne     @_5
                lda     #$04
                sta     YregSave
                lda     mackInLiftFlag
                bne     @_9
                jmp     @_5

@_9             lda     #$a7
                sta     ypoint
                lda     #$06
                sta     xpoint7
                lda     #$01
                sta     collpasMackVar
                rts

PointsToAdd     .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
PointsToAdd4    .dd1    $00
                .dd1    $00
Score           .dd1    $00               ;5 digit score
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
scorePosition   .dd1    $17               ;the x div 7 position of the score digt
                .dd1    $16
                .dd1    $15
                .dd1    $14
                .dd1    $13
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
HiScore         .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
HiScorePos      .dd1    $27
                .dd1    $26
                .dd1    $25
                .dd1    $24
                .dd1    $23
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00

UpdScore        ldx     #$00
                clc
@_1             lda     Score,x
                adc     PointsToAdd,x
                cmp     #$0a
                bcc     @_2
                lda     #$00
                sec
@_2             sta     Score,x
                php
                inx
                cpx     #$05
                beq     @_3
                plp
                jmp     @_1

@_3             plp
                lda     #$00
                sta     PointsToAdd
                sta     PointsToAdd+1
                sta     PointsToAdd+2
                sta     PointsToAdd+3
                sta     PointsToAdd4+1
                sta     PointsToAdd4
                jsr     PrtScore
                rts

PrtScore        ldx     #$00
                stx     timer1
@_1             lda     scorePosition,x   ;score Byte Position
                sta     toDrawXbytePos
                lda     Score,x
                ora     #$30
                sta     toDrawDigit
                lda     #$1d
                ldx     #$da
                jsr     PrintNumChar
                inc     timer1
                ldx     timer1
                cpx     #$05
                bne     @_1
                rts

toDrawXbytePos  .dd1    $00
                .dd1    $00
toDrawDigit     .dd1    $30
                .dd1    $00

testHiScore     ldx     #$04
@_1             lda     Score,x
                cmp     HiScore,x
                bcc     notHiScore
                bne     setNewHiScore
                dex
                bpl     @_1
notHiScore      rts

setNewHiScore   ldx     #$04
@_1             lda     Score,x
                sta     HiScore,x
                dex
                bpl     @_1
PrtHisScore     ldx     #$04
                stx     timer1
@Loop           lda     HiScorePos,x      ;Byte level instead of X, in reverse
                sta     toDrawXbytePos
                lda     HiScore,x
                ora     #$30
                sta     toDrawDigit
                lda     #$1d
                ldx     #$da
                jsr     PrintNumChar
                dec     timer1
                ldx     timer1
                bpl     @Loop
                rts

tblS3LeftPlatformX .dd1 $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $54
                .dd1    $58
                .dd1    $5c
                .dd1    $60
                .dd1    $64
                .dd1    $68
                .dd1    $6c
                .dd1    $70
                .dd1    $74
                .dd1    $78
                .dd1    $7c
                .dd1    $80
                .dd1    $84
                .dd1    $88
                .dd1    $8c
                .dd1    $90
                .dd1    $94
                .dd1    $96
                .dd1    $98
                .dd1    $9a
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
                .dd1    $9c
tblS3LeftPlatformY .dd1 $47
                .dd1    $4b
                .dd1    $4f
                .dd1    $53
                .dd1    $57
                .dd1    $5b
                .dd1    $5f
                .dd1    $63
                .dd1    $67
                .dd1    $6b
                .dd1    $6f
                .dd1    $73
                .dd1    $77
                .dd1    $7b
                .dd1    $7f
                .dd1    $83
                .dd1    $87
                .dd1    $8b
                .dd1    $8f
                .dd1    $93
                .dd1    $97
                .dd1    $9b
                .dd1    $9f
                .dd1    $a3
                .dd1    $a7
                .dd1    $ab
                .dd1    $af
                .dd1    $b3
                .dd1    $b7
                .dd1    $b3
                .dd1    $af
                .dd1    $ab
                .dd1    $a7
                .dd1    $a3
                .dd1    $a0
                .dd1    $9f
                .dd1    $9f
                .dd1    $9f
                .dd1    $9f
                .dd1    $9f
                .dd1    $9f
                .dd1    $9f
                .dd1    $9f
                .dd1    $9f
                .dd1    $9f
                .dd1    $9f
                .dd1    $a1
                .dd1    $a5
                .dd1    $a9
                .dd1    $ad
                .dd1    $af
                .dd1    $b3
                .dd1    $b7
                .dd1    $b3
                .dd1    $af
                .dd1    $ab
                .dd1    $a7
                .dd1    $a3
                .dd1    $9f
                .dd1    $9b
                .dd1    $97
                .dd1    $93
                .dd1    $8f
                .dd1    $8b
                .dd1    $87
                .dd1    $83
                .dd1    $7f
                .dd1    $7b
                .dd1    $77
                .dd1    $73
                .dd1    $6f
                .dd1    $6b
                .dd1    $67
                .dd1    $63
                .dd1    $5f
                .dd1    $5b
                .dd1    $57
                .dd1    $53
                .dd1    $4f
                .dd1    $4b
                .dd1    $47
tblS3NaiLXloc   .dd1    $44
                .dd1    $42
                .dd1    $3e
                .dd1    $3a
                .dd1    $36
                .dd1    $34
tblS3NaiLYloc   .dd1    $b5
                .dd1    $b1
                .dd1    $ae
                .dd1    $ae
                .dd1    $b0
                .dd1    $b3
tblS3NaiLXloc2  .dd1    $b4
                .dd1    $b4
                .dd1    $b8
                .dd1    $bc
                .dd1    $c0
                .dd1    $c2
tblS3NaiLYloc2  .dd1    $b5
                .dd1    $b1
                .dd1    $ae
                .dd1    $ae
                .dd1    $b0
                .dd1    $b3

XorPreshiftShape lda    #$00              ;do Draw and erase by XOR
                sta     SrcP
                sta     Src_Erase
                lda     XLocDiv7
                and     #$fe
                tax
                lda     PreShiftBitmapTblLow,x
                clc
                adc     SrcP
                sta     SrcP
                lda     PreShiftBitmapTblHi,x
                adc     SrcP+1
                sta     SrcP+1
                lda     TBL_div7,x
                sta     div7_1
                lda     XLocation
                and     #$fe
                tax
                lda     PreShiftBitmapTblLow,x
                clc
                adc     Src_Erase
                sta     Src_Erase
                lda     PreShiftBitmapTblHi,x
                adc     Src_Erase+1
                sta     Src_Erase+1
                lda     TBL_div7,x
                sta     div7_2
                lda     #16               ;moved from 5708???
                sta     bltHeight
@Loop           ldx     YLocation
                lda     YTableL,x
                sta     DstHGR
                lda     YTableH,x
                ora     PageNum
                sta     DstHGR+1
                ldx     #$00
                lda     div7_2
                clc
                adc     #$03
                tay
                inc     Src_Erase
                dey
                lda     (Src_Erase,x)
                eor     (DstHGR),y
                sta     (DstHGR),y
                inc     Src_Erase
                dey
                lda     (Src_Erase,x)
                eor     (DstHGR),y
                sta     (DstHGR),y
                inc     Src_Erase
                dey
                lda     (Src_Erase,x)
                eor     (DstHGR),y
                sta     (DstHGR),y
                inc     Src_Erase
                dec     YLocation
                bne     @_2
                inc     YLocation
@_2             ldx     YLoc
                lda     YTableL,x
                sta     DstHGR
                lda     YTableH,x
                ora     PageNum
                sta     DstHGR+1
                ldx     #$00
                lda     div7_1
                clc
                adc     #$03
                tay
                inc     SrcP
                dey
                lda     (SrcP,x)
                eor     (DstHGR),y
                sta     (DstHGR),y
                inc     SrcP
                dey
                lda     (SrcP,x)
                eor     (DstHGR),y
                sta     (DstHGR),y
                inc     SrcP
                dey
                lda     (SrcP,x)
                eor     (DstHGR),y
                sta     (DstHGR),y
                inc     SrcP
                dec     YLoc
                bne     @NextLine
                inc     YLoc
@NextLine       dec     bltHeight
                beq     @Done
                jmp     @Loop

@Done           rts

                .dd1    $11
                .dd1    $a0
                .dd1    $05
                .dd1    $d0
                .dd1    $0c
                .dd1    $a9
                .dd1    $1c
                .dd1    $a0
                .dd1    $01
                .dd1    $d0
                .dd1    $6a
                .dd1    $a9
                .dd1    $25
                .dd1    $a0
                .dd1    $02
                .dd1    $d0
                .dd1    $64
                .dd1    $85
                .dd1    $24
                .dd1    $a9
                .dd1    $01
                .dd1    $20
                .dd1    $5b
                .dd1    $fb
                .dd1    $a9
                .dd1    $a0
                .dd1    $20
                .dd1    $ed
                .dd1    $fd
                .dd1    $20
                .dd1    $ed
                .dd1    $fd
                .dd1    $c6
                .dd1    $24
                .dd1    $c6
                .dd1    $24
                .dd1    $20
                .dd1    $b0
                .dd1    $09
                .dd1    $e0
                .dd1    $02
                .dd1    $f0
                .dd1    $47
                .dd1    $c0
                .dd1    $04
                .dd1    $d0
                .dd1    $09
                .dd1    $ad
                .dd1    $2a
                .dd1    $0c
                .dd1    $30
                .dd1    $35
                .dd1    $c9
                .dd1    $23
                .dd1    $b0
                .dd1    $31
                .dd1    $c0
                .dd1    $05
                .dd1    $d0
                .dd1    $09
                .dd1    $ad
                .dd1    $2a
                .dd1    $0c
                .dd1    $30
                .dd1    $28
                .dd1    $c9
                .dd1    $10
                .dd1    $b0
                .dd1    $24
                .dd1    $c0
                .dd1    $01
                .dd1    $d0
                .dd1    $0d
                .dd1    $ad
                .dd1    $2a
                .dd1    $0c
                .dd1    $30
                .dd1    $1b
                .dd1    $c9
                .dd1    $08
                .dd1    $b0
                .dd1    $17
                .dd1    $0a
                .dd1    $0a
                .dd1    $0a
                .dd1    $0a
                .dd1    $c0
                .dd1    $02
                .dd1    $d0
                .dd1    $0b
                .dd1    $ad
                .dd1    $2a
                .dd1    $0c
                .dd1    $c9
                .dd1    $01
                .dd1    $f0
                .dd1    $04
                .dd1    $c9
                .dd1    $02
                .dd1    $d0
                .dd1    $04
                .dd1    $99
                .dd1    $14
                .dd1    $0c
                .dd1    $60
                .dd1    $20
                .dd1    $3a
                .dd1    $ff
                .dd1    $4c
                .dd1    $4f
                .dd1    $0b
                .dd1    $4c
                .dd1    $a3
                .dd1    $0a
                .dd1    $0a
                .dd1    $87
                .dd1    $01
                .dd1    $42
                .dd1    $41
L2000           .junk   8192
YTableL         .bulk   0000000000000000808080808080808000000000000000008080808080808080
                 +      0000000000000000808080808080808000000000000000008080808080808080
                 +      2828282828282828a8a8a8a8a8a8a8a82828282828282828a8a8a8a8a8a8a8a8
                 +      2828282828282828a8a8a8a8a8a8a8a82828282828282828a8a8a8a8a8a8a8a8
                 +      5050505050505050d0d0d0d0d0d0d0d05050505050505050d0d0d0d0d0d0d0d0
                 +      5050505050505050d0d0d0d0d0d0d0d05050505050505050d0d0d0d0d0d0d0d0
YTableH         .bulk   0004080c1014181c0004080c1014181c0105090d1115191d0105090d1115191d
                 +      02060a0e12161a1e02060a0e12161a1e03070b0f13171b1f03070b0f13171b1f
                 +      0004080c1014181c0004080c1014181c0105090d1115191d0105090d1115191d
                 +      02060a0e12161a1e02060a0e12161a1e03070b0f13171b1f03070b0f13171b1f
                 +      0004080c1014181c0004080c1014181c0105090d1115191d0105090d1115191d
                 +      02060a0e12161a1e02060a0e12161a1e03070b0f13171b1f03070b0f13171b1f
                .bulk   0004080c1014181c
                .bulk   0004080c1014181c
                .bulk   0105090d1115191d
                .bulk   0105090d1115191d
                .bulk   02060a0e12161a1e
                .bulk   02060a0e12161a1e
                .bulk   03070b0f13171b1f
                .bulk   03070b0f13171b1f
TBL_div7        .bulk   00000000000000
                .bulk   01010101010101
                .bulk   02020202020202
                .bulk   03030303030303
                .bulk   04040404040404
                .bulk   05050505050505
                .bulk   06060606060606
                .bulk   07070707070707
                .bulk   08080808080808
                .bulk   09090909090909
                .bulk   0a0a0a0a0a0a0a
                .bulk   0b0b0b0b0b0b0b
                .bulk   0c0c0c0c0c0c0c
                .bulk   0d0d0d0d0d0d0d
                .bulk   0e0e0e0e0e0e0e
                .bulk   0f0f0f0f0f0f0f
                .bulk   10101010101010
                .bulk   11111111111111
                .bulk   12121212121212
                .bulk   13131313131313
                .bulk   14141414141414
                .bulk   15151515151515
                .bulk   16161616161616
                .bulk   17171717171717
                .bulk   18181818181818
                .bulk   19191919191919
                .bulk   1a1a1a1a1a1a1a
                .bulk   1b1b1b1b1b1b1b
                .bulk   1c1c1c1c1c1c1c
                .bulk   1d1d1d1d1d1d1d
                .bulk   1e1e1e1e1e1e1e
                .bulk   1f1f1f1f1f1f1f
                .bulk   20202020202020
                .bulk   21212121212121
                .bulk   22222222222222
                .bulk   23232323232323
                .bulk   24242424
tbl_0_1_2_4_8   .bulk   0102040810204001
                .bulk   0204081020400102
                .bulk   0408102040010204
                .bulk   0810204001020408
                .bulk   1020400102040810
                .bulk   2040010204081020
                .bulk   4001020408102040
                .bulk   0102040810204001
                .bulk   0204081020400102
                .bulk   0408102040010204
                .bulk   0810204001020408
                .bulk   1020400102040810
                .bulk   2040010204081020
                .bulk   4001020408102040
                .bulk   0102040810204001
                .bulk   0204081020400102
                .bulk   0408102040010204
                .bulk   0810204001020408
                .bulk   1020400102040810
                .bulk   2040010204081020
                .bulk   4001020408102040
                .bulk   0102040810204001
                .bulk   0204081020400102
                .bulk   0408102040010204
                .bulk   0810204001020408
                .bulk   1020400102040810
                .bulk   2040010204081020
                .bulk   4001020408102040
                .bulk   0102040810204001
                .bulk   0204081020400102
                .bulk   0408102040010204
                .bulk   08102040010204
                .dd1    $08
PreShiftBitmapTblHi .bulk 00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
                .bulk   00000000010101
PreShiftBitmapTblLow .bulk 004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
                .bulk   004080c0004080
tblXdiv14       .bulk   00020406080a0c0e
                .bulk   10121416181a1c1e
                .bulk   20222426282a2c2e
tbls3RailStyle  .bulk   2000202000202000
                .bulk   2020002020002020
                .bulk   002020
RailTypeIdx     .dd1    $00
tblRailType     .dd1    $00
                .dd1    $60

s3_DrawPlatform lda     #$8f              ;bottom Line from 0x8f
                sta     YLoc
                lda     #$00              ;left most point div 7 (byte boundary)
                sta     XLocDiv7
                jsr     drawLeftPlatform
                lda     #$6f
                sta     YLoc
                lda     #$00
                sta     XLocDiv7
                jsr     drawLeftPlatform
                lda     #$8f
                sta     YLoc
                lda     #$18
                sta     XLocDiv7
                jsr     drawRightPlatform
                lda     #$6f
                sta     YLoc
                lda     #$18
                sta     XLocDiv7
                jsr     drawRightPlatform
                lda     #$4f
                sta     YLoc
                lda     #$18
                sta     XLocDiv7
                jsr     drawRightPlatform
                rts

drawLeftPlatform lda    YLoc              ;get bottom
                sec
                sbc     #$08
                sta     Ycount            ;draw up to 8 lines
                lda     XLocDiv7
                clc
                adc     #$0b
                sta     WidthDiv7
                ldy     RailTypeIdx
                clc
                lda     #<railType1       ;rail at 81f0 or 8250
                adc     tblRailType,y
                sta     SrcP
                lda     #>railType1
                adc     #$00
                sta     SrcP+1
                jsr     BitBlt1
                rts

drawRightPlatform lda   YLoc
                sec
                sbc     #$08
                sta     Ycount
                lda     XLocDiv7
                clc
                adc     #$0b
                sta     WidthDiv7
                ldy     RailTypeIdx
                clc
                lda     #<RailTypeA       ;Rail Type A or B
                adc     tblRailType,y
                sta     SrcP
                lda     #>RailTypeA
                adc     #$00
                sta     SrcP+1
                jsr     BitBlt1
                rts

s3TopPlatform   ldy     #$11
                sty     timer1
@loop           lda     #$2f
                sta     YLoc
                sec
                sbc     #$08
                sta     Ycount
                lda     tblXdiv14,y
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #>rail2Holes
                sta     SrcP+1
                lda     #<rail2Holes
                clc
                adc     tbls3RailStyle,y  ;draw 8780 rail2holes or 87a0 railFilled
                sta     SrcP
                lda     SrcP+1
                adc     #$00
                sta     SrcP+1
                jsr     BitBlt1
                dec     timer1
                ldy     timer1
                bpl     @loop
                rts

s3NailCollectPot sta    XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$bc
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #>S3nailPotSprite
                sta     SrcP+1
                lda     #<S3nailPotSprite
                sta     SrcP
                jsr     BitBlt1
                rts

drawEAlogo      lda     #$00
                sta     XLocDiv7
                clc
                adc     #$0d
                sta     WidthDiv7
                lda     #191              ;you can say apple HGR from line 0 to line 191
                sta     YLoc
                sec
                sbc     #$21
                sta     Ycount
                lda     #>EAlogo
                sta     SrcP+1
                lda     #<EAlogo
                sta     SrcP
                jsr     BitBlt1
                rts

S1InitStuff     lda     #$02
                sta     v1af5
                sta     v1af9
                sta     v1af9+2
                sta     a10b
                sta     a1aff
                lda     #$03
                sta     a1afd
                rts

s3SetVar        lda     #$01
                sta     v1af5
                sta     v1af9
                sta     v1af9+2
                sta     a10b
                sta     a1aff
                lda     #$02
                sta     a1afd
                rts

TBLChainXdiv7   .dd1    $1c
                .dd1    $22
                .dd1    $08
                .dd1    $02
                .dd1    $ff
TBLChainY       .dd1    $3f
                .dd1    $7f
                .dd1    $7f
                .dd1    $3f
tblS1ChainXdiv7 .dd1    $04
                .dd1    $1e
                .dd1    $04
                .dd1    $16
                .dd1    $ff
tblS1ChainY     .dd1    $9f
                .dd1    $7f
                .dd1    $5f
                .dd1    $3f
tblS2ChainXdiv7 .dd1    $22
                .dd1    $22
                .dd1    $ff
tblS2ChainY     .dd1    $9f
                .dd1    $af

PutClimbingChains ldy   #$00
                sty     timer1
@_1             ldy     timer1
                lda     (XLocDiv7Ptr),y   ;get from 4725
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     (YLocPtr),y
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #>Chain
                sta     SrcP+1
                lda     #<Chain
                sta     SrcP
                lda     #$01
                sta     bltXor
                jsr     BitBlt1
                inc     timer1
                ldy     timer1
                lda     (XLocDiv7Ptr),y
                cmp     #$ff
                bne     @_1
                rts

L4771           .dd1    $02
                .dd1    $1c
L4773           .dd1    $04
                .dd1    $1e

s3drawRightside ldy     #$01
                sty     timer1
L4779           lda     #$bc
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     L4771,y
                sta     XLocDiv7
                clc
                adc     #$05
                sta     WidthDiv7
                lda     #>InBurner
                sta     SrcP+1
                lda     #<InBurner
                sta     SrcP
                jsr     BitBlt1
                lda     #$8f
                sta     YLoc
                sec
                sbc     #$08
                sta     Ycount
                ldy     timer1
                lda     L4773,y
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$01
                sta     bltStore
                jsr     BitBlt1
                dec     timer1
                ldy     timer1
                bpl     L4779
                rts

s1DrawBell1     lda     #$08
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$12
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #>S1BellSprite
                sta     SrcP+1
                lda     #<S1BellSprite
                sta     SrcP
                lda     #$01
                sta     bltXor
                jsr     BitBlt1
                rts

s3DrawJumpad    lda     #$0c
                sta     XLocDiv7
                jsr     @_1
                lda     #$16
                sta     XLocDiv7
@_1             clc
                adc     #$01
                sta     WidthDiv7
                lda     #$bc
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #>jumpPadSprite
                sta     SrcP+1
                lda     #<jumpPadSprite
                sta     SrcP
                jsr     BitBlt1
                rts

s2DrawMidLeftBlocker lda #$06
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$67
                sta     YLoc
                sec
                sbc     #$08
                sta     Ycount
                lda     #>s2KillBlock
                sta     SrcP+1
                lda     #<s2KillBlock
                sta     SrcP
                jsr     BitBlt1
                rts

BitBltParm      .dd1    $00

BltBytes        lda     BitBltParm        ;Blt Bitmap that doesn't pre-shift
                bne     @_1
                lda     #$10
                sta     bltHeight
                jmp     @_2

@_1             lda     #$08
                sta     bltHeight
@_2             ldx     YLocation
                lda     YTableL,x
                sta     DstHGR
                lda     YTableH,x
                ora     PageNum
                sta     DstHGR+1
                ldx     #$00
                lda     XLocation
                clc
                adc     #$01
                tay
                lda     (Src_Erase,x)
                eor     (DstHGR),y
                sta     (DstHGR),y
                clc
                inc     Src_Erase
                bne     @_3
                inc     Src_Erase+1
@_3             dey
                lda     (Src_Erase,x)
                eor     (DstHGR),y
                sta     (DstHGR),y
                clc
                inc     Src_Erase
                bne     @_4
                inc     Src_Erase+1
@_4             dec     YLocation
                ldx     YLoc
                lda     YTableL,x
                sta     DstHGR
                lda     YTableH,x
                ora     PageNum
                sta     DstHGR+1
                ldx     #$00
                lda     XLocDiv7
                clc
                adc     #$01
                tay
                lda     (SrcP,x)
                eor     (DstHGR),y
                sta     (DstHGR),y
                clc
                inc     SrcP
                bne     @_5
                inc     SrcP+1
@_5             dey
                lda     (SrcP,x)
                eor     (DstHGR),y
                sta     (DstHGR),y
                clc
                inc     SrcP
                bne     @_6
                inc     SrcP+1
@_6             dec     YLoc
                dec     bltHeight
                beq     @_7
                jmp     @_2

@_7             lda     #$00
                sta     BitBltParm
                rts

s3DrawStorage   lda     #$bc
                sta     YLoc
                sec
                sbc     #30
                sta     Ycount
                lda     #$10
                sta     XLocDiv7
                clc
                adc     #$03
                sta     WidthDiv7
                lda     #>S3Storage4x32
                sta     SrcP+1
                lda     #<S3Storage4x32
                sta     SrcP
                jsr     BitBlt1
                rts

s3TblLowRollerSrc .dd1  $00
                .dd1    $80
                .dd1    $80
                .dd1    $80
                .dd1    $80
                .dd1    $00
s3TblRollerSrcB .dd1    $4c
                .dd1    $56
                .dd1    $66
                .dd1    $76
                .dd1    $86
                .dd1    $96

s3DrawLowRoller ldy     #$05
                sty     timer1
@_1             clc
                lda     #<s3BigRoll
                adc     s3TblLowRollerSrc,y
                sta     SrcP
                lda     #>s3BigRoll
                adc     #$00
                sta     SrcP+1
                lda     #$11
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     s3TblRollerSrcB,y
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #$01
                sta     bltXor
                jsr     BitBlt1
                dec     timer1
                ldy     timer1
                bpl     @_1
                lda     #>s3BigRoll
                sta     s3RollerSrcSave1+1
                sta     s3RollerSrcSave2+1
                lda     #<s3BigRoll
                sta     s3RollerSrcSave1
                sta     s3RollerSrcSave2
                lda     #$00
                sta     s3RollerAnimeFrame
                rts

s3LeftBelt      lda     #$4f
                sta     YLoc
                sec
                sbc     #$08
                sta     Ycount
                lda     #$00
                sta     XLocDiv7
                clc
                adc     #$0b
                sta     WidthDiv7
                lda     #>s3belt
                sta     SrcP+1
                lda     #<s3belt
                sta     SrcP
                jsr     BitBlt1
                rts

tblPurplePipeStyle .dd1 $00               ;2 purple pipe
                .dd1    $00               ;and 1 pipe drop for dump
                .dd1    $20

s2DrawDumpDropper ldy   #$02              ;the lower left dropper
                sty     timer1
@_1             ldy     timer1
                lda     tblXdiv14,y
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$a1
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #>purplePipe      ;s1_stand_sprite
                sta     SrcP+1
                lda     #<purplePipe
                clc
                adc     tblPurplePipeStyle,y ;or 7c20/7c40  block??
                sta     SrcP
                jsr     BitBlt1
                dec     timer1
                bpl     @_1
                rts

s2drawUpperConveyorBelt lda #$04
                sta     XLocDiv7
                lda     #$bc
                sta     YLoc
                jsr     S2drawConveyorBelt
                lda     #$1c
                sta     XLocDiv7
                lda     #$47
                sta     YLoc
                jsr     S2drawConveyorBelt
                lda     #>ConveyorRoll1
                sta     S2_ConveyorRoll1SrcP+1
                sta     S2_ConveyorRoll1Erase
                lda     #<ConveyorRoll1
                sta     S2_ConveyorRoll1SrcP
                sta     S2_SpinRollerEraae
                lda     #>ConveyorRoll2
                sta     S2_SpinRoller8
                sta     S2_ConveyorRoll2Erase+1
                lda     #<ConveyorRoll2
                sta     S2_ConveyorRoll2SrcP
                sta     S2_ConveyorRoll2Erase
                rts

S2drawConveyorBelt lda  XLocDiv7
                clc
                adc     #$07
                sta     WidthDiv7
                lda     YLoc
                sec
                sbc     #$16
                sta     Ycount
                lda     #>ConveyorBelt
                sta     SrcP+1
                lda     #<ConveyorBelt
                sta     SrcP
                jsr     BitBlt1
                rts

s2drawDumpPot   lda     #$0c
                sta     XLocDiv7
                clc
                adc     #$03
                sta     WidthDiv7
                lda     #$bc
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #>s2pot
                sta     SrcP+1
                lda     #<s2pot
                sta     SrcP
                jsr     BitBlt1
                rts

PutPresser      lda     S2PressVar4
                sta     YLoc
                sta     S2Pv8
                sta     S2PressV5
                sec
                sbc     #$10
                sta     Ycount
                lda     S2Presser_XByte
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$7c
                sta     SrcP+1
                lda     #$a0
                sta     SrcP
                lda     #$01
                sta     bltXor
                jsr     bltXor            ;draw the Presser 
                lda     #$00
                sta     OrByte
                lda     S2Presser_XByte+3
                sta     YLoc
                lda     S2Presser_XByte+1
                sta     XLocDiv7
                jsr     drawRod           ;drawPressRodLeft
                lda     S2Presser_XByte+3
                sta     YLoc
                lda     S2Presser_XByte+2
                sta     XLocDiv7
                jsr     drawRod           ;drawPressRodRight
                rts

s2InitMovingPlatform lda #$a8
                sta     S2LiftYpos
                sta     S2LiftYbackup
                sec
                sbc     #$08
                sta     S2LiftY
                lda     #$00
                sta     S2LiftDirection
                lda     #$0e
                sta     timer1
                lda     #$03
                sta     indexVar
@_1             ldy     indexVar
                lda     timer1
                sta     XLocDiv7
                sta     XLocation
                lda     S2LiftYpos
                sta     YLoc
                lda     S2LiftYbackup
                sta     YLocation
                lda     #$e0
                clc
                adc     tblS2LiftShape,y
                sta     SrcP
                lda     #$7f
                adc     #$00
                sta     SrcP+1
                lda     #$8b
                sta     Src_Erase+1
                lda     #$00
                sta     Src_Erase
                jsr     BltBytes
                inc     timer1
                inc     timer1
                dec     indexVar
                bpl     @_1
                lda     #$00
                sta     drawGroundLineVar
                sta     OrByte
                lda     #$1b
                sta     Yline
                sta     Ything2
                lda     #$70
                sta     StartLineByte
                lda     #$7b
                sta     EndLineByte
                jsr     drawGroundLine
                lda     #$1b
                sta     Yline
                lda     #$7c
                sta     StartLineByte
                sta     EndLineByte
                lda     #$a0
                sta     Ything2
                jsr     drawGroundLine
                rts

s2UpperLeftBeam lda     #$2f
                sta     YLoc
                sec
                sbc     #$08
                sta     Ycount
                lda     #$0c
                sta     XLocDiv7
                clc
                adc     #$0b
                sta     WidthDiv7
                lda     #>railType1
                sta     SrcP+1
                lda     #<railType1
                sta     SrcP
                jsr     BitBlt1
                lda     #$27
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #$0e
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #>S2Crane1        ;draw the crane that pull the string of lift
                sta     SrcP+1
                lda     #<S2Crane1
                sta     SrcP
                jsr     BitBlt1
                lda     #$2f
                sta     YLoc
                sec
                sbc     #$08
                sta     Ycount
                lda     #$11
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$01
                sta     bltStore
                jsr     BitBlt1
                lda     #$2f
                sta     YLoc
                sec
                sbc     #$08
                sta     Ycount
                lda     #$0c
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #>greenCrossBeamLeft
                sta     SrcP+1
                lda     #<greenCrossBeamLeft
                sta     SrcP
                jsr     BitBlt1
                lda     #$4f
                sta     YLoc
                lda     #$00
                sta     XLocDiv7
                jsr     drawLeftPlatform
                rts

s2DrawIncinerator lda   #$38
                sta     YLoc
                sec
                sbc     #$08
                sta     Ycount
                lda     #$26
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #>greenCrossBeamLeft ;draw the rail that stove sit on
                sta     SrcP+1
                lda     #<greenCrossBeamLeft
                sta     SrcP
                jsr     BitBlt1
                lda     #$2f
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #$26
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #>s2Incinerator
                sta     SrcP+1
                lda     #<s2Incinerator
                sta     SrcP
                jsr     BitBlt1           ;end here
                lda     #$64
                sta     ProtectionPtr2
                lda     #$08
                sta     ProtectionPtr2+1
                lda     #$07
                jsr     checksum1         ;protection checking
                cmp     #$56
                beq     @_1
                rts

@_1             jmp     $c600

tblEnmXPos      .dd1    $ce
                .dd1    $1e
                .dd1    $1e
                .dd1    $ce
                .dd1    $ce
                .dd1    $1e
                .dd1    $1e
                .dd1    $ce
                .dd1    $9a
                .dd1    $9a
                .dd1    $1e
                .dd1    $ce
tblEnmYPos      .dd1    $a7
                .dd1    $a7
                .dd1    $87
                .dd1    $87
                .dd1    $67
                .dd1    $67
                .dd1    $47
                .dd1    $47
                .dd1    $47
                .dd1    $27
                .dd1    $27
                .dd1    $27
                .dd1    $74
                .dd1    $ec
                .dd1    $ec
                .dd1    $bc
                .dd1    $bc
                .dd1    $86
TblS2UpRailX    .dd1    $5c
                .dd1    $5c
                .dd1    $5c
                .dd1    $5c
                .dd1    $5b
                .dd1    $5a
                .dd1    $58
                .dd1    $55
                .dd1    $53
                .dd1    $51
                .dd1    $4f
                .dd1    $4d
                .dd1    $4b
                .dd1    $49
                .dd1    $47
                .dd1    $45
                .dd1    $43
                .dd1    $41
                .dd1    $3f
                .dd1    $3d
                .dd1    $3b
                .dd1    $39
                .dd1    $37
                .dd1    $35
                .dd1    $33
                .dd1    $31
                .dd1    $2f
                .dd1    $2d
                .dd1    $2b
                .dd1    $29
                .dd1    $27
                .dd1    $25
                .dd1    $23
                .dd1    $21
                .dd1    $1f
                .dd1    $1d
TblS2UpRailY    .dd1    $b4
                .dd1    $b2
                .dd1    $b0
                .dd1    $ae
                .dd1    $ac
                .dd1    $aa
                .dd1    $a8
                .dd1    $a6
                .dd1    $a6
                .dd1    $a6
                .dd1    $a6
                .dd1    $a7
                .dd1    $a7
                .dd1    $a8
                .dd1    $a9
                .dd1    $a9
                .dd1    $aa
                .dd1    $ab
                .dd1    $ab
                .dd1    $ac
                .dd1    $ad
                .dd1    $ad
                .dd1    $ae
                .dd1    $af
                .dd1    $af
                .dd1    $b0
                .dd1    $b1
                .dd1    $b1
                .dd1    $b2
                .dd1    $b3
                .dd1    $b3
                .dd1    $b4
                .dd1    $b5
                .dd1    $b5
                .dd1    $b6
                .dd1    $b6
tbls3AnimeHBeltMapped .dd1 $2b
                .dd1    $2f
                .dd1    $33
                .dd1    $37
                .dd1    $3b
                .dd1    $3f
                .dd1    $43
                .dd1    $47
                .dd1    $4b
                .dd1    $4f
                .dd1    $53
                .dd1    $57
                .dd1    $5b
                .dd1    $5f
                .dd1    $63
                .dd1    $67
                .dd1    $6b
                .dd1    $6d
                .dd1    $6b
                .dd1    $69
                .dd1    $65
                .dd1    $61
                .dd1    $5d
                .dd1    $59
                .dd1    $55
                .dd1    $51
                .dd1    $4d
                .dd1    $49
                .dd1    $45
                .dd1    $41
                .dd1    $3d
                .dd1    $3b
                .dd1    $37
                .dd1    $33
                .dd1    $2f
                .dd1    $2b
                .dd1    $27
                .dd1    $23
                .dd1    $1f
                .dd1    $1d
                .dd1    $1d
                .dd1    $1f
                .dd1    $23
                .dd1    $27
Tbls3AnimeHBeltYloc .dd1 $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
                .dd1    $4e
                .dd1    $4b
                .dd1    $49
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $48
                .dd1    $49
                .dd1    $4c
                .dd1    $4f
                .dd1    $4f
                .dd1    $4f
tblHammerX      .dd1    $50
                .dd1    $7c
                .dd1    $7c
                .dd1    $d0
                .dd1    $28
                .dd1    $28
                .dd1    $46
                .dd1    $46
                .dd1    $5e
                .dd1    $5e
                .dd1    $ce
                .dd1    $ce
                .dd1    $28
                .dd1    $28
                .dd1    $c4
                .dd1    $c4
                .dd1    $88
                .dd1    $88
                .dd1    $50
tblHammerY      .dd1    $a7
                .dd1    $a7
                .dd1    $87
                .dd1    $87
                .dd1    $87
                .dd1    $67
                .dd1    $67
                .dd1    $47
                .dd1    $47
                .dd1    $27
                .dd1    $27
                .dd1    $47
                .dd1    $47
                .dd1    $67
                .dd1    $67
                .dd1    $87
                .dd1    $87
                .dd1    $a7
                .dd1    $a7
tblS3BeltXLocDiv7 .dd1  $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $85
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
                .dd1    $78
tblS3BeltYLoc   .dd1    $8f
                .dd1    $8d
                .dd1    $8b
                .dd1    $89
                .dd1    $87
                .dd1    $85
                .dd1    $83
                .dd1    $81
                .dd1    $7f
                .dd1    $7d
                .dd1    $7b
                .dd1    $79
                .dd1    $77
                .dd1    $75
                .dd1    $73
                .dd1    $71
                .dd1    $6f
                .dd1    $6d
                .dd1    $6b
                .dd1    $69
                .dd1    $67
                .dd1    $65
                .dd1    $63
                .dd1    $61
                .dd1    $5f
                .dd1    $5d
                .dd1    $5b
                .dd1    $59
                .dd1    $57
                .dd1    $55
                .dd1    $53
                .dd1    $51
                .dd1    $4f
                .dd1    $4d
                .dd1    $4b
                .dd1    $49
                .dd1    $47
                .dd1    $45
                .dd1    $43
                .dd1    $41
                .dd1    $3f
                .dd1    $3f
                .dd1    $41
                .dd1    $43
                .dd1    $45
                .dd1    $47
                .dd1    $49
                .dd1    $4b
                .dd1    $4d
                .dd1    $4f
                .dd1    $51
                .dd1    $53
                .dd1    $55
                .dd1    $57
                .dd1    $59
                .dd1    $5b
                .dd1    $5d
                .dd1    $5f
                .dd1    $61
                .dd1    $63
                .dd1    $65
                .dd1    $67
                .dd1    $69
                .dd1    $6b
                .dd1    $6d
                .dd1    $6f
                .dd1    $71
                .dd1    $73
                .dd1    $75
                .dd1    $77
                .dd1    $79
                .dd1    $7b
                .dd1    $7d
                .dd1    $7f
                .dd1    $81
                .dd1    $83
                .dd1    $85
                .dd1    $87
                .dd1    $89
                .dd1    $8b
                .dd1    $8d
                .dd1    $8f
                .dd1    $00
                .dd1    $36
                .dd1    $36
                .dd1    $44
                .dd1    $00
                .dd1    $50
                .dd1    $50
                .dd1    $87
                .dd1    $87
                .dd1    $67
                .dd1    $67
                .dd1    $67
                .dd1    $67
                .dd1    $67
                .dd1    $b8
                .dd1    $ec
                .dd1    $ec
                .dd1    $b8
                .dd1    $ec
                .dd1    $d0
                .dd1    $ec
                .dd1    $87
                .dd1    $87
                .dd1    $67
                .dd1    $67
                .dd1    $67
                .dd1    $67
                .dd1    $67

encryptJmp      pla
                sta     protectionXorPtr
                pla
                sta     protectionXorPtr+1
                lda     protectionXorPtr
                clc
                adc     #$03
                tay
                lda     protectionXorPtr+1
                adc     #$00
                pha
                tya
                pha
                lda     protectionXorPtr+1
                ldy     #$03
                eor     (protectionXorPtr),y
                pha
                lda     protectionXorPtr
                dey
                eor     (protectionXorPtr),y
                pha
                rts

tblCmpIdxToEnmXPtr? .dd1 $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
tEUnknpwn       .dd1    $05
                .dd1    $05
                .dd1    $05
                .dd1    $05
TBLIdxToEnmXPtr .dd1    $02
                .dd1    $04
                .dd1    $09
                .dd1    $0a
L4D61           .dd1    $01
                .dd1    $00
                .dd1    $00
                .dd1    $00
TblcmpIdxToEnmXPtr? .dd1 $06
                .dd1    $06
                .dd1    $06
                .dd1    $06
                .dd1    $0b
                .dd1    $0b
                .dd1    $0b
                .dd1    $0b
L4D6D           .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
TblEnmXPtr      .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
TblEnmXPtrHi    .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
TblEnmYPtr      .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
TblEnmYPtrHi    .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
TblSignIdxToEnmXPtr .dd1 $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
tmpEnmSrc_minor .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
IdxToEnmXPtr    .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
enmX            .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
enmOldX         .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
enmY            .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
enmOldY         .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
tmpEnmSrc1Hi    .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
tmpEnmSrc2Hi    .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
EnmAnimFrame    .dd1    $00
IdxcmpIdxToEnmXPtr? .dd1 $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
tEX             .dd1    $18
                .dd1    $4d
                .dd1    $26
                .dd1    $4d
                .dd1    $18
                .dd1    $4d
                .dd1    $26
                .dd1    $4d
                .dd1    $90
                .dd1    $4b
                .dd1    $90
                .dd1    $4b
                .dd1    $90
                .dd1    $4b
                .dd1    $90
                .dd1    $4b
Tble_TblEnmXPtr .dd1    $a8
                .dd1    $4b
                .dd1    $a8
                .dd1    $4b
                .dd1    $a8
                .dd1    $4b
                .dd1    $a8
                .dd1    $4b
tEy             .dd1    $1f
                .dd1    $4d
                .dd1    $2d
                .dd1    $4d
                .dd1    $1f
                .dd1    $4d
                .dd1    $2d
                .dd1    $4d
                .dd1    $9c
                .dd1    $4b
                .dd1    $9c
                .dd1    $4b
                .dd1    $9c
                .dd1    $4b
                .dd1    $9c
                .dd1    $4b
Tbl_TblEnmYPtrHi .dd1   $ab
                .dd1    $4b
                .dd1    $ab
                .dd1    $4b
                .dd1    $ab
                .dd1    $4b
                .dd1    $ab
                .dd1    $4b

callShiftBytes  ldy     IdxcmpIdxToEnmXPtr?
@Loop           lda     #$8b
                sta     tmpEnmSrc1Hi,y
                sta     tmpEnmSrc2Hi,y
                jsr     shiftBytes
                and     #$01
                eor     TblSignIdxToEnmXPtr,y
                sta     TblSignIdxToEnmXPtr,y
                eor     tmpEnmSrc_minor,y
                sta     tmpEnmSrc_minor,y
                dey
                bpl     @Loop
                rts

UptEnemies      inc     EnmAnimFrame
                ldy     IdxcmpIdxToEnmXPtr?
                sty     timer1
@loop           lda     enmX,y
                sta     enmOldX,y
                sta     XLocation
                lda     enmY,y
                sta     enmOldY,y
                sta     YLocation
                lda     tmpEnmSrc1Hi,y
                sta     tmpEnmSrc2Hi,y
                sta     Src_Erase+1
                lda     tmpEnmSrc_minor,y
                asl     A
                asl     A
                sta     SrcP+1
                lda     EnmAnimFrame
                and     #$04
                lsr     A
                ora     SrcP+1
                clc
                adc     #$a8
                sta     SrcP+1
                sta     tmpEnmSrc1Hi,y
                jsr     UpdateDrawEachEnemy
                dec     timer1
                ldy     timer1
                bpl     @loop
                rts

UpdateDrawEachEnemy ldx timer1
                lda     TblEnmXPtr,x
                sta     enmXPtr
                lda     TblEnmXPtrHi,x
                sta     enmXPtr+1
                lda     TblEnmYPtr,x
                sta     enmYptr
                lda     TblEnmYPtrHi,x
                sta     enmYptr+1
                lda     IdxToEnmXPtr,x
                tay
                lda     (enmXPtr),y
                cmp     enmX,x            ;is Enm reach X?
                bne     @_1
                jmp     @_3

@_1             bcs     @_2               ;enmy X lower than Pos X?
                dec     enmX,x            ;over, so Enm go left
                dec     enmX,x
                jmp     @_10

@_2             inc     enmX,x            ;need to go right
                inc     enmX,x
                jmp     @_10

@_3             lda     (enmYptr),y
                cmp     enmY,x
                bne     @_4
                jmp     @_6

@_4             bcs     @_5
                dec     enmY,x
                dec     enmY,x
                jmp     @_10

@_5             inc     enmY,x
                inc     enmY,x
                jmp     @_10

@_6             lda     IdxToEnmXPtr,x
                cmp     tblCmpIdxToEnmXPtr?,x
                beq     @_8
                cmp     #$00
                beq     @_9
                lda     TblSignIdxToEnmXPtr,x
                bne     @_7
                dec     IdxToEnmXPtr,x
                jmp     @_10

@_7             inc     IdxToEnmXPtr,x
                jmp     @_10

@_8             lda     #$00
                sta     TblSignIdxToEnmXPtr,x
                dec     IdxToEnmXPtr,x
                jmp     @_10

@_9             lda     #$01
                sta     TblSignIdxToEnmXPtr,x
                inc     IdxToEnmXPtr,x
@_10            lda     enmX,x
                sta     XLocDiv7
                lda     enmY,x
                sta     YLoc
                jsr     XorPreshiftShape
                rts

xpoint1         .dd1    $00
xpoint2         .dd1    $00
PlayerXsave     .dd1    $00
PlayerSaveWhat  .dd1    $00
xpoint5         .dd1    $00
xpoint6         .dd1    $00
xpoint7         .dd1    $00
ypoint          .dd1    $00
S1beamX         .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
LIFE            .dd1    $02
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
PlayerS3AboutToFallVar .dd1 $00

s1_fall_into_Hole lda   isJump
                beq     @_1
                rts

@_1             lda     PlayerX
                cmp     #$db
                bcc     @_2
                rts

@_2             cmp     #$14
                bcs     @_3
                rts

@_3             ldy     s1HoleIndex
                lda     HoleState,y
                beq     @_4
                rts                       ;Hole Filled On that floor

@_4             lda     S1beamX,y         ;test if Player On Hole?
                sta     xpoint6
                inc     xpoint6
                inc     xpoint6
                sec
                sbc     #$05
                sta     xpoint5
                lda     PlayerX
                cmp     xpoint5
                bcs     @_5
                rts

@_5             cmp     xpoint6
                bcc     @_7
                rts

@_7             ldy     s1HoleIndex
                iny
                cpy     #$05
                beq     aboutToFall
@_8             lda     HoleState,y
                beq     @_9
                jmp     @_11

@_9             lda     S1beamX,y
                sta     xpoint2
                inc     xpoint2
                inc     xpoint2
                sec
                sbc     #$05
                sta     xpoint1
                lda     PlayerX
                cmp     xpoint1
                bcs     @_10
                jmp     @_11

@_10            cmp     xpoint2
                bcs     @_11
                iny
                cpy     #$05
                bne     @_8
                jmp     aboutToFall

@_11            lda     tblS1FloorsY,y
                sta     PlayerSaveWhat
                lda     PlayerX
                sta     PlayerXsave
                jmp     aboutToFall_2

testAboutToFall lda     s1HoleIndex
                cmp     YregSave
                bcs     aboutToFall
                lda     liftY?
                sec
                sbc     #$29
                sta     PlayerSaveWhat
                lda     PlayerX
                sta     PlayerXsave
                jmp     aboutToFall_2

aboutToFall     lda     #$bd
                sta     PlayerSaveWhat
                lda     PlayerX
                sta     PlayerXsave
aboutToFall_2   lda     #$a4
                sta     SrcP+1
                lda     PreshiftAddrHi
                sta     Src_Erase+1
@_1             lda     PlayerX
                sta     XLocDiv7
                sta     XLocation
                lda     PlayerY
                sta     YLocation
                ora     #$01
                clc
                adc     #$02
                cmp     PlayerSaveWhat
                beq     @_2
                bcs     @_4
@_2             sta     YLoc
                sta     PlayerY
                jsr     XorPreshiftShape  ;draw fall down to death mack (no collapse)
                lda     #$a4
                sta     SrcP+1
                sta     Src_Erase+1
                lda     LIFE-1
                sec
                sbc     #$02
                cmp     #$30
                bcc     @_3
                sta     LIFE-1
@_3             jsr     MON_WAIT
                jmp     @_1

@_4             lda     PlayerSaveWhat
                sta     PlayerY
                lda     #$a4
                sta     PreshiftAddrHi
                lda     PlayerS3AboutToFallVar
                beq     collapseMack_1
                jmp     setMackDrown

collapseMack_1  lda     PreshiftAddrHi
                sta     Src_Erase+1
                lda     #$bc
                sta     SrcP+1
                jsr     drawCollapseMack
                lda     #$bc
                sta     Src_Erase+1
                lda     #$be
                sta     SrcP+1
                jsr     drawCollapseMack
                jmp     DecLIFE

setMackDrown    lda     #>mackDrown1      ;point to toolbox bitmap
                sta     SrcP+1
                lda     #<mackDrown1
                sta     SrcP
                jsr     drawPlayerDrown
                lda     #>mackDrown2
                sta     SrcP+1
                lda     #<mackDrown2
                sta     SrcP
                jsr     drawPlayerDrown
                lda     lifeRelated
                bne     @_1
                jmp     DecLIFE

@_1             lda     #$8a
                sta     SrcP+1
                lda     #$20
                sta     SrcP
                jsr     drawPlayerDrown
                lda     #$8a
                sta     SrcP+1
                lda     #$40
                sta     SrcP
                jsr     drawPlayerDrown
                lda     #$8a
                sta     SrcP+1
                lda     #$60
                sta     SrcP
                jsr     drawPlayerDrown
                lda     #$30
                jsr     MON_WAIT
                lda     #$8a
                sta     SrcP+1
                lda     #$40
                sta     SrcP
                jsr     drawPlayerDrown
                lda     #$8a
                sta     SrcP+1
                lda     #$20
                sta     SrcP
                jsr     drawPlayerDrown
                jmp     DecLIFE

                .dd1    $60

drawCollapseMack lda    PlayerX
                sta     XLocDiv7
                sta     XLocation
                lda     PlayerY
                sta     YLoc
                sta     YLocation
                jsr     XorPreshiftShape
                lda     #$ff
                jsr     MON_WAIT
                rts

tblXdiv7Draw    .dd1    $04
                .dd1    $1e
                .dd1    $11

drawPlayerDrown ldx     s3PlayerXover7F   ;about to drown on block collector
                lda     tblXdiv7Draw,x
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     PlayerY
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                jsr     BitBlt1
                lda     #$ff
                jsr     MON_WAIT
                rts

DecLIFE         lda     #$01
                sta     isSkipStartMusic
                ldy     #>MusicDeath      ;play DeathMusic
                ldx     #<MusicDeath
                jsr     playMusic
                dec     LIFE
                bmi     @_4
                lda     StagePlay         ;remember Mack stage is re-ordered
                cmp     #$01
                beq     @_1               ;Stage 3 resume
                cmp     #$02
                beq     @_2               ;Stage 1 resume
                cmp     #$03
                beq     @_3               ;Stage 2 resume
                rts

@_1             jsr     viaDecLIFE
                jmp     Stage3Resume

@_2             jsr     via2DecLIFE
                jmp     Stage1Resume

@_3             jsr     via3DecLif
                jmp     Stage2Resume

@_4             lda     #$18
                ldx     #$ec
                jsr     PrintNumChar
                jsr     testHiScore
                lda     #$0c
                sta     timer1
@_5             lda     #$ff
                jsr     MON_WAIT
                dec     timer1
                bpl     @_5
                jmp     Start

s1createHole    ldy     #$01
                sty     timer1
@_1             lda     HoleState,y
                cmp     #$02
                beq     @_2
                lda     tblS1FloorY,y
                sta     YLoc
                sec
                sbc     #$08
                sta     Ycount
                lda     S1beamX,y
                tax
                lda     TBL_div7,x
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$01
                sta     bltStore
                jsr     BitBlt1
@_2             inc     timer1
                ldy     timer1
                cpy     #$05
                bne     @_1
                rts

DrawS1BlockLoop ldy     #$01
                sty     timer1
@_4             lda     S1OpenHoleState,y
                cmp     #$02
                beq     @_5               ;Hole is melded
                lda     tblS1FloorsY,y
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     xArry,y
                tax
                lda     TBL_div7,x
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                clc
                lda     #<s1Block1
                adc     tblS1Block,y      ;2 block at7f20 or 7f40 facing different direction
                sta     SrcP
                lda     #>s1Block1
                adc     #$00
                sta     SrcP+1
                jsr     BitBlt1
@_5             inc     timer1
                ldy     timer1
                cpy     #$05
                bne     @_4
                rts

JackHammerX     .dd1    $00
                .dd1    $00
JackHammerY     .dd1    $00
                .dd1    $00
                .dd1    $00
JackHammerSRC1  .dd1    $00
                .dd1    $00
JackHammerSRC2  .dd1    $00
JackHammerFlag  .dd1    $00
JackHammerPathPoint .dd1 $00

doJackHammer    lda     AirHammerV2
                beq     @_1
                rts

@_1             lda     JackHammerFlag
                bne     @_2
                lda     #$01
                sta     JackHammerFlag
                ldy     #$00
                sty     JackHammerPathPoint
                lda     tblHammerX,y
                sta     JackHammerX
                sta     JackHammerX+1
                lda     tblHammerY,y
                sta     JackHammerY
                sta     JackHammerY+1
                lda     #>BlankShape
                sta     JackHammerSRC2
                lda     #>JackHammerPreshifted
                sta     JackHammerSRC1
@_2             lda     JackHammerX
                sta     XLocDiv7
                lda     JackHammerY
                sta     YLoc
                lda     JackHammerX+1
                sta     XLocation
                lda     JackHammerY+1
                sta     YLocation
                lda     JackHammerSRC1
                sta     SrcP+1
                lda     JackHammerSRC2
                sta     Src_Erase+1
                jsr     XorPreshiftShape
                lda     JackHammerX
                sta     JackHammerX+1
                lda     JackHammerY
                sta     JackHammerY+1
                lda     JackHammerSRC1
                sta     JackHammerSRC2
                lda     gotAirHammer
                bne     @_9
                ldy     JackHammerPathPoint
                lda     tblHammerX,y
                cmp     JackHammerX
                bne     @GoLeft
                jmp     @_5

@GoLeft         bcs     @goRight
                dec     JackHammerX
                dec     JackHammerX
                jmp     @_9

@goRight        inc     JackHammerX
                inc     JackHammerX
                jmp     @_9

@_5             lda     tblHammerY,y
                cmp     JackHammerY
                bne     @_6
                jmp     @_8

@_6             bcs     @_7               ;target point > Eham, go down
                dec     JackHammerY       ;target point < Eham, go up
                dec     JackHammerY
                jmp     @_9

@_7             inc     JackHammerY       ;go down
                inc     JackHammerY
                jmp     @_9

@_8             inc     JackHammerPathPoint ;arrived
                lda     JackHammerPathPoint
                cmp     #$12              ;path end at 12?
                bne     @_9
                lda     #$00              ;yes, reset path
                sta     JackHammerPathPoint
@_9             lda     JackHammerX
                and     #$02
                clc
                adc     #>JackHammerPreshifted
                sta     JackHammerSRC1
                rts

s2ToolboxState  .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
tblS2toolboxXdiv7 .dd1  $04
                .dd1    $0e
                .dd1    $04
                .dd1    $c4
                .dd1    $ee
                .dd1    $9a
tblS2toolboxY   .dd1    $47
                .dd1    $67
                .dd1    $87
                .dd1    $67
                .dd1    $87
                .dd1    $bc
tblS2toolboxXdiv7_2 .dd1 $38
                .dd1    $0e
                .dd1    $04
                .dd1    $e0
                .dd1    $b6
                .dd1    $9a
tblS2toolboxY2  .dd1    $47
                .dd1    $67
                .dd1    $87
                .dd1    $67
                .dd1    $87
                .dd1    $bc
s2ToolboxLocToggle .dd1 $00

s2PlaceToolsbox lda     s2ToolboxLocToggle ;Stage 2 have 2 set of toolbox location
                eor     #$01
                sta     s2ToolboxLocToggle
                bne     @placeLocation2
                lda     #>tblS2toolboxXdiv7 ;init?
                sta     ptrS2toolboxX+1
                lda     #<tblS2toolboxXdiv7
                sta     ptrS2toolboxX
                lda     #>tblS2toolboxY
                sta     ptrS2toolboxY+1
                lda     #<tblS2toolboxY
                sta     ptrS2toolboxY
                jmp     @initState

@placeLocation2 lda     #>tblS2toolboxXdiv7_2
                sta     ptrS2toolboxX+1
                lda     #<tblS2toolboxXdiv7_2
                sta     ptrS2toolboxX
                lda     #>tblS2toolboxY2
                sta     ptrS2toolboxY+1
                lda     #<tblS2toolboxY2
                sta     ptrS2toolboxY
@initState      ldy     #$05              ;loop to draw any toolboxes
                sty     timer1
@loop           ldy     timer1
                lda     s2ToolboxState,y
                beq     @next             ;no toolbox, so skip
                lda     (ptrS2toolboxX),y
                tax
                lda     TBL_div7,x
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     (ptrS2toolboxY),y
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #<Toolbox
                sta     SrcP+1
                lda     #>Toolbox
                sta     SrcP
                jsr     BitBlt1           ;draw toolbox
@next           dec     timer1
                ldy     timer1
                bpl     @loop
                rts

tblS3BoxX       .dd1    $00
                .dd1    $2a
                .dd1    $ee
                .dd1    $2a
                .dd1    $9a
                .dd1    $b6
                .dd1    $87
                .dd1    $47
                .dd1    $87
                .dd1    $67
                .dd1    $27
                .dd1    $67
                .dd1    $46
                .dd1    $2a
                .dd1    $b6
                .dd1    $0e
                .dd1    $62
                .dd1    $ee
tblS3BoxY       .dd1    $87
                .dd1    $47
                .dd1    $87
                .dd1    $67
                .dd1    $27
                .dd1    $67
                .dd1    $00

s3PutPickitem   lda     s3PutPickitem-1
                eor     #$01
                sta     s3PutPickitem-1
                bne     @_1
                lda     #>tblS3BoxX
                sta     ptrBoxX+1
                lda     #<tblS3BoxX
                sta     ptrBoxX
                lda     #>tblS3BoxY
                sta     ptrBoxY+1
                lda     #<tblS3BoxY
                sta     ptrBoxY
                jmp     @_2

@_1             lda     #$52              ;OrangeBlock at 0xb752
                sta     ptrBoxX+1
                lda     #$b7
                sta     ptrBoxX
                lda     #$52              ;bd52 flattenMack?
                sta     ptrBoxY+1
                lda     #$bd
                sta     ptrBoxY
@_2             ldy     S3PickBoxIndex
                sty     timer1
@_3             lda     s3ItemState,y
                beq     @_4
                lda     (ptrBoxX),y
                sta     XLocDiv7
                sta     XLocation
                lda     (ptrBoxY),y
                sta     YLoc
                sta     YLocation
                lda     #>s3boxBitmap
                sta     SrcP+1
                lda     #>BlankShape      ;erase nothing
                sta     Src_Erase+1
                jsr     XorPreshiftShape
@_4             dec     timer1
                ldy     timer1
                bpl     @_3
                rts

segment1        .dd1    $00
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $02
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $0f
Segment2        .dd1    $00
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $02
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $0f
segment3        .dd1    $00
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $02
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $0f
segment4        .dd1    $00
                .dd1    $02
                .dd1    $0f
segment5        .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $02
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $0f
segment6        .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $02
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $0f
segment7        .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $07
                .dd1    $03
                .dd1    $02
                .dd1    $05
                .dd1    $01
                .dd1    $05
                .dd1    $01
                .dd1    $0f
segment8        .dd1    $03
                .dd1    $02
                .dd1    $0f
                .dd1    $00
s3TblBelt       .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
tblS3TestPlayerY .dd1   $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
fourItem        .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
s3BeltIdxDown   .dd1    $00
s3v4            .dd1    $00
s3BeltMoveWaitCounter .dd1 $01
s3TblPickSegment .dd1   $03
                .dd1    $03
                .dd1    $02
                .dd1    $02
                .dd1    $01
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $01
                .dd1    $02
                .dd1    $02
                .dd1    $03
                .dd1    $07
                .dd1    $07
                .dd1    $06
                .dd1    $06
                .dd1    $05
                .dd1    $05
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $05
                .dd1    $06
                .dd1    $06
                .dd1    $07
                .dd1    $07
Tbls3BeltShapeTable .dd2 segment1
                .dd2    Segment2
                .dd2    segment3
                .dd2    segment4
                .dd2    segment5
                .dd2    segment6
                .dd2    segment7
                .dd2    segment8

s3UpDownBelt    dec     s3BeltMoveWaitCounter
                beq     S3MoveTallBelt
                rts

S3MoveTallBelt  lda     #$02
                sta     s3BeltMoveWaitCounter
                lda     #$00
                sta     OrByte
                lda     segment8+3
                bne     @_2
                lda     #$01
                sta     segment8+3
                ldy     #$04
                sty     s3BeltIdxDown
                lda     #$00
                sta     s3v4
@loop           sta     s3TblBelt,y
                clc
                adc     #$10
                sta     s3v4
                lda     s3TblBelt,y
                tax
                lda     tblS3BeltXLocDiv7,x
                sta     XLocDiv7
                lda     tblS3BeltYLoc,x
                sta     YLoc
                lda     s3TblPickSegment,x ;pick what to draw
                asl     A
                tax
                lda     Tbls3BeltShapeTable,x
                sta     SrcP
                inx
                lda     Tbls3BeltShapeTable,x
                sta     SrcP+1
                jsr     drawNail
                lda     s3v4
                dec     s3BeltIdxDown
                ldy     s3BeltIdxDown
                bpl     @loop
                rts

@_2             ldy     #$04
                sty     s3BeltIdxDown
@_3             lda     s3TblBelt,y
                tax
                lda     tblS3BeltXLocDiv7,x
                sta     XLocDiv7
                sta     fourItem,y
                lda     tblS3BeltYLoc,x
                sta     YLoc
                sta     tblS3TestPlayerY,y
                lda     s3TblPickSegment,x
                asl     A
                tax
                lda     Tbls3BeltShapeTable,x
                sta     SrcP
                inx
                lda     Tbls3BeltShapeTable,x
                sta     SrcP+1
                jsr     drawNail
                ldy     s3BeltIdxDown
                jsr     S3drawBeltSegment
                dec     s3BeltIdxDown
                ldy     s3BeltIdxDown
                bpl     @_3
                rts

S3drawBeltSegment clc
                lda     s3TblBelt,y
                adc     #$01
                cmp     #$52
                bne     @_1
                lda     #$00
@_1             sta     s3TblBelt,y
                tax
                lda     tblS3BeltXLocDiv7,x
                sta     XLocDiv7
                lda     tblS3BeltYLoc,x
                sta     YLoc
                lda     s3TblPickSegment,x
                asl     A
                tax
                lda     Tbls3BeltShapeTable,x
                sta     SrcP
                inx
                lda     Tbls3BeltShapeTable,x
                sta     SrcP+1
                jsr     drawNail
                rts

s2TestToolboxTaken ldy  #$05
@_1             lda     s2ToolboxState,y
                beq     @L_2
                lda     (ptrS2toolboxX),y
                sta     cmpX
                lda     (ptrS2toolboxY),y
                sta     cmpYpos
                jsr     HitPlayer1
                lda     HitPlayerFlag
                bne     @_3
@L_2            dey
                bpl     @_1
                rts

@_3             lda     #$00
                sta     s2ToolboxState,y
                ldy     #>PickBoxMusic
                ldx     #<PickBoxMusic
                jsr     InitTune
                lda     cmpX
                tax
                lda     TBL_div7,x
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     cmpYpos
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #<Toolbox
                sta     SrcP+1
                lda     #>Toolbox
                sta     SrcP
                lda     #$01
                sta     bltXor
                jsr     BitBlt1           ;Erase Toolbox
                lda     #$00
                sta     PointsToAdd+2
                lda     #$02
                sta     PointsToAdd+1
                lda     #$05
                sta     PointsToAdd
                jsr     UpdScore
                rts

s3BoxX          .dd1    $00
s3boxY          .dd1    $00
s3boxXsave      .dd1    $00
s3boxYsave      .dd1    $00
                .dd1    $00
s3boxSrc2Hi     .dd1    $00
s3ItemState     .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
isPicked        .dd1    $00
S3PickBoxIndex  .dd1    $00
S3TstPickBoxYSave .dd1  $00

s3TestPickBox   lda     isPicked
                beq     @MackGotNoBox
                rts

@MackGotNoBox   ldy     S3PickBoxIndex
@loop           lda     s3ItemState,y     ;check boxes one by one
                cmp     #1                ;1 means box still on rail
                bne     @next             ;already gone
                lda     (ptrBoxX),y
                sta     cmpX
                lda     (ptrBoxY),y
                sta     cmpYpos
                jsr     HitPlayer1
                lda     HitPlayerFlag
                bne     @_picked          ;yes, picked box
@next           dey                       ;check next
                bpl     @loop             ;not done, loop
                rts

@_picked        lda     #$01
                sta     isPicked
                sty     S3TstPickBoxYSave
                lda     #$02
                sta     s3ItemState,y
                ldy     #>PickBoxMusic
                ldx     #<PickBoxMusic
                jsr     InitTune
                lda     #$02
                sta     PointsToAdd+1
                lda     #$05
                sta     PointsToAdd
                jsr     UpdScore
                lda     cmpX
                sta     XLocDiv7
                sta     XLocation
                lda     cmpYpos
                sta     YLoc
                sta     YLocation
                lda     #>BlankShape      ;point to blank bitmap
                sta     Src_Erase+1       ;so we can erase an empty last position
                sta     s3boxSrc2Hi
                lda     #>s3boxBitmap
                sta     SrcP+1
                jsr     XorPreshiftShape  ;erase the box from rail
s3TestPickBox2  lda     s3BoxX
                sta     s3boxXsave
                lda     s3boxY
                sta     s3boxYsave
                lda     PlayerY
                sec
                sbc     #5
                sta     s3boxY            ;box on Player hand
                lda     PlayerX
                cmp     #16
                bcs     updateBoxHeldPosition
                jmp     @_BoxFaceRight    ;player is already at left most, box at player right

updateBoxHeldPosition lda s3BoxFaceDirection?
                cmp     #$03
                beq     @boxFaceLeft
                jmp     @_BoxFaceRight

@_BoxFaceRight  lda     PlayerX           ;player facing right
                clc
                adc     #14               ;box go further right than player
                sta     s3BoxX
                jmp     @exit             ;why not return here?

@boxFaceLeft    lda     PlayerX           ;player face left
                sec
                sbc     #14
                sta     s3BoxX            ;s3 box on left side of player
@exit           rts

s3TestDropMaterial lda  isPicked          ;do we have material for making nail?
                bne     @_1
                rts

@_1             jsr     s3TestPickBox2
                lda     s3boxXsave
                sta     XLocation
                lda     s3BoxX
                sta     XLocDiv7
                lda     s3boxYsave
                sta     YLocation
                lda     s3boxY
                sta     YLoc
                lda     s3boxSrc2Hi
                sta     Src_Erase+1
                lda     #>s3boxBitmap
                sta     SrcP+1
                jsr     XorPreshiftShape
                lda     #>s3boxBitmap
                sta     s3boxSrc2Hi
                rts

s1Xdiv7Sav      .dd1    $00
s1YLocSav       .dd1    $00
s1XlocSav       .dd1    $00
s1Ysav          .dd1    $00
S1OpenHoleState .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00

S1checkPickedBlock lda  isPicked
                beq     @_1
                rts

@_1             ldy     #$04
@loop           lda     S1OpenHoleState,y ;get rail hole status
                bne     @next
                lda     xArry,y           ;Hole is open on the rail
                sta     cmpX
                lda     tblS1FloorsY,y
                sta     cmpYpos
                jsr     HitPlayer1
                lda     HitPlayerFlag
                bne     @_3
@next           dey
                bne     @loop
                rts

@_3             lda     #$01
                sta     isPicked
                sta     S1OpenHoleState,y ;state 1, hole filled, but not meld
                tya
                sta     tblDropBlock
                ldx     cmpX
                lda     TBL_div7,x
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     cmpYpos
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                clc
                lda     #<s1Block1
                adc     tblS1Block,y
                sta     SrcP
                lda     #>s1Block1
                sta     SrcP+1
                lda     #$01
                sta     bltXor
                jsr     BitBlt1
                lda     #$8b
                sta     S1checkPickedBlock-1
                lda     #$01
                sta     PointsToAdd+1
                jsr     UpdScore
                ldy     #>PickBoxMusic
                ldx     #<PickBoxMusic
                jsr     InitTune
S1checkPickedBlock2 lda s1Xdiv7Sav
                sta     s1XlocSav
                lda     s1YLocSav
                sta     s1Ysav
                lda     PlayerY
                sec
                sbc     #$05
                sta     s1YLocSav
                lda     PlayerX
                cmp     #240
                bcs     @PlayerXover239
                cmp     #16
                bcc     @PlayerXlessThan16
                lda     s3BoxFaceDirection?
                cmp     #$01
                beq     @PlayerXlessThan16
                jmp     @PlayerXover239

@PlayerXlessThan16 lda  PlayerX
                clc
                adc     #$0e
                sta     s1Xdiv7Sav
                jmp     @exit

@PlayerXover239 lda     PlayerX
                sec
                sbc     #$0e
                sta     s1Xdiv7Sav
@exit           rts

s1DrawHoldIngBlock lda  s1HoldWhat?
                beq     @_1
                rts

@_1             lda     isPicked
                bne     @_2
                rts

@_2             lda     gotAirHammer
                beq     @_3
                rts

@_3             jsr     S1checkPickedBlock2
                lda     s1XlocSav
                sta     XLocation
                lda     s1Xdiv7Sav
                sta     XLocDiv7
                lda     s1Ysav
                sta     YLocation
                lda     s1YLocSav
                sta     YLoc
                lda     S1checkPickedBlock-1
                sta     Src_Erase+1
                lda     #$b6
                sta     SrcP+1
                jsr     XorPreshiftShape
                lda     #$b6
                sta     S1checkPickedBlock-1
                rts

                .junk   248
tblBONUSXX      .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $01
                .dd1    $00
                .dd1    $00
unknorR         .dd1    $00
vFlagCountBon   .dd1    $00
vDoneFlag       .dd1    $00
vSmall          .dd1    $00
tblBonus        .dd1    $05
                .dd1    $04
Bonus           .dd1    $00               ;5 digit in reverse. e.g 00050  is Bonus 05000
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
BonusHPos       .dd1    $0a               ;Bonus Horizontal Position in reverse, from 200A back to 2006
                .dd1    $09
                .dd1    $08
                .dd1    $07
                .dd1    $06
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $30
counter1        .dd1    $30

BonusUpdatePrint dec    counter1
                beq     @_1               ;ready to subtract
                jmp     @_6               ;nope

@_1             lda     counter1-1
                sta     counter1
@_2             ldx     #$00
                sec
@_3             lda     Bonus,x           ;subtract bonus
                sbc     PointsToAdd,x
                bpl     @_4
                clc
                lda     #$09
@_4             sta     Bonus,x
                php
                inx
                cpx     #$04
                beq     @_5
                plp
                jmp     @_3

@_5             plp
@_6             lda     #$00
                sta     PointsToAdd
                sta     PointsToAdd+1
                sta     PointsToAdd+2
                sta     PointsToAdd+3
                sta     PointsToAdd4
                sta     PointsToAdd4+1
                jsr     PrintBonus
                jsr     BonusCompare
                rts

PrintBonus      ldx     #$04
                stx     timer1
@_1             lda     BonusHPos,x
                sta     ChrLoc
                lda     Bonus,x
                ora     #$30
                sta     outChar
                lda     #>ChrLoc
                ldx     #<ChrLoc
                jsr     PrintNumChar
                dec     timer1
                ldx     timer1
                bpl     @_1
                rts

ChrLoc          .dd1    $00               ;X Y location of Char to print
                .dd1    $00
outChar         .dd1    $30
                .dd1    $00

BonusCompare    ldx     #$04
@_1             lda     Bonus,x
                clc
                adc     unknorR
                sta     unknorR
                dex
                bpl     @_1
                lda     unknorR
                beq     @_6
                lda     #$00
                sta     unknorR
                ldx     #$04
@_2             lda     tblBONUSXX,x
                cmp     Bonus,x
                bcc     @_3
                bne     @_4
                dex
                bpl     @_2
@_3             rts

@_4             lda     vSmall
                beq     @_5
                rts

@_5             ldy     #>bonusTune
                ldx     #<bonusTune
                jsr     InitTune
                lda     #$01
                sta     vSmall
                jsr     InitTune
                rts

@_6             lda     vDoneFlag
                bne     @_7
                jmp     DecLIFE

@_7             lda     #$01
                sta     vFlagCountBon
                rts

EndBonusPlayMusic lda   vFlagCountBon
                beq     @_1
                rts

@_1             lda     #$01
                sta     PointsToAdd+2
                jsr     @_2
                jsr     tstAddLIFE
                lda     #$01
                sta     PointsToAdd+2
                jsr     UpdScore
                lda     #$80
                jsr     MON_WAIT
                ldy     #$74              ;bonus beep
                ldx     #$cc
                jsr     playMusic
                jmp     EndBonusPlayMusic

gotAirHammer    .dd1    $00
HoleState       .dd1    $00               ;1 blocked 2 Hammered
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
tblDropBlock    .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00

TestS1DropBlock lda     gotAirHammer
                beq     @_1
                rts

@_1             lda     isPicked
                bne     @_2               ;if 1 picked?
                rts

@_2             ldy     #$04
@_3             sty     timer1
                lda     HoleState,y
                bne     @_4
                lda     s1Xdiv7Sav
                cmp     S1beamX,y
                beq     @_5
@_4             dey
                bne     @_3
                rts

@_5             lda     tblS1FloorsY,y
                cmp     PlayerY
                beq     @_6               ;yes, at drop point
                jmp     @_4

@_6             lda     #$00              ;drop the block
                sta     isPicked
                lda     #$01
                sta     HoleState,y       ;mark hole state as filled
                lda     tblDropBlock
                sta     tblDropBlock+1,y
                lda     #>BlankShape
                sta     Src_Erase+1
                lda     #$b6
                sta     SrcP+1
                lda     s1Xdiv7Sav
                sta     XLocDiv7
                sta     XLocation
                lda     s1YLocSav
                sta     YLoc
                sta     YLocation
                jsr     XorPreshiftShape
                ldy     timer1
                lda     S1beamX,y
                tax
                lda     TBL_div7,x
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     tblS1FloorY,y
                sta     YLoc
                sec
                sbc     #$08
                sta     Ycount
                lda     #<s1FilledOrangeBox
                sta     SrcP
                lda     #>s1FilledOrangeBox
                sta     SrcP+1
                jsr     BitBlt1
                lda     #$02
                sta     PointsToAdd+1
                lda     #$05
                sta     PointsToAdd
                jsr     UpdScore
                ldy     #>DropBlockTune
                ldx     #<DropBlockTune
                jsr     InitTune
                rts

tblS1Welding    .dd1    $00
                .dd1    $00
                .dd1    $40
                .dd1    $00
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $00
                .dd1    $20
                .dd1    $20
                .dd1    $00
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $00
                .dd1    $60

S1TstWelding    lda     gotAirHammer
                bne     @_1
                rts

@_1             ldy     #$04
@_2             lda     HoleState,y
                beq     @_4
                cmp     #$02
                beq     @_4
                lda     S1beamX,y
                cmp     JackHammerX
                bcc     @_3
                jmp     @_4

@_3             clc
                adc     #$0e
                cmp     JackHammerX
                bcs     @_5
@_4             dey
                bne     @_2
                rts

@_5             lda     tblS1FloorsY,y
                cmp     PlayerY
                bne     @_4
                lda     #$02
                sta     HoleState,y
                lda     tblDropBlock+1,y
                tax
                lda     #$02
                sta     S1OpenHoleState,x
                lda     tblS1FloorY,y
                sta     YLoc
                sec
                sbc     #$08
                sta     Ycount
                lda     S1beamX,y
                tax
                lda     TBL_div7,x
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     XLocDiv7
                lsr     A
                tax
                clc
                lda     #<S1CrossBeam2
                adc     tblS1Welding,x
                sta     SrcP
                lda     #>S1CrossBeam2
                adc     #$00
                sta     SrcP+1
                jsr     BitBlt1
                lda     #$05
                sta     PointsToAdd+1
                jsr     UpdScore
                ldy     #>WeldingTune
                ldx     #<WeldingTune
                jsr     InitTune
                rts

Xarry2          .dd1    $00
                .dd1    $31
                .dd1    $00
                .dd1    $d2

s2CheckRIghtPressor lda PlayerY
                sec
                sbc     #$10
                sta     timer1
                ldy     StagePlay         ;stage 1 is 2, stage 2 is 3, stage 3 is 1
                lda     Xarry2,y
                sec
                sbc     #$08
                cmp     PlayerX
                bcc     @_1
                rts

@_1             clc
                adc     #$10
                cmp     PlayerX
                bcs     @_2
                rts

@_2             lda     S2PressV5
                sec
                sbc     #$08
                cmp     timer1
                bcc     @_3
                rts

@_3             lda     S2PressV5
                cmp     timer1
                bcs     @_4
                rts

@_4             lda     S2PressVar3
                bne     @_5
                jsr     s2updPresser
                jsr     doSound
                jmp     @_4

@_5             jmp     collapseMack_1

isHitEletric    lda     PlayerY
                cmp     #$48
                bcc     @_1
                rts

@_1             cmp     #$28
                bcs     @_2
                rts

@_2             lda     PlayerX
                cmp     #$07
                bcc     @_3
                rts

@_3             lda     #$8b
                sta     Src_Erase+1
                lda     PreshiftAddrHi
                sta     SrcP+1
                lda     PlayerX
                sta     XLocDiv7
                sta     XLocation
                lda     PlayerY
                sta     YLoc
                sta     YLocation
                jsr     XorPreshiftShape
                lda     #$86
                sta     s2fireMackShape+1
                lda     #$20
                sta     s2fireMackShape
                lda     #$8b
                sta     s2fireMackErase+1
                lda     #$00
                sta     s2fireMackErase
                lda     #$01
                sta     S2savXloc
                lda     #$3c
                sta     timer1
@_4             jsr     s2drawMackOnFire
                lda     #$20
                jsr     MON_WAIT
                jsr     checkCtrlKey
                dec     timer1
                bpl     @_4
                jmp     DecLIFE

s2HitUpperRoller lda    #194
                sta     cmpX
                lda     #71
                sta     cmpYpos
                jsr     HitPlayer1
                lda     HitPlayerFlag
                bne     @_1
                rts

@_1             jmp     collapseMack_1

                .dd1    $a9
                .dd1    $c2
                .dd1    $8d
                .dd1    $15
                .dd1    $6b
                .dd1    $a9
                .dd1    $43
                .dd1    $8d
                .dd1    $16
                .dd1    $6b
                .dd1    $20
                .dd1    $17
                .dd1    $6b
                .dd1    $ad
                .dd1    $14
                .dd1    $6b
                .dd1    $d0
                .dd1    $01
                .dd1    $60
                .dd1    $4c
                .dd1    $e5
                .dd1    $4f

s2_hitLeftBlock lda     #$2a
                sta     cmpX
                lda     #$67
                sta     cmpYpos
                jsr     HitPlayer1
                lda     HitPlayerFlag
                bne     @_1
                rts

@_1             jmp     doDeathType

s2CheckLowerLeftClapper ldy #$00
                lda     tblClamper2,y
                cmp     PlayerX
                bcs     @_1
                jmp     @_2

@_1             sec
                sbc     #$10
                cmp     PlayerX
                bcc     @_4
@_2             ldy     #$01
                lda     tblClamper2,y
                clc
                adc     #$04
                cmp     PlayerX
                bcs     @_3
                rts

@_3             sec
                sbc     #$10
                cmp     PlayerX
                bcc     @_4
                rts

@_4             lda     #$84
                cmp     PlayerY
                bcc     @_5
                rts

@_5             lda     #$87
                cmp     PlayerY
                bcs     @_6
                rts

@_6             jmp     doDeathType

s2_HitTNT       lda     #$b6
                sta     cmpX
                lda     #$bc
                sta     cmpYpos
                jsr     HitPlayer1
                lda     HitPlayerFlag
                bne     @_1
                rts

@_1             jmp     doDeathType

s2_Hitdump      ldx     #$01              ;check twp lower left dump that run up on rail
@_1             lda     tbls2dumpX,x
                sta     cmpX
                lda     tbls2dumpY,x
                sta     cmpYpos
                jsr     HitPlayer1
                lda     HitPlayerFlag
                bne     @_2
                dex
                bpl     @_1
                rts

@_2             jmp     collapseMack_1

collideNail     lda     isPlayerOver219
                beq     @_1
                rts

@_1             lda     PlayerX
                cmp     rivetX
                bcc     @_2
                rts

@_2             clc
                adc     #$0e
                cmp     rivetX
                bcs     @_3               ;check NailY
                rts

@_3             lda     PlayerY
                cmp     rivetY
                bcs     @_4
                rts

@_4             sec
                sbc     #$0e
                cmp     rivetY
                bcc     @_5
                rts

@_5             jmp     doDeathType

AirHammerV2     .dd1    $00

tstEhammer      lda     AirHammerV2
                beq     @_1
                rts

@_1             lda     gotAirHammer
                bne     @_4
                lda     isPicked
                beq     @_2
                rts

@_2             lda     JackHammerX
                sta     cmpX
                lda     JackHammerY
                sta     cmpYpos
                jsr     HitPlayer1
                lda     HitPlayerFlag
                bne     @_3
                rts

@_3             lda     #$01
                sta     gotAirHammer
                sta     isPicked
@_4             lda     PlayerY
                sta     JackHammerY
                lda     PlayerX
                cmp     #$10
                bcc     @_6
                cmp     #$f0
                bcs     @_5
                lda     s3BoxFaceDirection?
                cmp     #$03
                beq     @_5
                jmp     @_6

@_5             lda     PlayerX
                sec
                sbc     #$0e
                sta     JackHammerX
                rts

@_6             lda     PlayerX
                clc
                adc     #$0e
                sta     JackHammerX
                rts

Eham            lda     StagePlay         ;stage 1 is 2
                cmp     #$02
                beq     @OnStage1
                lda     #$00
                sta     ZeroIfStandStill
                rts

@OnStage1       lda     s1AirHamVar
                beq     @_2
                rts

@_2             sta     KBDSTRB
                lda     gotAirHammer
                bne     @_3
                rts

@_3             lda     #$00
                sta     gotAirHammer
                sta     isPicked
                sta     JackHammerPathPoint
                tay
                lda     tblHammerX,y
                sta     JackHammerX
                lda     tblHammerY,y
                sta     JackHammerY
                rts

tstEnm          lda     EnmCount
                beq     isHitEnm
                rts

isHitEnm        ldy     IdxcmpIdxToEnmXPtr?
@_getEnemyLoc   lda     enmX,y
                sta     cmpX
                lda     enmY,y
                sta     cmpYpos
                jsr     cmpPlayr          ;compare with enemy, st1 brick
                lda     HitPlayerFlag
                bne     @HitEnemy
                dey
                bpl     @_getEnemyLoc
                rts

@HitEnemy       jmp     doDeathType

spinMackWait    .dd1    $00
SpinningMackType .dd1   $00
TblMackSpinning .dd2    macStandRightSprite
                .dd2    mackStandLeftSprite
                .dd2    mackFrontSprite

doDeathType     lda     isJump            ;slow motion (WAIT) or spin Mack?
                beq     spinningMackToDeath
                jsr     KeyIsSpace
                lda     #$a0
                jsr     MON_WAIT
                jmp     doDeathType

spinningMackToDeath ldy #$14
                sty     timer1
@_1             jsr     updateSpinningMack
                jsr     getSpinMack
                jsr     drawSpinMack
                lda     #$50
                jsr     MON_WAIT
                dec     timer1
                bpl     @_1
                jmp     collapseMack_1

updateSpinningMack lda  spinMackWait
                bne     _SpinType
                dec     SpinningMackType
                lda     SpinningMackType
                bpl     LeaveUpdSpinningMack
                lda     #$01
                sta     spinMackWait
                lda     #$00
                sta     SpinningMackType
                rts

_SpinType       inc     SpinningMackType
                lda     SpinningMackType
                cmp     #$03
                bne     LeaveUpdSpinningMack
                lda     #$00
                sta     spinMackWait
                lda     #$02
                sta     SpinningMackType
                rts

getSpinMack     lda     SpinningMackType
                asl     A
                tay
                lda     TblMackSpinning,y
                sta     AddrNotUsed?
                iny
                lda     TblMackSpinning,y
                sta     AddrHi
                rts

LeaveUpdSpinningMack rts

drawSpinMack    lda     PlayerX
                sta     XLocDiv7
                sta     XLocation
                lda     PlayerY
                sta     YLoc
                sta     YLocation
                lda     PreshiftAddrHi
                sta     Src_Erase+1
                lda     AddrHi
                sta     SrcP+1
                jsr     XorPreshiftShape
                lda     AddrHi
                sta     PreshiftAddrHi
                jsr     checkCtrlKey
                rts

CheckBTN        lda     BUTN1
                bpl     @_1
                jmp     Eham              ;Button1 pressed, release EHam?

@_1             lda     BUTN0
                bpl     @_2
                jmp     KeyIsSpace        ;Button0 Pressed

@_2             lda     XRegSave1
                beq     @_3
                lda     #$00
                sta     ZeroIfStandStill
                rts

@_3             jsr     chkPDLx_1
                lda     Joy_State
                cmp     #$00
                bne     @_4
                jmp     KeyIsA            ;0, so go up

@_4             cmp     #$01
                bne     @_5
                jmp     KeyIsRight        ;1, go right

@_5             cmp     #$02
                bne     @_6
                jmp     KeyIsLeft         ;2, go left

@_6             cmp     #$03
                bne     @_7
                jmp     KeyIsZ            ;3, go down

@_7             lda     #$00
                sta     ZeroIfStandStill
                rts

chkPDLx_1       lda     #$00
                sta     Joy_State
                lda     pdlX
                cmp     #$46
                bcc     doubleChkPDL      ;Paddle X Left
                cmp     #$b4
                bcs     doubleChkPDL      ;Pdl X Right
                lda     pdlY
                cmp     #$46
                bcc     doubleChkPDL      ;Pdl Y UP
                cmp     #$b4
                bcs     doubleChkPDL      ;PDL Y Down
                lda     #$ff
                sta     Joy_State
                rts

doubleChkPDL    lda     pdlX
                cmp     pdlY
                bcc     PDL_State0        ;PDL X < PDL Y
                jmp     PDLXoverPDLY

PDL_State0      lda     #$02
                ora     Joy_State
                sta     Joy_State
PDLXoverPDLY    lda     #$ff
                sec
                sbc     pdlX
                cmp     pdlY
                bcc     PDL_State1
                beq     PDL_State1
                jmp     PDL_State2

PDL_State1      lda     #$01
                ora     Joy_State
                sta     Joy_State
PDL_State2      rts

                .junk   16
Joy_State       .dd1    $00
                .dd1    $00
SNDPtrSav       .dd1    $00
SNDskipSetup    .dd1    $00
readOnce        .dd1    $04
SNDPtrToX       .dd1    $00
                .dd1    $00
SNDskipTo3      .dd1    $00

InitTune        lda     SNDskipSetup
                bne     @no_init
                lda     SndPtr
                sta     SNDPtrSav
                lda     SndPtr+1
                sta     SNDskipSetup
@no_init        stx     SndPtr
                sty     SndPtr+1
                lda     #$00
                sta     SNDskip?
                rts

snd1            lda     SNDskipSetup
                beq     @_1
                lda     SNDPtrSav
                sta     SndPtr
                lda     SNDskipSetup
                sta     SndPtr+1
                lda     #$00
                sta     SNDskip?
                sta     SNDskipSetup
                rts

@_1             lda     SNDPtrToX
                sta     SndPtr
                lda     SNDPtrToX+1
                sta     SndPtr+1
                lda     #$00
                sta     SNDskip?
                sta     SNDskipSetup
                rts

doSound         lda     isMute
                beq     sound2
                rts

sound2          lda     SNDskip?
                bne     soundLoop4
                ldy     #$00
                lda     (SndPtr),y
                clc
                adc     #$04
                asl     A
                tax
                lda     SNDtbl1,x
                sta     SNDfromTbl
                lda     SNDtbl1+1,x
                sta     SNDfromTbl+1
                asl     SNDfromTbl
                rol     SNDfromTbl+1
                lda     SNDskipTo3
                bne     sound3
                lda     SNDskipSetup
                beq     sound3
                asl     SNDfromTbl
                rol     SNDfromTbl+1
sound3          iny
                lda     (SndPtr),y
                beq     snd1
                sta     SNDskip?
                lda     SndPtr
                clc
                adc     #$02
                sta     SndPtr
                lda     SndPtr+1
                adc     #$00
                sta     SndPtr+1
                lda     #$70
                sta     SNDclickCarry
soundLoop4      lda     SNDfromTbl        ;update Pointer..
                clc
                adc     SND16bit?
                sta     SND16bit?
                lda     SNDfromTbl+1
                adc     SND16bit?+1
                sta     SND16bit?+1
                cmp     SNDclickCarry
                lda     #$00
                rol     A
                tax
                lda     #$00
                sta     SNDClickList,x
                txa
                eor     #$01
                tax
                lda     SNDClickList,x
                bne     @noCLicking
                inc     SNDClickList,x
                bit     SPKR
                jmp     sound6

@noCLicking     bit     KBD
                inc     SNDdummyWasteCycle
                nop
sound6          lda     readOnce
                clc
                adc     SND35
                sta     SND35
                lda     SNDclickCarry
                adc     #$00
                sta     SNDclickCarry
                dec     SND32
                bne     soundLoop4
                lda     #$78
                sta     SND32
                dec     SNDskip?
                rts

SNDtbl1         .dd1    $00
                .dd1    $00
                .dd1    $fa
                .dd1    $00
                .dd1    $c4
                .dd1    $39
                .dd1    $00
                .dd1    $00
                .dd1    $b0
                .dd1    $02
                .dd1    $d9
                .dd1    $02
                .dd1    $04
                .dd1    $03
                .dd1    $32
                .dd1    $03
                .dd1    $63
                .dd1    $03
                .dd1    $96
                .dd1    $03
                .dd1    $cd
                .dd1    $03
                .dd1    $07
                .dd1    $04
                .dd1    $44
                .dd1    $04
                .dd1    $85
                .dd1    $04
                .dd1    $ca
                .dd1    $04
                .dd1    $13
                .dd1    $05
                .dd1    $60
                .dd1    $05
                .dd1    $b2
                .dd1    $05
                .dd1    $09
                .dd1    $06
                .dd1    $64
                .dd1    $06
                .dd1    $c6
                .dd1    $06
                .dd1    $2d
                .dd1    $07
                .dd1    $9a
                .dd1    $07
                .dd1    $0e
                .dd1    $08
                .dd1    $88
                .dd1    $08
                .dd1    $0a
                .dd1    $09
                .dd1    $94
                .dd1    $09
                .dd1    $26
                .dd1    $0a
                .dd1    $c0
                .dd1    $0a
                .dd1    $64
                .dd1    $0b
                .dd1    $11
                .dd1    $0c
                .dd1    $c9
                .dd1    $0c
                .dd1    $8b
                .dd1    $0d
                .dd1    $59
                .dd1    $0e
                .dd1    $34
                .dd1    $0f
                .dd1    $1b
                .dd1    $10
                .dd1    $11
                .dd1    $11
                .dd1    $14
                .dd1    $12
                .dd1    $28
                .dd1    $13
                .dd1    $4b
                .dd1    $14
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
bonusTune       .dd1    $08
                .dd1    $03
                .dd1    $05
                .dd1    $03
                .dd1    $05
                .dd1    $03
                .dd1    $08
                .dd1    $03
                .dd1    $05
                .dd1    $03
                .dd1    $05
                .dd1    $03
                .dd1    $08
                .dd1    $03
                .dd1    $05
                .dd1    $03
                .dd1    $05
                .dd1    $03
                .dd1    $08
                .dd1    $03
                .dd1    $05
                .dd1    $03
                .dd1    $05
                .dd1    $03
                .dd1    $00
                .dd1    $00
                .dd1    $ff
                .dd1    $20
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $01
                .dd1    $02
                .dd1    $03
                .dd1    $02
                .dd1    $05
                .dd1    $02
                .dd1    $08
                .dd1    $06
                .dd1    $05
                .dd1    $04
                .dd1    $00
                .dd1    $00
PresserTune     .dd1    $01
                .dd1    $01
                .dd1    $01
                .dd1    $01
                .dd1    $01
                .dd1    $01
                .dd1    $00
                .dd1    $00
RingTheBellTune .dd1    $0e
                .dd1    $04
                .dd1    $0a
                .dd1    $04
                .dd1    $12
                .dd1    $04
                .dd1    $0e
                .dd1    $04
                .dd1    $00
                .dd1    $00
WeldingTune     .dd1    $0b
                .dd1    $03
                .dd1    $0b
                .dd1    $03
                .dd1    $0b
                .dd1    $03
                .dd1    $00
                .dd1    $00
DropBlockTune   .dd1    $10
                .dd1    $02
                .dd1    $15
                .dd1    $01
                .dd1    $1a
                .dd1    $01
                .dd1    $00
                .dd1    $00

checksum1       tay
                beq     @_2
                lda     #$00
                clc
@_1             rol     A
                eor     (ProtectionPtr2),y
                dey
                bne     @_1
@_2             rol     A
                eor     (ProtectionPtr2),y
                rts

viaDecLIFE      ldy     #$05
@loop           lda     s3ItemState,y
                beq     @next
                lda     #$01
                sta     s3ItemState,y
@next           dey
                bpl     @loop
                jsr     encryptJmp
                sta     L2000+$b04        ;next execute
                rts

via2DecLIFE     ldy     #$04
@loop           lda     S1OpenHoleState,y
                cmp     #$02
                beq     @next
                lda     #$00
                sta     S1OpenHoleState,y
@next           dey
                bpl     @loop
                ldy     #$04
@loop2          lda     HoleState,y
                cmp     #$02
                beq     @next2
                lda     #$00
                sta     HoleState,y
@next2          dey
                bpl     @loop2
                rts

via3DecLif      rts

s3initB         ldy     #$05
                lda     #$01
@loop           sta     s3ItemState,y
                dey
                bpl     @loop
                lda     #$00
                sta     isSkipStartMusic
                rts

s1_InitBlockHole ldy    #$04
@loop           lda     #$00
                sta     HoleState,y
                sta     S1OpenHoleState,y
                dey
                bpl     @loop
                jsr     vias1_InitBlockHole
                jsr     via2s1_InitBlockHole
                lda     #$00
                sta     isSkipStartMusic
                rts

s2_initArray    ldy     #$05
@loop           lda     #$01
                sta     s2ToolboxState,y
                dey
                bpl     @loop
                lda     #$00
                sta     isSkipStartMusic
                rts

s3RailHolePosX  .dd1    24
                .dd1    206
s3LowerRailHoleX .dd1   28
                .dd1    210

s3TestPlayerFallInHole lda PlayerY
                cmp     #135
                beq     @onLowestRail
                rts

@onLowestRail   ldy     s3PlayerXover7F
                lda     s3RailHolePosX,y  ;player x at 24, or 206?
                cmp     PlayerX
                bcc     @_2
                rts

@_2             clc
                adc     #$06
                cmp     PlayerX
                bcs     @_3
                rts

@_3             lda     PlayerX
                sta     PlayerXsave
                lda     #171
                sta     PlayerSaveWhat
                lda     #$01
                sta     PlayerS3AboutToFallVar
                jmp     aboutToFall_2

s3PlayerXover7F .dd1    $00
                .junk   1

s3CheckPlayerX  cmp     #$7f
                bcc     @_1
                lda     #$01
                rts

@_1             lda     #$00
                rts

s3If0TestPlayLeftPlatform .dd1 $00
s3SaveFloorBeltIdx .dd1 $00
Tbls3XlocOnRollerBelt? .dd1 $50
                .dd1    $94
tbl2States3PlayLeftPlatform .dd1 $00
                .dd1    $00
                .dd1    $08
                .dd1    $10
tbl1States3PlayLeftPlatform .dd1 $00
                .dd1    $4f
                .dd1    $47
                .dd1    $3f
AddToIdxS3PlayLeftPlatform .dd1 $00
tbl10Zero40     .dd1    $10
                .dd1    $00
                .dd1    $40
IdxS3PlayLeftPlatform .dd1 $00

********************************************************************************
* Make Mac Float in mid air if disable                                         *
********************************************************************************
s3PlayLeftPlatform lda  s3If0TestPlayLeftPlatform
                beq     @_1
                rts

@_1             ldx     s3PlayerXover7F
                lda     Tbls3XlocOnRollerBelt?,x ;test 0x50 0x94
                cmp     PlayerX
                bcc     @_2
                rts

@_2             clc
                adc     #$0a
                cmp     PlayerX
                bcs     @_3
                rts

@_3             lda     isJump
                beq     @_5
                lda     MackJumpStep
                cmp     #$0f
                beq     @_4
                rts

@_4             jsr     ErazsMack
@_5             ldy     #$03
                lda     PlayerY
@_6             cmp     tblS1FloorsY,y
                beq     @_7
                dey
                bne     @_6
                rts

@_7             sty     s3SaveFloorBeltIdx
                lda     #$01              ;don't skip
                sta     skipTstKeyIf0
                sta     s3If0TestPlayLeftPlatform
                ldy     s3SaveFloorBeltIdx
                lda     s3PlayerXover7F
                bne     @_8
                lda     tbl2States3PlayLeftPlatform,y
                sta     IdxS3PlayLeftPlatform
                lda     #$01
                sta     AddToIdxS3PlayLeftPlatform
                sta     s3BoxFaceDirection?
                rts

@_8             lda     #$ff
                sta     AddToIdxS3PlayLeftPlatform
                lda     tbl1States3PlayLeftPlatform,y
                sta     IdxS3PlayLeftPlatform
                lda     #$03
                sta     s3BoxFaceDirection?
                rts

s3doMackFalling lda     s3If0TestPlayLeftPlatform
                bne     @_1
                rts

@_1             ldy     IdxS3PlayLeftPlatform
                lda     tblS3LeftPlatformX,y
                sta     PlayerX
                lda     tblS3LeftPlatformY,y
                sta     PlayerY
                lda     IdxS3PlayLeftPlatform
                ldy     AddToIdxS3PlayLeftPlatform ;could be 1 or ff
                iny                       ;fix it so we can compare the tbl
                cmp     tbl10Zero40,y
                beq     @MakeMackJump
                clc
                adc     AddToIdxS3PlayLeftPlatform
                sta     IdxS3PlayLeftPlatform
                jsr     mackFallDetermineShape
                jsr     xDrawPlayer
                lda     s3PlayerXover7F
                sta     PadIdx
                jmp     JumpPadAnimation

********************************************************************************
* Case tbl10Zero40 is 10, Mack fall down on Right, jump from right pad to      *
* Left, then jump up to lowest rail, thus force a mid air jump to left         *
*                                                                              *
* Case tbl10Zero40 is 00??                                                     *
* Case tbl10Zero40 is 40, Mack fall down on left, jump from left pad to right, *
* then jump up to lowest rail, thus force a mid air jump to right              *
********************************************************************************
@MakeMackJump   lda     #$00              ;mack can be bounce up from left
                sta     skipTstKeyIf0
                sta     s3If0TestPlayLeftPlatform
                jmp     KeyIsSpace        ;trick way to make Mack do Jumping

                .dd1    $00
tblMackFallPart2Shape .dd1 $a4
                .dd1    $00
                .dd1    $a0
                .dd1    $00
                .dd1    $a2
ShapeTypeMackFallPart2 .dd1 $00

mackFallDetermineShape lda ShapeTypeMackFallPart2
                asl     A
                tay
                lda     tblMackFallPart2Shape,y
                sta     AddrHi
                sta     SrcP+1
                lda     AddToIdxS3PlayLeftPlatform
                cmp     #$01
                bne     @_3
                lda     IdxS3PlayLeftPlatform
                cmp     #$20
                beq     @_2
                cmp     #$33
                beq     @_1
                rts

@_1             lda     #$00
                sta     ShapeTypeMackFallPart2
                rts

@_2             lda     #$01
                sta     ShapeTypeMackFallPart2
                rts

@_3             lda     IdxS3PlayLeftPlatform
                cmp     #48
                beq     @_5
                cmp     #29
                beq     @_4
                rts

@_4             lda     #$00
                sta     ShapeTypeMackFallPart2
                rts

@_5             lda     #$02
                sta     ShapeTypeMackFallPart2
                rts

s3vPlayerBeltVar .dd1   $00

testPlayerXNearBelt lda S2Thing
                beq     @_1
                rts

@_1             lda     S23NonZeroCheck?
                beq     @_2
                rts

@_2             lda     PlayerX
                cmp     #90
                bcs     @_3
                rts

@_3             cmp     #150
                bcc     @playerX90To150
                rts

@playerX90To150 ldx     #$04
@_5             lda     fourItem,x
                jsr     s3CheckPlayerX
                cmp     s3PlayerXover7F
                bne     @_6
                lda     tblS3TestPlayerY,x
                clc
                adc     #$04
                cmp     PlayerY
                bcs     @_7
@_6             dex
                bpl     @_5
                rts

@_7             sec
                sbc     #$08
                cmp     PlayerY
                bcc     @_8
                jmp     @_6

@_8             lda     s3TblBelt,x       ;match belt segment
                sta     s3vPlayerBeltVar
                lda     isJump
                beq     @_9
                jsr     ErazsMack         ;xor old player pos, update to standing new pos
@_9             lda     #$01
                sta     XRegSave1
                sta     S23NonZeroCheck?
                sta     S2Thing
                lda     s3PlayerXover7F
                bne     @_10
                lda     #$03
                sta     s3BoxFaceDirection?
                rts

@_10            lda     #$01
                sta     s3BoxFaceDirection?
                rts

s3StepWhat?     .dd1    $02

s3TstReorientPlayerDirection lda S23NonZeroCheck?
                bne     @_1
                rts

@_1             ldx     s3vPlayerBeltVar
                lda     tblS3BeltXLocDiv7,x
                ldy     s3PlayerXover7F
                bne     @_2
                sec
                sbc     #14
                jmp     @_3

@_2             clc
                adc     #4
@_3             sta     PlayerX
                lda     tblS3BeltYLoc,x
                sec
                sbc     #$01
                sta     PlayerY
                dec     s3StepWhat?
                bne     @_4
                inc     s3vPlayerBeltVar
                lda     #$02
                sta     s3StepWhat?
@_4             lda     s3PlayerXover7F
                bne     @_5
                lda     #$03
                sta     s3BoxFaceDirection?
                jmp     reDrawMackStandLeftSprite

@_5             lda     #$01
                sta     s3BoxFaceDirection?
                jmp     reDrawMacStandRightSprite

s3BOxSavedX     .dd1    $00
                .dd1    $00
s3FallingBoxY   .dd1    $00
s3BOxSavedY     .dd1    $00
Vars3TestDropBox .dd1   $00
var2s3TestDropBox .dd1  $00
s3SavebmpHi     .dd1    $00
YRegSaveS3TestDropBox .dd1 $00

s3TestDropBox   lda     Vars3TestDropBox
                bne     @_4
                lda     isPicked
                bne     @_isHoldingBox
                rts

@_isHoldingBox  lda     PlayerY
                cmp     #135
                beq     @_playerAtLowerRail
                rts

@_playerAtLowerRail ldy s3PlayerXover7F   ;deciding left or right
                lda     s3LowerRailHoleX,y ;at 28 or 210?
                cmp     s3BoxX
                beq     @_3
                rts

@_3             ldy     #$1b
                ldx     #$28
                jsr     InitTune
                lda     #$00
                sta     isPicked
                ldy     S3TstPickBoxYSave
                sty     YRegSaveS3TestDropBox
                lda     #$03
                sta     s3ItemState,y
                lda     #$01
                sta     Vars3TestDropBox
                lda     s3BoxX
                sta     s3BOxSavedX
                lda     s3boxXsave
                sta     s3BOxSavedX+1
                lda     s3boxY
                sta     s3FallingBoxY
                sta     s3BOxSavedY
@_4             lda     s3BOxSavedX
                sta     XLocDiv7
                sta     s3BOxSavedX+1
                lda     s3FallingBoxY
                sta     YLoc
                lda     #>s3boxBitmap     ;remeber what need to erase next time
                sta     s3SavebmpHi
                jsr     xorS3Box
                inc     s3FallingBoxY     ;why not add 4
                inc     s3FallingBoxY
                inc     s3FallingBoxY
                inc     s3FallingBoxY
                lda     s3FallingBoxY
                cmp     #172
                bcs     @over171          ;>= 172
                rts

@over171        lda     #$02              ;box dropped
                sta     PointsToAdd+1
                lda     #$05
                sta     PointsToAdd
                jsr     UpdScore
                lda     s3BOxSavedX
                sta     XLocDiv7
                lda     s3BOxSavedY
                sta     YLoc
                lda     #$8b              ;set to blank
                sta     s3SavebmpHi
                jsr     xorS3Box
                lda     #$00
                sta     Vars3TestDropBox
                ldy     s3PlayerXover7F
                lda     S3TblRivetLeftRight,y
                sta     s3RivetToPotPoint
                ldy     #$05              ;5 frame of Nail to pot animation
                lda     s3PlayerXover7F
                bne     @_7
                lda     tblS3NaiLXloc,y   ;Nail get to left pot
                sta     s3rivetVarX
                sta     XLocDiv7
                lda     tblS3NaiLYloc,y
                sta     s3rivetVarY
                sta     YLoc
                jmp     @_5

@_7             lda     tblS3NaiLXloc2,y  ;Nail get to right pot
                sta     s3rivetVarX
                sta     XLocDiv7
                lda     tblS3NaiLYloc2,y
                sta     s3rivetVarY
                sta     YLoc
                jmp     @_5

xorS3Box        lda     s3BOxSavedY
                sta     YLocation
                lda     s3BOxSavedX+1
                sta     XLocation
                lda     s3SavebmpHi
                sta     Src_Erase+1
                lda     #>s3boxBitmap
                sta     SrcP+1
                jsr     XorPreshiftShape
                lda     s3FallingBoxY
                sta     s3BOxSavedY
                lda     s3BOxSavedX
                sta     s3BOxSavedX+1
                rts

Vs3PlayerOnBelt .dd1    $00
s3PlayerBeltIDX .dd1    $01
                .dd1    $03
                .dd1    $05
                .dd1    $03

s3PlayerOnBelt  lda     isJump
                beq     @_1
                rts

@_1             lda     PlayerY
                cmp     #71
                beq     @_2
                rts

@_2             lda     PlayerX
                cmp     #112
                bcc     @_3
                rts

@_3             lda     ZeroIfStandStill
                bne     @_5
                dec     PlayerX
                dec     PlayerX
                jsr     checkMackFaceDirection
                lda     s3BoxFaceDirection?
                cmp     #$01
                bne     @_4
                jmp     reDrawMacStandRightSprite

@_4             jmp     reDrawMackStandLeftSprite

@_5             lda     s3BoxFaceDirection?
                cmp     #$01
                bne     @_7
                dec     PlayerX
                dec     PlayerX
                lda     Vs3PlayerOnBelt
                cmp     #$04
                bne     @_6
                lda     #$00
                sta     Vs3PlayerOnBelt
@_6             tay
                lda     s3PlayerBeltIDX,y
                tay
                inc     Vs3PlayerOnBelt
                jmp     @_2

@_7             jmp     KeyIsLeft

s3RivetToPotPoint .dd1  $00
S3RivetIdx      .dd1    $00
S3TblRivetLeftRight .bulk 0102
s3rivetVarX     .dd1    $00
s3rivetVarY     .dd1    $00

s3UptRivetToPot lda     s3RivetToPotPoint
                bne     @_1
                rts

@_1             lda     s3rivetVarX
                sta     XLocDiv7
                lda     s3rivetVarY
                sta     YLoc
                jsr     @_5
                lda     s3RivetToPotPoint
                cmp     #$01
                bne     @_2
                ldy     S3RivetIdx
                lda     tblS3NaiLXloc,y
                sta     XLocDiv7
                sta     s3rivetVarX
                lda     tblS3NaiLYloc,y
                sta     YLoc
                sta     s3rivetVarY
                jsr     @_5
                jmp     @_3

@_2             ldy     S3RivetIdx
                lda     tblS3NaiLXloc2,y
                sta     XLocDiv7
                sta     s3rivetVarX
                lda     tblS3NaiLYloc2,y
                sta     YLoc
                sta     s3rivetVarY
                jsr     @_5
@_3             dec     S3RivetIdx
                bmi     @_4
                rts

@_4             ldy     #>DropBlockTune
                ldx     #<DropBlockTune
                jsr     InitTune
                lda     #0
                sta     s3RivetToPotPoint
                lda     #$05
                sta     S3RivetIdx
                lda     s3rivetVarX
                sta     XLocDiv7
                lda     s3rivetVarY
                sta     YLoc
                ldy     YRegSaveS3TestDropBox
                lda     #$00
                sta     s3ItemState,y
                jmp     @_5

@_5             lda     #$15
                sta     SrcP+1
                lda     #$90
                sta     SrcP
                jsr     drawNail
                rts

s1UnusedLIFT    .dd1    $00
vtestPlayerYXat18 .dd1  $00
collpasMackVar  .dd1    $00
s1HoldWhat?     .dd1    $00
isPlayerOver219 .dd1    $00
s1AirHamVar     .dd1    $00

tstLIFT         lda     onLiftFlag
                beq     @_1
                rts

@_1             lda     isJump
                beq     @_2
                rts

@_2             lda     vtestPlayerYXat18
                bne     @_3
                rts

@_3             lda     PlayerX
                cmp     #$14
                bcc     @_4               ;less than #20, LIFT right most..
                lda     #$00
                sta     s1UnusedLIFT
                rts

@_4             lda     YregSave          ;at LIFT X entrance
                cmp     s1HoleIndex
                beq     @_5
                jmp     testAboutToFall

@_5             lda     PlayerX
                cmp     #$10
                bcc     PlayLiftMusic
                rts

PlayLiftMusic   ldy     #>MusicLiftToGO   ;MusicLiftToGO
                ldx     #<MusicLiftToGO
                jsr     playMusic
                lda     #$01
                sta     onLiftFlag
                sta     s1UnusedLIFT
                sta     skipTstKeyIf0
                sta     mackInLiftFlag
                sta     KBDSTRB
                sta     isPlayerOver219
                sta     s1AirHamVar
                lda     #$00
                sta     vtestPlayerYXat18
                lda     isPicked
                bne     @_1
                rts

@_1             lda     gotAirHammer
                beq     @_2               ;player not hold Eham, so it would be block
                lda     #>BlankShape      ;draw EHam
                sta     Src_Erase+1
                lda     JackHammerSRC2
                sta     SrcP+1
                lda     JackHammerX
                sta     XLocDiv7
                sta     XLocation
                lda     JackHammerY
                sta     YLoc
                sta     YLocation
                jsr     XorPreshiftShape
                lda     #>BlankShape
                sta     JackHammerSRC2
                lda     #$01
                sta     AirHammerV2
                rts

@_2             lda     #>BlankShape
                sta     Src_Erase+1
                lda     S1checkPickedBlock-1
                sta     SrcP+1
                lda     s1Xdiv7Sav
                sta     XLocDiv7
                sta     XLocation
                lda     s1YLocSav
                sta     YLoc
                sta     YLocation
                jsr     XorPreshiftShape
                lda     #>BlankShape
                sta     S1checkPickedBlock-1
                lda     #$01
                sta     s1HoldWhat?
                rts

tblCollapseMackSequence .dd1 $00
                .dd1    $20
                .dd1    $40
                .dd1    $20
                .dd1    $00
                .dd1    $20
                .dd1    $40
                .dd1    $20
                .dd1    $00
S1collapseMackIdx .dd1  $00
s1Wait5         .dd1    $00
s1Wait3Frame    .dd1    $01

s1_collpasMack? lda     collpasMackVar
                bne     @_1
                rts

@_1             dec     s1Wait3Frame
                beq     @_2
                rts

@_2             lda     #$03
                sta     s1Wait3Frame
                lda     s1Wait5
                bne     @_3
                lda     #$08
                sta     S1collapseMackIdx
                lda     #$01
                sta     s1Wait5
                ldy     #>collapseMackTune
                ldx     #<collapseMackTune
                jsr     InitTune
@_3             ldy     YregSave
                lda     tblS1FloorsY,y
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     #$01
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                clc
                ldy     S1collapseMackIdx
                lda     #<collapseMack1
                adc     tblCollapseMackSequence,y
                sta     SrcP
                lda     #>collapseMack1   ;mack shape?
                adc     #$00
                sta     SrcP+1
                jsr     BitBlt1
                dec     S1collapseMackIdx
                bmi     @_4
                rts

@_4             lda     #$00
                sta     collpasMackVar
                sta     s1Wait5
                sta     skipTstKeyIf0
                sta     isPlayerOver219
                sta     s1AirHamVar
                lda     #$01
                sta     s1Wait3Frame
                lda     xpoint7
                sta     PlayerX
                sta     PlayerXsav
                lda     ypoint
                sta     PlayerY
                sta     PlayerYSav
                lda     #$a4
                sta     PreshiftAddrHi
                lda     isPicked
                bne     @_5
                rts

@_5             lda     gotAirHammer
                beq     @_6
                lda     #$14
                sta     JackHammerX+1
                lda     PlayerY
                sta     JackHammerY+1
                lda     #$00
                sta     AirHammerV2
                rts

@_6             lda     #$14
                sta     s1XlocSav
                lda     PlayerY
                sta     s1Ysav
                lda     #$00
                sta     s1HoldWhat?
                rts

testPlayerYXat18 lda    PlayerY
                and     #$f0
                clc
                ror     A
                ror     A
                ror     A
                ror     A
                clc
                lsr     A
                tay
                dey
                sty     s1HoleIndex
                lda     PlayerX
                cmp     #$14
                bcc     @_1
                lda     #$01
                sta     vtestPlayerYXat18
@_1             rts

s1MackJumpDirection .dd1 $00
FloorYToReach   .dd1    $00
s1OnjumpPad     .dd1    $00
savedSrcP2      .dd1    $00
                .dd1    $00
savedSrcP1      .dd1    $00
                .dd1    $00
tblS1PadX       .dd1    $0c
                .dd1    $16
                .dd1    $23
PadIdx          .dd1    $00

s1TestJumpPad   lda     s1OnjumpPad
                bne     @_5
                lda     isJump
                beq     @_1
                rts

@_1             lda     PlayerX
                cmp     #219
                bcs     @_2               ;Player left the rail
                rts

@_2             cmp     #238              ;how far is Player over the edge?
                bcs     @reachJumpPad
selfModAboutToFail jmp  aboutToFall

@reachJumpPad   lda     #$01
                sta     skipTstKeyIf0
                sta     s1OnjumpPad
                sta     s1MackJumpDirection ;1 means down
                sta     isPlayerOver219
                lda     #>mackFrontSprite
                sta     SavedMackPadSprite+1
                lda     #<mackFrontSprite
                sta     SavedMackPadSprite
                ldy     s1HoleIndex       ;Level 4 3 2 1 0 which is the roof
                dey                       ;next pos
                bpl     @_4
                ldy     #$04              ;negative? start from the lowest floor
@_4             lda     tblS1FloorsY,y
                sta     FloorYToReach
@_5             lda     s1MackJumpDirection
                beq     @JumpUp           ;jump up if 0
                jsr     doPlayerYDown2    ;Mack falling down
                jsr     TryDown           ;but no acceleration
                jsr     JumpPadAnimation  ;the pad might be pressed down and need drawing
                lda     PlayerY
                cmp     #183
                bne     @exit
                lda     #$00              ;PlayerY reached lower point, set to go up
                sta     s1MackJumpDirection
                rts

@JumpUp         jsr     doPlayerUp2
                jsr     TryUp
                jsr     JumpPadAnimation
                lda     PlayerY
                cmp     FloorYToReach
                bne     @exit
                lda     #$00
                sta     s1OnjumpPad
                sta     skipTstKeyIf0     ;skip game key test when jumping
                sta     isJump
                sta     isPlayerOver219
                lda     #$03
                sta     s3BoxFaceDirection?
                jsr     KeyIsSpace        ;this is tricky, make Mack Jump to rail in mid air!
                lda     #>mackFront2Sprite ;remember what to erase on next draw cycle?
                sta     SavedMackPadSprite+1
                lda     #<mackFront2Sprite
                sta     SavedMackPadSprite
@exit           rts

doPlayerUp2     sec
                lda     PlayerY
                sbc     #2
                sta     PlayerY
                rts

doPlayerYDown2  clc
                lda     PlayerY
                adc     #2
                sta     PlayerY
                rts

JumpPadAnimation lda    PlayerY
                cmp     #175
                beq     @_drawType1
                cmp     #179              ;2 frame later
                beq     @_drawPressedType
                cmp     #183              ;another 2 frame?
                beq     @drawFlatPad
                rts

@_drawType1     lda     #>jumpPadSprite
                sta     SrcP+1
                lda     #<jumpPadSprite
                sta     SrcP
                jmp     @_4

@_drawPressedType lda   #>jumpPadSprite2
                sta     SrcP+1
                lda     #<jumpPadSprite2
                sta     SrcP
                jmp     @_4

@drawFlatPad    ldy     #>padTune
                ldx     #<padTune
                jsr     InitTune
                lda     #>jumpPadSprite3
                sta     SrcP+1
                lda     #<jumpPadSprite3
                sta     SrcP
@_4             lda     SrcP+1
                sta     savedSrcP1+1
                lda     SrcP
                sta     savedSrcP1
                lda     savedSrcP2+1
                sta     Src_Erase+1
                lda     savedSrcP2
                sta     Src_Erase
                ldx     PadIdx
                lda     tblS1PadX,x
                sta     XLocDiv7
                sta     XLocation
                lda     #188
                sta     YLoc
                sta     YLocation
                jsr     BltBytes          ;jumppad animation
                lda     savedSrcP1+1
                sta     savedSrcP2+1
                lda     savedSrcP1
                sta     savedSrcP2
                rts

checkJump       lda     isJump
                bne     @_1
                rts

@_1             lda     PlayerX
                cmp     #219
routine6        bcs     @_3
                lda     #$00
                sta     isPlayerOver219
                rts

@_3             lda     #$01
                sta     isPlayerOver219
                rts

s1TestFixedAllHole ldy  #$04
@_1             lda     HoleState,y
                cmp     #$02              ;state 2 hole is welded?
                bne     @_2
                dey                       ;yes, next
                bne     @_1
                lda     #$01              ;all hole welded
                sta     vDoneFlag
                jsr     EndBonusPlayMusic
                jsr     drawLevelDigit
                jsr     protection_CheckSum
                ldy     #>MusicStage1Done
                ldx     #<MusicStage1Done
                jsr     playMusic
                jmp     St2_1

@_2             rts

S2Thing         .dd1    $00
S23NonZeroCheck? .dd1   $00
s2s3JumpFlag    .dd1    $00
                .dd1    $00

tS2onLift       lda     S2Thing
                beq     @_1
                rts

@_1             lda     S23NonZeroCheck?
                beq     @_2
                rts

@_2             lda     PlayerX
                cmp     #$54
                bcs     @_3               ;>=54
                rts

@_3             cmp     #$9a
                bcc     @_4               ;<9a
                rts

@_4             lda     isJump
                bne     @_5
                rts

@_5             lda     PlayerY
                clc
                adc     #$04
                cmp     S2LiftY
                bcs     @_6
                jmp     @_11

@_6             sec
                sbc     #$06
                cmp     S2LiftY
                bcc     @_7
                jmp     @_11

@_7             lda     PlayerX
                cmp     #$5b
                bcs     @_8
                jmp     @_11

@_8             cmp     #$98
                bcc     @_9
                jmp     @_11

@_9             lda     isJump
                beq     @_10
                jsr     ErazsMack
@_10            lda     #$01
                sta     s2s3JumpFlag
                sta     S2Thing
                sta     S23NonZeroCheck?
                lda     #$00
                sta     S2LiftWait
                sta     XRegSave1
                rts

@_11            lda     #$00
                sta     S23NonZeroCheck?
                rts

testPlayerSomething lda S23NonZeroCheck?
                bne     @_1
                rts

@_1             lda     S2LiftY
                sta     PlayerY
                lda     ZeroIfStandStill
                bne     @_2
                jsr     removeMackOnBelt
@_2             lda     PlayerX
                cmp     #$69
                bcs     @_3
                jmp     s2IsBelRoutine

@_3             cmp     #$85
                bcc     setF1
                jmp     @_1

setF0           lda     #$00
                sta     s2s3JumpFlag
                rts

setF1           lda     #$01
                sta     s2s3JumpFlag
                rts

s2IsBelRoutine  lda     s3BoxFaceDirection?
                cmp     #$03
                beq     setF0
                jmp     setF1

@_1             lda     s3BoxFaceDirection?
                cmp     #$01
                beq     setF0
                jmp     setF1

removeMackOnBelt lda    s3BoxFaceDirection?
                cmp     #$01
                bne     @_1
                jmp     reDrawMacStandRightSprite

@_1             jmp     reDrawMackStandLeftSprite

isMackOnS2Rail? .dd1    $00
S2_RailCountDown .dd1   $00
s2_RailVar      .dd1    $00

s2UpdateMackGoUpRail lda isMackOnS2Rail?
                bne     @_1
                rts

@_1             ldy     S2_RailCountDown
                lda     TblS2UpRailX,y
                sta     PlayerX
                lda     TblS2UpRailY,y
                sec
                sbc     #$02
                sta     PlayerY
                dec     S2_RailCountDown
                bmi     @exit
                jsr     reDrawMacStandRightSprite
                lda     S2_RailCountDown
                cmp     #$0a
                bcs     @_2
                rts

@_2             cmp     #$10
                bcc     @_3
                rts

@_3             lda     #$00
                sta     s2s3JumpFlag
                lda     #$01
                sta     S2LiftWait
                sta     s2s3JumpFlag+1
                rts

@exit           jmp     DecLIFE

tstS2mackMoveOnRail lda s2_RailVar
                beq     @_1
                rts

@_1             lda     MackJumpStep
                cmp     #$0a
                beq     @_2
                rts

@_2             jsr     ErazsMack
                lda     #$01
                sta     isMackOnS2Rail?
                sta     s2_RailVar
                sta     s2s3JumpFlag
                ldy     #$23
                lda     TblS2UpRailX,y
                sta     PlayerX
                lda     TblS2UpRailY,y
                sec
                sbc     #$02
                sta     PlayerY
                sty     S2_RailCountDown
                rts

reDrawMacStandRightSprite lda #$96
                sta     SrcP+1
                sta     AddrHi
                jmp     xDrawPlayer

reDrawMackStandLeftSprite lda #$9c
                sta     SrcP+1
                sta     AddrHi
                jmp     xDrawPlayer

********************************************************************************
* This Jump Test is almost a waste of time until Mack is landed on the floor   *
********************************************************************************
testStage23Jump lda     StagePlay         ;stage 1 is 2, stage 2 is 3, stage 3 is 1
                cmp     #$02
                bne     @NotStage1
                rts

@NotStage1      ldx     #$03
                lda     PlayerY
@loop           cmp     tblS1FloorsY,x
                beq     @matchY
                dex
                bpl     @loop
                lda     PlayerY
                cmp     #187
                bcs     @PlayerYover186
                lda     #24               ;not match, set to 0x18
                sta     YcheckAt15Or24
                rts

@PlayerYover186 lda     #15
                sta     YcheckAt15Or24
                rts

@matchY         lda     PlayerX
                cmp     #80
                bcs     @playerXover79
                jmp     ErazsMack

@playerXover79  cmp     #158
                bcc     @playerXinRange
                jmp     ErazsMack

@playerXinRange lda     PlayerY
                cmp     #39
                beq     @PlayerYis39
                lda     #24
                sta     YcheckAt15Or24
                rts

@PlayerYis39    lda     #15
                sta     YcheckAt15Or24
                rts

TstPlayerYatB0  lda     PlayerY
                cmp     #$b0
                bcs     @_1
                lda     #$01
                sta     fixS2PlayerY
                rts

@_1             lda     #$00
                sta     fixS2PlayerY
                rts

S2TestPlayerY2  lda     isJump
                beq     @_1
                rts

@_1             lda     PlayerY
                cmp     #$b0
                bcc     @_2
                rts

@_2             lda     PlayerX
                cmp     #$52
                bcs     @_3
                rts

@_3             cmp     #$5a
                bcc     @_4
                jmp     @_5

@_4             lda     #$b1
                sta     PlayerSaveWhat
                lda     PlayerX
                sta     PlayerXsave
                jmp     aboutToFall_2

@_5             cmp     #$98
                bcs     @_6
                rts

@_6             cmp     #$9e
                bcc     @_7
                rts

@_7             lda     #$bd
                sta     PlayerSaveWhat
                lda     PlayerX
                sta     PlayerXsave
                jmp     aboutToFall_2

tblYFortstS2Flg .dd1    $27
                .dd1    $47
                .dd1    $67
                .dd1    $87
                .dd1    $bd

tstS2Flg        lda     isJump
                bne     @_1
                rts

@_1             lda     MackJumpStep
                cmp     #$17
                beq     @_2
                rts

@_2             lda     PlayerX
                cmp     #$58
                bcs     @_3
                jmp     @_4

@_3             cmp     #$98
                bcc     @_7
@_4             ldx     #$00
                lda     PlayerY
@_5             cmp     tblYFortstS2Flg,x
                bcc     @_6
                inx
                cpx     #$05
                bne     @_5
@_6             lda     tblYFortstS2Flg,x
                sta     PlayerSaveWhat
                lda     PlayerX
                sta     PlayerXsave
                jmp     aboutToFall_2

@_7             lda     S2LiftY
                cmp     PlayerY
                bcc     @_8
                ora     #$01
                sta     PlayerSaveWhat
                jmp     @_9

@_8             lda     #$bd
                sta     PlayerSaveWhat
@_9             jmp     aboutToFall_2

s2PlayerXbeltShift .dd1 $a6
s2UpdPlyY       .dd1    $77

testS2UpperBelt lda     sdbelt22
                beq     @_1
                rts

@_1             lda     PlayerY
                cmp     #$48              ;on top rail Y?
                bcc     @_2               ;yes, very high already
                rts                       ;nope, exit

@_2             lda     PlayerX
                cmp     #170
                bcs     @_3
                rts

@_3             lda     MackJumpStep
                cmp     #10
                beq     @_4
                rts

@_4             jsr     ErazsMack
                lda     #$01
                sta     s2OnUppeerBelt
                sta     skipTstKeyIf0
                sta     sdbelt22
                ldy     #$23
                lda     TblS2UpRailX,y
                clc
                adc     s2PlayerXbeltShift
                sta     PlayerX
                lda     TblS2UpRailY,y
                sec
                sbc     s2UpdPlyY
                sta     PlayerY
                sty     S2_RailCountDown
                rts

                .dd1    $60
s2OnUppeerBelt  .dd1    $00
sdbelt22        .dd1    $00

TstS2OnBelt2    lda     s2OnUppeerBelt
                bne     @_1
                rts

@_1             ldy     S2_RailCountDown
                lda     TblS2UpRailX,y
                clc
                adc     s2PlayerXbeltShift
                bmi     @_2
                lda     #$fe
@_2             sta     PlayerX
                lda     TblS2UpRailY,y
                sec
                sbc     s2UpdPlyY
                sta     PlayerY
                dec     S2_RailCountDown
                lda     S2_RailCountDown
                cmp     #$05
                beq     @_3
                jmp     reDrawMacStandRightSprite

@_3             lda     #$24
                sta     S2savXloc
                jmp     TstS2OnBelt3

S2MagnetPickMack? lda   s2OnUppeerBelt
                bne     @_1
                rts

@_1             ldy     #$05
@_2             lda     s2ToolboxState,y
                bne     @_3
                dey
                bpl     @_2
                lda     s2MagnetX
                sec
                sbc     #$04
                cmp     PlayerX
                bcc     @_4
@_3             rts

@_4             clc
                adc     #$0e
                cmp     PlayerX
                bcs     @_5
                rts

@_5             lda     S2MagnetY
                clc
                adc     #$1a
                cmp     PlayerY
                bcs     @_6
                rts

@_6             lda     S2MagnetY
                clc
                adc     #$0f
                sta     PlayerY
                ldy     #>DropBlockTune
                ldx     #<DropBlockTune
                jsr     InitTune
@_7             jsr     s2MagnetUpd
                lda     #$00
                sta     ZeroIfStandStill
                jsr     setMackMusic
                jsr     doSound
                jsr     doSound
                lda     s2MagnetX
                sta     PlayerX
                jsr     DrawDownMackFixed
                lda     PlayerX
                cmp     #$8e
                beq     @_8
                lda     #$60
                jsr     MON_WAIT
                jmp     @_7

@_8             lda     #$27
                sta     PlayerY
                lda     #$8e
                sta     PlayerX
                jsr     DrawDownMackFixed
                ldx     #$14
                stx     timer1
@_9             jsr     s2MagnetUpd
                lda     #$80
                jsr     MON_WAIT
                dec     timer1
                bpl     @_9
                lda     #$01
                sta     vDoneFlag
                jsr     EndBonusPlayMusic
                jsr     drawLevelDigit
                jsr     protection_CheckSum
                ldy     #>MusicStage2Done
                ldx     #<MusicStage2Done
                jsr     playMusic
                jsr     Stage3            ;wont return
S2savXloc       brk

TstS2OnBelt3    lda     PreshiftAddrHi
                sta     Src_Erase+1
                lda     #$8b              ;blank area?
                sta     SrcP+1
                lda     #$fa
                sta     XLocDiv7
                sta     XLocation
                lda     #$2f
                sta     YLoc
                sta     YLocation
                jsr     XorPreshiftShape
                lda     #<fireMack1       ;init bitmap address
                sta     s2fireMackShape
                lda     #>fireMack1
                sta     s2fireMackShape+1
                lda     #$8b              ;blank shape
                sta     s2fireMackErase+1
                lda     #$00
                sta     s2fireMackErase
@_1             jsr     s2drawMackOnFire
                lda     #$28
                jsr     MON_WAIT
                inc     PlayerY           ;mack on fire falling down
                lda     PlayerY
                cmp     #$bd
                bne     @_1
                ldx     #$28
                stx     timer1
@_2             jsr     s2drawMackOnFire
                lda     #$14
                jsr     MON_WAIT
                dec     timer1
                bpl     @_2
                jmp     DecLIFE

s2drawMackOnFire lda    S2savXloc
                sta     XLocDiv7
                sta     XLocation
                lda     PlayerY
                sta     YLoc
                lda     PlayerYSav
                sta     YLocation
                lda     s2fireMackErase+1
                sta     Src_Erase+1
                lda     s2fireMackErase
                sta     Src_Erase
                lda     s2fireMackShape+1
                sta     SrcP+1
                lda     s2fireMackShape
                sta     SrcP
                jsr     BltBytes
                lda     s2fireMackShape+1
                sta     s2fireMackErase+1
                lda     s2fireMackShape
                sta     s2fireMackErase
                lda     PlayerY
                sta     PlayerYSav
                jsr     shiftBytes
                and     #$03
                tay
                clc
                lda     #$20
                adc     tblFireMackShapeTable,y ;determine FireMack1 shape to FireMack3
                sta     s2fireMackShape
                lda     #$86
                adc     #$00
                sta     s2fireMackShape+1
                rts

tblBonusSrcP    .dd2    BonusHammer
                .dd2    BonusDrill
                .dd2    BonusHexTool
                .dd2    BonusMixer
tblYThing?      .dd1    $00
                .dd1    $00
                .dd1    $54
                .dd1    $27
                .dd1    $a8
                .dd1    $27
                .dd1    $8c
                .dd1    $bc
@xLoc           .dd1    $00
@_y             .dd1    $00
@SavedSrcP      .dd1    $00
                .dd1    $00
BonusPieceHereIf0 .dd1  $00
StagePlay       .dd1    $00               ;stage 1 is 2, stage 2 is 3, stage 3 is 1

putBonusPiece   lda     StagePlay
                asl     A
                tay
                lda     tblYThing?,y
                sta     @xLoc
                iny
                lda     tblYThing?,y
                sta     @_y
                jsr     shiftBytes        ;like Random
                and     #$03
                asl     A
                tay
                lda     tblBonusSrcP,y    ;get Address of Bonus bitmap
                sta     SrcP
                sta     @SavedSrcP
                iny
                lda     tblBonusSrcP,y
                sta     SrcP+1
                sta     @SavedSrcP+1
                lda     #1
                sta     bltXor
                ldy     @xLoc
                lda     TBL_div7,y
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     @_y
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                jsr     BitBlt1           ;draw S3 Upper Left Hammer Bonus Piece
                rts

getSt1TopGift   lda     BonusPieceHereIf0
                beq     @_1
                rts

@_1             lda     @xLoc
                sta     cmpX
                lda     @_y
                sta     cmpYpos
                jsr     HitPlayer1
                lda     HitPlayerFlag
                bne     @_2
                rts

@_2             ldy     @xLoc
                lda     TBL_div7,y
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     @_y
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     @SavedSrcP
                sta     SrcP
                lda     @SavedSrcP+1
                sta     SrcP+1
                lda     #$01
                sta     bltXor
                sta     BonusPieceHereIf0
                jsr     BitBlt1           ;erase bonus Piece (st1 top tools)
                lda     #$02
                sta     PointsToAdd+2
                jsr     UpdScore
                ldy     #>PickBoxMusic
                ldx     #<PickBoxMusic
                jsr     InitTune
                rts

HitPlayerFlag   .dd1    $00
cmpX            .dd1    $00               ;for Compare X position
cmpYpos         .dd1    $00               ;for Compare Y position

HitPlayer1      lda     cmpX
                sec
                sbc     #$0a              ;?? -10 then add 18??
                cmp     #$f0
                bcc     @_1
                lda     #$00
@_1             cmp     PlayerX
                bcc     @_2
                jmp     NotTouchPlayer

@_2             clc
                adc     #$12
                cmp     PlayerX
                bcs     @_3
                jmp     NotTouchPlayer

@_3             lda     cmpYpos
                sec
                sbc     #$04
                cmp     PlayerY
                bcc     @_4
                jmp     NotTouchPlayer

@_4             clc
                adc     #$08
                cmp     PlayerY
                bcs     @_5
                jmp     NotTouchPlayer

@_5             lda     #$01
                sta     HitPlayerFlag
                rts

NotTouchPlayer  lda     #$00
                sta     HitPlayerFlag
                rts

cmpPlayr        lda     cmpX
                sec
                sbc     #$08
                cmp     #$f4
                bcc     @_1
                lda     #$00
@_1             cmp     PlayerX
                beq     @_2
                bcc     @_2
                jmp     NotTouchPlayer

@_2             clc
                adc     #$10
                cmp     PlayerX
                bcs     @_3
                jmp     NotTouchPlayer

@_3             lda     cmpYpos
                sec
                sbc     #$0c
                cmp     PlayerY
                bcc     @_4
                jmp     NotTouchPlayer

@_4             clc
                adc     #$18
                cmp     PlayerY
                bcs     @_5
                jmp     NotTouchPlayer

@_5             lda     #$01
                sta     HitPlayerFlag
                rts

                .dd1    $02
tblClamper2     .dd1    $00
                .dd1    $00
tblClamperX     .dd1    $00
                .dd1    $00
s2UpdClampervvv .dd1    $1c
                .dd1    $38
                .dd1    $2a
                .dd1    $2a
s2ClamperY      .dd1    $85
                .dd1    $00
                .dd1    $00
s2UpdClamper222 .dd1    $00
s2UpdClamper111 .dd1    $00
s2UpdClamperSrcP .dd1   $ad
                .dd1    $6b
                .dd1    $c5
                .dd1    $6b
                .dd1    $00
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $03
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $03
                .dd1    $02
                .dd1    $02
                .dd1    $04
                .dd1    $04
                .dd1    $03
                .dd1    $04
                .dd1    $07
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $03
                .dd1    $04
                .dd1    $07
                .dd1    $02
                .dd1    $0f
                .dd1    $00
                .dd1    $04
                .dd1    $04
                .dd1    $04
                .dd1    $01
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $01
                .dd1    $02
                .dd1    $02
                .dd1    $04
                .dd1    $04
                .dd1    $01
                .dd1    $04
                .dd1    $05
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $01
                .dd1    $04
                .dd1    $05
                .dd1    $02
                .dd1    $0f

s2UpdClamper    dec     tblClamper2-1
                beq     @_1
                rts

@_1             lda     #$02
                sta     tblClamper2-1
                lda     s2UpdClamper222
                bne     @_2
                lda     #$01
                sta     s2UpdClamper222
                ldy     #$01
                lda     #$38
                sta     tblClamper2,y
                sta     tblClamperX,y
                lda     #$00
                sta     s2ClamperY+1,y
                lda     s2ClamperY
                sta     YLoc
                lda     tblClamper2,y
                sta     XLocDiv7
                jsr     @_9               ;draw the clamp
                ldy     #$00
                lda     #$1c
                sta     tblClamper2,y
                sta     tblClamperX,y
                lda     #$01
                sta     s2ClamperY+1,y
                lda     s2ClamperY
                sta     YLoc
                lda     tblClamper2,y
                sta     XLocDiv7
                jsr     @_9
                rts

@_2             ldy     #$01
                sty     s2UpdClamper111
@_3             lda     tblClamperX,y
                sta     XLocDiv7
                lda     s2ClamperY
                sta     YLoc
                jsr     @_9
                ldy     s2UpdClamper111
                lda     tblClamper2,y
                sta     XLocDiv7
                lda     s2ClamperY
                sta     YLoc
                jsr     @_9
                ldx     s2UpdClamper111
                lda     tblClamper2,x
                sta     tblClamperX,x
                lda     s2ClamperY+1,x
                bne     @_5
                dec     tblClamper2,x
                dec     tblClamper2,x
                jmp     @_6

@_5             inc     tblClamper2,x
                inc     tblClamper2,x
@_6             lda     tblClamper2,x
                cmp     #$2a
                beq     @_7
                cmp     s2UpdClampervvv,x
                bne     @_8
@_7             lda     s2ClamperY+1,x
                eor     #$01
                sta     s2ClamperY+1,x
@_8             dec     s2UpdClamper111
                ldy     s2UpdClamper111
                bpl     @_3
                rts

@_9             tya
                asl     A
                tay
                lda     s2UpdClamperSrcP,y
                sta     SrcP
                iny
                lda     s2UpdClamperSrcP,y
                sta     SrcP+1
                jsr     drawNail
                rts

S2_SpinRollerEraae .dd1 $00
S2_ConveyorRoll1Erase .dd1 $00
S2_ConveyorRoll1SrcP .dd1 $00
                .dd1    $00
S2_ConveyorRoll2Erase .dd1 $00
                .dd1    $00
S2_ConveyorRoll2SrcP .dd1 $00
S2_SpinRoller8  .dd1    $00
tblConveyorRollFrame .dd1 $00
                .dd1    $10
                .dd1    $20
                .dd1    $30
S2_SpinRollerX  .dd1    $04
                .dd1    $1c
S2_ConveyorRoll1X .dd1  $0a
                .dd1    $22
S2_SpinRollerY  .dd1    $bc
                .dd1    $47
S2_ConveyorRollY .dd1   $ac
                .dd1    $37
S2_ConveyorRollFrame .dd1 $00
                .dd1    $03

S2_SpinRollerPoint dec  S2_ConveyorRollFrame+1
                beq     @_1
                rts

@_1             lda     #$02
                sta     S2_ConveyorRollFrame+1
                ldy     #$01
                sty     timer1
@_2             lda     S2_ConveyorRoll1Erase
                sta     Src_Erase+1
                lda     S2_SpinRollerEraae
                sta     Src_Erase
                lda     S2_ConveyorRoll1SrcP+1
                sta     SrcP+1
                lda     S2_ConveyorRoll1SrcP
                sta     SrcP
                lda     S2_SpinRollerX,y
                sta     XLocDiv7
                sta     XLocation
                lda     S2_SpinRollerY,y
                sta     YLoc
                sta     YLocation
                lda     #$01
                sta     BitBltParm        ;** this could be left lower or right upper belt
spinBeltLower   jsr     BltBytes          ;Draw Stage 2 right belt lower roller
                ldy     timer1
                lda     S2_ConveyorRoll2Erase+1
                sta     Src_Erase+1
                lda     S2_ConveyorRoll2Erase
                sta     Src_Erase
                lda     S2_SpinRoller8
                sta     SrcP+1
                lda     S2_ConveyorRoll2SrcP
                sta     SrcP
                lda     S2_ConveyorRoll1X,y
                sta     XLocDiv7
                sta     XLocation
                lda     S2_ConveyorRollY,y
                sta     YLoc
                sta     YLocation
                lda     #$01
                sta     BitBltParm
                jsr     BltBytes          ;Draw stage 2 right Belt upper
                dec     timer1
                ldy     timer1
                bpl     @_2               ;draw more
                lda     S2_ConveyorRoll1SrcP+1
                sta     S2_ConveyorRoll1Erase
                lda     S2_ConveyorRoll1SrcP
                sta     S2_SpinRollerEraae
                lda     S2_SpinRoller8
                sta     S2_ConveyorRoll2Erase+1
                lda     S2_ConveyorRoll2SrcP
                sta     S2_ConveyorRoll2Erase
                inc     S2_ConveyorRollFrame
                lda     S2_ConveyorRollFrame
                cmp     #$04
                bne     @_4
                lda     #$00
                sta     S2_ConveyorRollFrame
@_4             tay
                clc
                lda     #<ConveyorRoll1   ;get address of animation frame
                adc     tblConveyorRollFrame,y
                sta     S2_ConveyorRoll1SrcP
                lda     #>ConveyorRoll1
                adc     #$00
                sta     S2_ConveyorRoll1SrcP+1
                clc
                lda     #<ConveyorRoll2
                adc     tblConveyorRollFrame,y
                sta     S2_ConveyorRoll2SrcP
                lda     #>ConveyorRoll2
                adc     #$00
                sta     S2_SpinRoller8
                rts

s2MagnetX       .dd1    $00
S2MagnetY       .dd1    $00
S2MagnetXold    .dd1    $00
S2MagnetYold    .dd1    $00
                .dd1    $00
s2MagnetSrcEraseHi .dd1 $00
s2MagnetFlag    .dd1    $00
s2MagnetMoveDirection .dd1 $00

s2MagnetUpd     lda     s2MagnetFlag
                bne     @tstBoxState
                lda     #$01
                sta     s2MagnetFlag
                lda     #$96
                sta     s2MagnetX
                sta     S2MagnetXold
                lda     #$17
                sta     S2MagnetY
                sta     S2MagnetYold
                lda     #>BlankShape      ;blank shape
                sta     s2MagnetSrcEraseHi
                lda     #$00              ;move Left
                sta     s2MagnetMoveDirection
                jmp     @updateMagnet

@tstBoxState    ldy     #$05
@LoopTest       lda     s2ToolboxState,y
                bne     ReturnPoint       ;if still have tool box then magnet won't move
                dey
                bpl     @LoopTest         ;test all 5 toolbox
@updateMagnet   lda     S2MagnetXold
                sta     XLocation
                lda     S2MagnetXold+1
                sta     YLocation
                lda     s2MagnetX
                sta     XLocDiv7
                lda     S2MagnetY
                sta     YLoc
                lda     s2MagnetSrcEraseHi
                sta     Src_Erase+1
                lda     #>s2MagnetShape
                sta     SrcP+1
                jsr     XorPreshiftShape
                lda     #>s2MagnetShape
                sta     s2MagnetSrcEraseHi
                lda     s2MagnetX         ;copy current pos, for next xor erase Draw cycle, 
                sta     S2MagnetXold
                lda     S2MagnetY
                sta     S2MagnetYold
                lda     s2MagnetMoveDirection
                bne     GoRightMagnet
                dec     s2MagnetX         ;magnet go left
                dec     s2MagnetX
                lda     s2MagnetX         ;reach left most point?
                cmp     #140
                bne     ReturnPoint       ;Nope, exit
                lda     #$01              ;go right after reached 140
                sta     s2MagnetMoveDirection
ReturnPoint     rts

GoRightMagnet   inc     s2MagnetX         ;go right
                inc     s2MagnetX
                lda     s2MagnetX
                cmp     #240
                bne     ReturnPoint       ;exit if not reaching 240
                lda     #$00              ;reverse direction go left
                sta     s2MagnetMoveDirection
                rts

flagLiftInitAnother1 .dd1 $00
liftFlagInit14  .dd1    $00
liftFlagInit0   .dd1    $00
bellShapeIdx    .dd1    $00
bellSpriteSav   .dd1    $00
                .dd1    $00
S1BellSpriteSav .dd1    $00
                .dd1    $00
tblBellStyle    .dd1    $00
                .dd1    $20
                .dd1    $40
S1BellStartX    .dd1    $38
                .dd1    $08
S1BellYPos1     .dd1    $12
MackHeadYpos    .dd1    $00
                .dd1    $00

TestS1Bell      lda     flagLiftInitAnother1
                beq     @_1
                jmp     ActivateLift?

@_1             lda     PlayerY
                sec
                sbc     #$10
                sta     MackHeadYpos
                lda     S1BellStartX
                sec
                sbc     #$04
                cmp     PlayerX
                bcc     @_2
                rts

@_2             clc
                adc     #$08
                cmp     PlayerX
                bcs     @XinRange
                rts

@XinRange       lda     S1BellYPos1       ;0x12
                sec
                sbc     #$04              ;Mach's head within +/- 4 of Bell
                cmp     MackHeadYpos
                bcc     @finalCheckTouchBell
                rts

@finalCheckTouchBell clc
                adc     #$08
                cmp     MackHeadYpos
                bcs     HitSt1Bell
                rts

HitSt1Bell      lda     #$01
                sta     PointsToAdd+1
                jsr     UpdScore
                lda     #$14
                sta     liftFlagInit14
                lda     #$00
                sta     liftFlagInit0
                lda     #$01
                sta     flagLiftInitAnother1
                sta     bellShapeIdx
                lda     #>S1BellSprite
                sta     S1BellSpriteSav+1
                lda     #<S1BellSprite
                sta     S1BellSpriteSav
                lda     #>S1Bell3Sprite
                sta     bellSpriteSav+1
                lda     #<S1Bell3Sprite
                sta     bellSpriteSav
                ldx     #<RingTheBellTune
                ldy     #>RingTheBellTune
                jsr     InitTune
                rts

ActivateLift?   lda     S1BellStartX+1
                sta     XLocDiv7
                sta     XLocation
                lda     S1BellYPos1
                sta     YLoc
                sta     YLocation
                lda     S1BellSpriteSav+1
                sta     Src_Erase+1
                lda     S1BellSpriteSav
                sta     Src_Erase
                lda     bellSpriteSav+1
                sta     SrcP+1
                lda     bellSpriteSav
                sta     SrcP
                jsr     BltBytes          ;draw the bell
                lda     bellSpriteSav+1
                sta     S1BellSpriteSav+1
                lda     bellSpriteSav
                sta     S1BellSpriteSav
                lda     liftFlagInit0
                bne     @_2
                dec     bellShapeIdx
                lda     bellShapeIdx
                bne     @_1
                lda     #$01
                sta     liftFlagInit0
@_1             jmp     @_3

@_2             inc     bellShapeIdx
                lda     bellShapeIdx
                cmp     #$02
                bne     @_3
                lda     #$00
                sta     liftFlagInit0
@_3             dec     liftFlagInit14
                bpl     @_4
                lda     #$00
                sta     flagLiftInitAnother1
                jsr     FlipOnLiftFlag
@_4             ldy     bellShapeIdx
                lda     #<S1Bell3Sprite
                clc
                adc     tblBellStyle,y    ;get correct bell shape address (diff in low byte)
                sta     bellSpriteSav
                lda     #>S1Bell3Sprite
                adc     #$00
                sta     bellSpriteSav+1
                rts

TbLInPointDiv7  .dd1    4
                .dd1    30
s3Cnt6ef1       .dd1    $15

s3AnimeINpoint  dec     s3Cnt6ef1
                beq     @_1
                rts

@_1             lda     #$28
                sta     s3Cnt6ef1
                ldy     #$01              ;two IN Arrow to draw
                sty     timer1
@_2             lda     #$ab
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                lda     TbLInPointDiv7,y  ;Byte 4 and Byte 30
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #>InArrowSprite
                sta     SrcP+1
                lda     #<InArrowSprite
                sta     SrcP
                lda     #$01
                sta     bltXor
                jsr     BitBlt1
                dec     timer1
                ldy     timer1
                bpl     @_2
                rts

                .junk   211
drawLevVlVar    .dd1    $03
                .dd1    $00

drawLevelDigit  inc     drawLevVlVar
                lda     drawLevVlVar
                cmp     #$0a
                bcc     @_1
                lda     #$00
                sta     drawLevVlVar
                inc     drawLevVlVar+1
                lda     drawLevVlVar+1
                cmp     #$0a
                bcc     drawLevelTenthDigit
                lda     #$00
                sta     drawLevVlVar+1
drawLevelTenthDigit lda #$26
                sta     XLocDiv7
                lda     #$70
                sta     YLoc
                ldy     drawLevVlVar+1
                jsr     @_2
@_1             lda     #$27
                sta     XLocDiv7
                lda     #$70
                sta     YLoc
                ldy     drawLevVlVar
@_2             tya
                ora     #$30
                sta     TenthDigitYChar
                lda     XLocDiv7
                sta     TenthDigitX
                lda     YLoc
                sta     TenthDigitY
                lda     #$70
                ldx     #$50
                jmp     PrintNumChar

TenthDigitX     .dd1    $00
TenthDigitY     .dd1    $00
TenthDigitYChar .dd1    $30
                .dd1    $00

IndirectDrawTitle jsr   HGRdo
                lda     #$19
                ldx     #$16
                jsr     PrintNumChar
                jsr     drawHardHatMackLogp
                lda     #$00              ;green type
                sta     RailTypeIdx
                lda     #$90
                sta     YLoc
                lda     #$04
                sta     XLocDiv7
                jsr     drawRightPlatform
                lda     #$90
                sta     YLoc
                lda     #$0e
                sta     XLocDiv7
                jsr     drawLeftPlatform
                lda     #$18
                sta     XLocDiv7
                lda     #$90
                sta     YLoc
                jsr     drawLeftPlatform
                ldx     #$8a
                ldy     #$88
                lda     #$94
                jsr     L1A3F
                ldx     #$28
                ldy     #$88
                lda     #$a8
                jsr     L1A3F
                ldx     #$e8
                ldy     #$88
                lda     #$ac
                jsr     L1A3F
                jsr     drawEAlogo
                jsr     TitleWait?
                jsr     encryptJmp
                sta     junk0400+154
                rts

drawHardHatMackLogp lda #$07
                sta     XLocDiv7          ;StartXdiv7
                clc
                adc     #25               ;26 byte x 21 height
                sta     WidthDiv7
                lda     #$20
                sta     YLoc              ;start Y from bottom
                sec
                sbc     #20
                sta     Ycount
                lda     #>LogoHardHat
                sta     SrcP+1
                lda     #<LogoHardHat
                sta     SrcP
                jsr     BitBlt1
                rts

s3CheckCompleted ldy    #$05
@Loop           lda     s3ItemState,y
                bne     @exit
                dey
                bpl     @Loop
                lda     s3RivetToPotPoint
                beq     @_2
                rts

@_2             lda     #$01
                sta     vDoneFlag
                sta     generalCounter
                jsr     EndBonusPlayMusic
                jsr     protection_CheckSum
                ldy     #>MusicStage3Done
                ldx     #<MusicStage3Done
                jsr     playMusic
                jsr     drawLevelDigit
                jmp     St1_1

@exit           rts

Tbls3OffTallBelt .dd1   $68
                .dd1    $64
                .dd1    $60
                .dd1    $5c
                .dd1    $58
                .dd1    $56
                .dd1    $56
                .dd1    $56
                .dd1    $56
                .dd1    $56
                .dd1    $56
                .dd1    $56
                .dd1    $58
                .dd1    $5c
                .dd1    $62
                .dd1    $68
                .dd1    $70
                .dd1    $78
s3OffTallBelt2  .dd1    $8f
                .dd1    $93
                .dd1    $98
                .dd1    $9f
                .dd1    $a6
                .dd1    $ac
                .dd1    $af
                .dd1    $b3
                .dd1    $b7
                .dd1    $b3
                .dd1    $af
                .dd1    $ac
                .dd1    $a6
                .dd1    $a3
                .dd1    $9f
                .dd1    $9d
                .dd1    $9d
                .dd1    $9f
s3OffTallBelt3  .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $01
                .dd1    $01
                .dd1    $01
                .dd1    $01
                .dd1    $01
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $02
                .dd1    $01
s3TblDrown      .dd2    macJumpLeftSprite ;macJumpLeftSprite pointer
                .dd2    mackFrontSprite   ;-- mackFrontSprite
                .dd2    macJumpRightSprite ;--macJumpRightSprite

s3OffTallBelt   lda     s3vPlayerBeltVar
                cmp     #$51
                bcs     @_1
                rts

@_1             ldy     #$00              ;FALL OFF RAIL AND DROWN IN MIDDLE POOL
                sty     timer1
@_2             lda     Tbls3OffTallBelt,y
                sta     PlayerX
                lda     s3OffTallBelt2,y
                sta     PlayerY
                lda     s3OffTallBelt3,y
                asl     A
                tay
                iny
                lda     s3TblDrown,y
                sta     SrcP+1
                sta     AddrHi
                jsr     xDrawPlayer
                lda     s3PlayerXover7F
                sta     PadIdx
                jsr     JumpPadAnimation
                lda     #$90
                jsr     MON_WAIT
                inc     timer1
                ldy     timer1
                cpy     #$12
                bne     @_2
                lda     #$02
                sta     s3PlayerXover7F
                lda     #$01
                sta     lifeRelated
                jmp     setMackDrown

isGaveBonusLife .dd1    $00

tstAddLIFE      lda     isGaveBonusLife
                beq     @_1
                rts

@_1             lda     Score+3
                cmp     #$07
                beq     @_2
                rts

@_2             lda     #$01              ;Yes, already gave bonus
                sta     isGaveBonusLife
                inc     LIFE
                jmp     PrtLIFE

protection_CheckSum lda #$03
                sta     timer1
@_1             lda     #$ff
                jsr     MON_WAIT
                dec     timer1
                bpl     @_1
                lda     #$7b
                sta     ProtectionPtr2
                lda     #$4b
                sta     ProtectionPtr2+1
                lda     #$0f
                jsr     checksum1
                cmp     #$ac
                beq     @_2
                rts

@_2             jmp     $c600

                .junk   31

Wait3           lda     #$03
                sta     timer1
wait3_2         lda     #$ff
                jsr     MON_WAIT
                dec     timer1
                bpl     wait3_2
                rts

TitleWait?      lda     #$40
                sta     timer1
Titie_2         lda     #$ff
                jsr     MON_WAIT
                jsr     Key1
                jsr     Key2
                lda     isRestoreMuteSav
                beq     Title_3
                lda     isNoSoundSav
                sta     isMute
                jmp     Start3

Title_3         dec     timer1
                bpl     Titie_2
                rts

isInGameLoop    .dd1    $01
DemoTimer       .dd1    $ff
NextStage       .dd1    $01               ;Title is 1 Stage1 is 2 Stage2 is 3 Stage3 is 4
indStageJump    .dd2    Stage3
                .dd2    IndirectDrawTitle
                .dd2    St1_1
                .dd2    St2_1
TblsetInGameLoop .dd1   $03
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $01
                .dd1    $01
                .dd1    $02
                .dd1    $02
isNoSoundSav    .dd1    $00

setInGameLoop   lda     #$01
                sta     EnmCount
                sta     skipTstKeyIf0
                sta     isInGameLoop      ;Yes, in game Loop
                lda     #$00
                sta     S2LiftWait
                lda     isNoSoundSav
                sta     isMute
                lda     #$ff
                sta     DemoTimer
                inc     NextStage
                lda     NextStage
                cmp     #$04
                bne     @_1
                lda     #$00
                sta     NextStage
@_1             asl     A
                tay
                lda     indStageJump,y
                sta     XLocDiv7Ptr
                lda     indStageJump+1,y
                sta     XLocDiv7Ptr+1
                lda     TblsetInGameLoop,y
                sta     drawLevVlVar
                jmp     (XLocDiv7Ptr)

checkStart      lda     isInGameLoop
                bne     @_1
                rts

@_1             dec     DemoTimer
                beq     @_3
                lda     #1
                sta     skipTstKeyIf0
                lda     #$00
                sta     S2LiftWait
                jsr     Key2              ;check ctrl C
                jsr     Key1
                lda     isRestoreMuteSav
                beq     @_2
                lda     isNoSoundSav
                sta     isMute
                jmp     Start3

@_2             rts

@_3             jmp     Start2

                .dd1    $00
                .dd1    $00
jmpTbl          .dd2    St1_1
                .dd2    St1_1
                .dd2    St2_1
                .dd2    Stage3

tesrKeyStageSelect cmp  #$b2              ;test key 1 2 3 to select stage
                beq     @_1
                cmp     #$b3
                beq     @_1
                cmp     #$b1
                beq     @_1
                rts

@_1             and     #$0f
                asl     A
                tay
                lda     jmpTbl,y
                sta     goStage+1
                lda     jmpTbl+1,y
                sta     goStage+2
                sta     KBDSTRB
                rts

Key2            lda     KBD
                cmp     #$83              ;Control-C ?
                beq     configKeyobard
                rts

configKeyobard  jsr     HGRdo
                lda     #$73
                ldx     #$ba
                jsr     PrintNumChar
                lda     #$73
                ldx     #$cf
                jsr     PrintNumChar
                lda     #$00
                sta     isKeyLEFT+1
                sta     isKeyRIght+1
                sta     isKeyA+1
                sta     isSpace+1
                sta     isKeyZ+1
                sta     checkReturnKey+1
                lda     #$73
                ldx     #$e0
                jsr     PrintNumChar
                jsr     getAkey
                sta     isKeyLEFT+1
                lda     #$73
                ldx     #$e9
                jsr     PrintNumChar
                jsr     getAkey
                sta     isKeyRIght+1
                lda     #$73
                ldx     #$f2
                jsr     PrintNumChar
                jsr     getAkey
                sta     isKeyA+1
                lda     #$73
                ldx     #$fb
                jsr     PrintNumChar
                jsr     getAkey
                sta     isKeyZ+1
                lda     #$74
                ldx     #$04
                jsr     PrintNumChar
                jsr     getAkey
                sta     isSpace+1
                lda     #$74
                ldx     #$0d
                jsr     PrintNumChar
                jsr     getAkey
                sta     checkReturnKey+1
                lda     #$74
                ldx     #$16
                jsr     PrintNumChar
                bit     KBDSTRB
Key3            lda     KBD
                bpl     Key3
                bit     KBDSTRB
                jmp     Start

getAkey         sta     KBDSTRB
Key5            lda     KBD
                bpl     Key5
                and     #$7f
                cmp     #$1b              ;is ESCaple
                beq     spk1
                cmp     #$03              ;is Ctrl-C
                beq     spk1
                cmp     #$0a              ;is Ctrl-J
                beq     spk1
                cmp     #$0b              ;is Ctrl-K
                beq     spk1
                cmp     #$30              ;is Key 0
                beq     spk1
                cmp     #$13              ;is Ctrl-S
                beq     spk1
                cmp     #$12              ;is Ctrl-R
                beq     spk1
                cmp     #$1e              ;is Ctrl-^
                beq     spk1
                cmp     #$1d              ;is Ctrl-]
                beq     spk1
                ora     #$80
                cmp     isKeyLEFT+1       ;is <- Hex 88
                beq     spk1
                cmp     isKeyRIght+1      ;is -> , Hex 95
                beq     spk1
                cmp     isKeyA+1          ;is A, Hex C1
                beq     spk1
                cmp     isKeyZ+1          ;is Z, Hex DA
                beq     spk1
                cmp     isSpace+1         ;is Space, Hex A0
                beq     spk1
                cmp     checkReturnKey+1  ;is Return, Hex 8d
                beq     spk1
                rts

SpkCount        .dd1    $00

spk1            ldx     #$05              ;MakeLazerNoise
                jsr     spk2
                jmp     getAkey

spk2            nop
                stx     SpkCount
spk3            ldx     #$20
spk4            txa
                tay
spk5            dey
                bne     spk5
                bit     SPKR
                inx
                cpx     #$a0
                bne     spk4
                dec     SpkCount
                bne     spk3
                rts

                .dd1    $0b
                .dd1    $00
                .zstr   ↑“CONFIGURATION MENU”
                .dd1    $00
                .dd1    $28
                .zstr   ↑“PRESS KEY FOR ”
                .dd1    $0e
                .dd1    $28
                .zstr   ↑“LEFT :”
                .dd1    $0e
                .dd1    $28
                .zstr   ↑“RIGHT:”
                .dd1    $0e
                .dd1    $28
                .zstr   ↑“UP:   ”
                .dd1    $0e
                .dd1    $28
                .zstr   ↑“DOWN: ”
                .dd1    $0e
                .dd1    $28
                .zstr   ↑“JUMP: ”
                .dd1    $0e
                .dd1    $28
                .zstr   ↑“DROP: ”
                .dd1    $00
                .dd1    $28
                .zstr   ↑“PRESS ANY KEY           ”

Enc7431         lda     #$00
                sta     ProtectionPtr2
                lda     #$05
                sta     ProtectionPtr2+1
                lda     #$ff
                jsr     checksum1
                cmp     #$74
                bne     Reboot1
                lda     #<checksum1       ;Checksum itself
                sta     ProtectionPtr2
                lda     #>checksum1
                sta     ProtectionPtr2+1
                lda     #$0f
                jsr     checksum1
                cmp     #$94
                bne     Reboot1
                rts

Reboot1         jmp     $c600

NoteToPlay      .dd1    $00
playDuration    .dd1    $00
NotePlayPosition .dd1   $00
                .dd1    $c1
                .dd1    $b7
                .dd1    $ac
                .dd1    $a2
                .dd1    $99
                .dd1    $90
                .dd1    $88
                .dd1    $80
                .dd1    $79
                .dd1    $72
                .dd1    $6c
                .dd1    $65
                .dd1    $60
                .dd1    $5a
                .dd1    $56
                .dd1    $50
                .dd1    $4c
                .dd1    $48
                .dd1    $43
                .dd1    $40
                .dd1    $3c
                .dd1    $38
                .dd1    $35
                .dd1    $32
                .dd1    $2f

PlayNote        lda     SPKR
@_1             dey
                bne     @_2
                dec     playDuration
                beq     @_3
@_2             dex
                bne     @_1
                ldx     NoteToPlay
                jmp     PlayNote

@_3             rts

MusicDeath      .dd1    $11
                .dd1    $60
                .dd1    $0c
                .dd1    $30
                .dd1    $0c
                .dd1    $30
                .dd1    $0d
                .dd1    $60
                .dd1    $0f
                .dd1    $60
                .dd1    $11
                .dd1    $60
                .dd1    $0c
                .dd1    $60
                .dd1    $11
                .dd1    $60
                .dd1    $00
MusicStage1Done .dd1    $0d
                .dd1    $60
                .dd1    $08
                .dd1    $30
                .dd1    $08
                .dd1    $30
                .dd1    $05
                .dd1    $60
                .dd1    $06
                .dd1    $30
                .dd1    $06
                .dd1    $30
                .dd1    $08
                .dd1    $60
                .dd1    $08
                .dd1    $60
                .dd1    $01
                .dd1    $b0
                .dd1    $00
                .dd1    $00
MusicStage2Done .dd1    $14
                .dd1    $30
                .dd1    $14
                .dd1    $30
                .dd1    $11
                .dd1    $30
                .dd1    $11
                .dd1    $30
                .dd1    $12
                .dd1    $30
                .dd1    $12
                .dd1    $30
                .dd1    $0f
                .dd1    $30
                .dd1    $0f
                .dd1    $30
                .dd1    $0d
                .dd1    $30
                .dd1    $14
                .dd1    $30
                .dd1    $12
                .dd1    $30
                .dd1    $11
                .dd1    $30
                .dd1    $0f
                .dd1    $30
                .dd1    $11
                .dd1    $30
                .dd1    $0d
                .dd1    $60
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $00
TitleMusic      .dd1    $0d               ;start music , tune, length
                .dd1    $30
                .dd1    $12
                .dd1    $90
                .dd1    $11
                .dd1    $30
                .dd1    $0f
                .dd1    $90
                .dd1    $12
                .dd1    $30
                .dd1    $14
                .dd1    $30
                .dd1    $16
                .dd1    $30
                .dd1    $14
                .dd1    $30
                .dd1    $12
                .dd1    $30
                .dd1    $11
                .dd1    $b0
                .dd1    $00               ;end of start music
MusicStage3Done .dd1    $0d               ;MusicStage3Done
                .dd1    $30
                .dd1    $14
                .dd1    $30
                .dd1    $12
                .dd1    $30
                .dd1    $0f
                .dd1    $30
                .dd1    $11
                .dd1    $30
                .dd1    $0d
                .dd1    $30
                .dd1    $0f
                .dd1    $30
                .dd1    $0c
                .dd1    $30
                .dd1    $0d
                .dd1    $30
                .dd1    $08
                .dd1    $30
                .dd1    $0a
                .dd1    $30
                .dd1    $0c
                .dd1    $30
                .dd1    $0d
                .dd1    $90
                .dd1    $00
MusicLiftToGO   .dd1    $20               ;?
                .dd1    $18
                .dd1    $18
                .dd1    $18
                .dd1    $19
                .dd1    $18
                .dd1    $00

playMusic       lda     isMute
                beq     @_1
                rts

@_1             sty     PointerToMusic+1
                stx     PointerToMusic
                ldy     #$00
                sty     NotePlayPosition
@_2             lda     NotePlayPosition
                asl     A
                tay
                lda     (PointerToMusic),y
                beq     @_3
                tax
                lda     NotePlayPosition+1,x ;get the Note
                sta     NoteToPlay
                iny
                lda     (PointerToMusic),y ;get Note Duration
                sta     playDuration
                inc     NotePlayPosition
                jsr     PlayNote          ;play that Note
                jmp     @_2               ;play next note

@_3             rts

tblFireMackShapeTable .dd1 $00
                .dd1    $20
                .dd1    $40
                .dd1    $20
s2fireMackShape .dd1    $00
                .dd1    $00
s2fireMackErase .dd1    $00
                .dd1    $00
S2IncineratorVar2 .dd1  $00
s2IncineratorCounter .dd1 $01

doS2IncineratorFire dec s2IncineratorCounter
                beq     @_1
                rts

@_1             lda     #$02              ;animation on every 2 frame
                sta     s2IncineratorCounter
                lda     S2IncineratorVar2
                bne     @_2
                lda     #>Flame
                sta     s2fireMackShape+1
                lda     #<Flame
                sta     s2fireMackShape
                lda     #>BlankShape
                sta     s2fireMackErase+1
                lda     #<BlankShape
                sta     s2fireMackErase
                lda     #$01
                sta     S2IncineratorVar2
@_2             lda     #$24
                sta     XLocDiv7
                sta     XLocation
                lda     #$2f
                sta     YLoc
                sta     YLocation
                lda     s2fireMackErase+1
                sta     Src_Erase+1
                lda     s2fireMackErase
                sta     Src_Erase
                lda     s2fireMackShape+1
                sta     SrcP+1
                lda     s2fireMackShape
                sta     SrcP
                jsr     BltBytes          ;BLT Stage 2 Stove Fire
                lda     s2fireMackShape+1
                sta     s2fireMackErase+1
                lda     s2fireMackShape
                sta     s2fireMackErase
                jsr     shiftBytes        ;Erase and draw flame
                and     #$03
                tay
                clc
                lda     #<Flame
                adc     tblFireMackShapeTable,y
                sta     s2fireMackShape
                lda     #>Flame
                adc     #$00
                sta     s2fireMackShape+1
                rts

tbls3AnimeHBelt .dd1    $00
tbls3AnimeHBeltBB .dd1  $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
s3HbeltWait     .dd1    $02

****************************************
* Stage 3 Anime the Horizontal Belt    *
*                                      *
****************************************
* If Wait is over then Animate the     *
* belt                                 *
****************************************
s3AnimeHBelt    dec     s3HbeltWait
                beq     @_1
                rts

@_1             lda     #$02
                sta     s3HbeltWait
                lda     #$00
                sta     OrByte
                lda     tbls3AnimeHBelt
                bne     @_4
                lda     #$01
                sta     tbls3AnimeHBelt
                ldy     #$0a
                sty     timer1
                lda     #$00
                sta     indexVar
@_2             sta     tbls3AnimeHBeltBB,y
                clc
                adc     #$04
                sta     indexVar
                lda     tbls3AnimeHBeltBB,y
                tax
                lda     tbls3AnimeHBeltMapped,x
                sec
                sbc     #$1c
                sta     XLocDiv7
                lda     Tbls3AnimeHBeltYloc,x
                sta     YLoc
                jsr     drawRod
                lda     indexVar
                dec     timer1
                ldy     timer1
                bpl     @_2
                rts

@_4             ldy     #$0a
                sty     timer1
@_5             lda     tbls3AnimeHBeltBB,y
                tax
                lda     tbls3AnimeHBeltMapped,x
                sec
                sbc     #$1c
                sta     XLocDiv7
                lda     Tbls3AnimeHBeltYloc,x
                sta     YLoc
                jsr     drawRod
                dec     timer1
                ldy     timer1
                bpl     @_5
                ldy     #$0a
                sty     timer1
@_6             clc
                lda     tbls3AnimeHBeltBB,y
                adc     #$01
                cmp     #$2b
                bne     @_7
                lda     #$00
@_7             sta     tbls3AnimeHBeltBB,y
                tax
                lda     tbls3AnimeHBeltMapped,x
                sec
                sbc     #$1c
                sta     XLocDiv7
                lda     Tbls3AnimeHBeltYloc,x
                sta     YLoc
                jsr     drawRod
                dec     timer1
                ldy     timer1
                bpl     @_6
                rts

s3RollerSrcSave2 .dd1   $00
                .dd1    $00
s3RollerSrcSave1 .dd1   $00
                .dd1    $00
s3RollerAnimeFrame .dd1 $00
vs3AnimeTallRoller16 .dd1 $00
                .dd1    $20
                .dd1    $40
                .dd1    $60
vs3AnimeTallRoller17 .dd1 $4c
                .dd1    $96
s3BigRollWait   .dd1    $02

s3AnimeTallRollingPoint dec s3BigRollWait
                beq     @_1
                rts

@_1             lda     #$02
                sta     s3BigRollWait
                ldy     #$01
                sty     timer1
@_2             lda     s3RollerSrcSave1+1
                sta     Src_Erase+1
                lda     s3RollerSrcSave1
                sta     Src_Erase
                lda     s3RollerSrcSave2+1
                sta     SrcP+1
                lda     s3RollerSrcSave2
                sta     SrcP
                lda     #$11
                sta     XLocDiv7
                sta     XLocation
                lda     vs3AnimeTallRoller17,y
                sta     YLoc
                sta     YLocation
                jsr     BltBytes
                dec     timer1
                ldy     timer1
                bpl     @_2
                lda     s3RollerSrcSave2+1
                sta     s3RollerSrcSave1+1
                lda     s3RollerSrcSave2
                sta     s3RollerSrcSave1
                inc     s3RollerAnimeFrame
                lda     s3RollerAnimeFrame
                cmp     #$04
                bne     L76B0
                lda     #$00
                sta     s3RollerAnimeFrame
L76B0           tay
                clc
                lda     #<s3BigRoll
                adc     vs3AnimeTallRoller16,y
                sta     s3RollerSrcSave2
                lda     #>s3BigRoll
                adc     #$00
                sta     s3RollerSrcSave2+1
                rts

s2DumpX         .dd1    $00
s2DumpY1        .dd1    $00
                .dd1    $00
s2DumpYloc      .dd1    $00
                .dd1    $00
s2DumpDec7      .dd1    $00
s2DumpErase     .dd1    $00
                .dd1    $00
s2DumpDec       .dd1    $0a
s2DumpFalg      .dd1    $00
s2DumpSavY      .dd1    $00
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $00
                .dd1    $20
                .dd1    $00
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $20
                .dd1    $20

doSt2Dropping   ldy     #$01
@_1             lda     s2Tbldump1,y
                beq     @_2
                dey
                bpl     @_1
                rts

@_2             dec     s2DumpDec
                beq     @_3
                rts

@_3             lda     s2DumpFalg
                bne     @_4
                sty     s2DumpSavY
                lda     #$01
                sta     s2DumpFalg
                lda     #$04
                sta     s2DumpX
                sta     s2DumpY1+1
                lda     #$a6
                sta     s2DumpY1
                sta     s2DumpYloc
                lda     #$7e
                sta     s2DumpDec7
                lda     #$e0
                sta     s2DumpYloc+1
                lda     #$8b              ;empty Erase shape
                sta     s2DumpErase+1
                lda     #$00
                sta     s2DumpErase
@_4             lda     s2DumpX
                sta     XLocDiv7
                sta     XLocation
                lda     s2DumpY1
                sta     YLoc
                lda     s2DumpYloc
                sta     YLocation
                lda     s2DumpErase+1
                sta     Src_Erase+1
                lda     s2DumpErase
                sta     Src_Erase
                lda     s2DumpY1
                and     #$0f
                tay
                clc
                lda     #$e0
                adc     s2DumpSavY+1,y
                sta     SrcP
                sta     s2DumpYloc+1
                lda     #$7e
                adc     #$00
                sta     SrcP+1
                sta     s2DumpDec7
                jsr     BltBytes          ;draw St2 dropping
                lda     s2DumpY1
                cmp     #$b4
                beq     @_6
                sta     s2DumpYloc
                inc     s2DumpY1
                lda     s2DumpDec7
                sta     s2DumpErase+1
                lda     s2DumpYloc+1
                sta     s2DumpErase
                lda     #$01
                sta     s2DumpDec
                rts

@_6             lda     s2DumpDec7
                sta     SrcP+1
                lda     s2DumpYloc+1
                sta     SrcP
                lda     #$8b
                sta     Src_Erase+1
                lda     #$00
                sta     Src_Erase
                lda     s2DumpX
                sta     XLocDiv7
                sta     XLocation
                lda     s2DumpY1
                sta     YLoc
                sta     YLocation
                jsr     BltBytes
                lda     #$00
                sta     s2DumpFalg
                ldy     s2DumpSavY
                lda     #$01
                sta     s2Tbldump1,y
                lda     #$0a
                sta     s2DumpDec
                rts

s2DumpState2    .dd1    $00
                .dd1    $00
s2Tbldump1      .dd1    $00
                .dd1    $00
tbls2dumpX      .dd1    $00
                .dd1    $00
tblS2dumpOldX   .dd1    $00
                .dd1    $00
tbls2dumpY      .dd1    $00
                .dd1    $00
tblS2dumpOldY   .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
s2DumpState1    .dd1    $00
s2DumpDec32qw3  .dd1    $00
s2DumpIdx       .dd1    $00

doSt2DropToPot  ldy     #$01
@_1             lda     s2Tbldump1,y
                beq     @_2
                sty     s2DumpIdx
                jsr     @_3
                ldy     s2DumpIdx
@_2             dey
                bpl     @_1
                rts

@_3             lda     s2DumpState1,y
                bne     @_4
                lda     #$01
                sta     s2DumpState1,y
                lda     #$23
                sta     s2DumpState2,y
                lda     #$8b              ;blank erase
                sta     Src_Erase+1
                lda     #>dumpPreshift
                sta     SrcP+1
                ldx     #$23
                lda     TblS2UpRailX,x
                sta     XLocDiv7
                sta     XLocation
                sta     tbls2dumpX,y
                sta     tblS2dumpOldX,y
                lda     TblS2UpRailY,x
                sta     YLoc
                sta     YLocation
                sta     tbls2dumpY,y
                sta     tblS2dumpOldY,y
                jsr     XorPreshiftShape
                jmp     @_5

@_4             lda     tblS2dumpOldX,y
                sta     XLocation
                lda     tblS2dumpOldY,y
                sta     YLocation
                lda     #>dumpPreshift
                sta     SrcP+1
                sta     Src_Erase+1
                lda     tbls2dumpX,y
                sta     XLocDiv7
                lda     tbls2dumpY,y
                sta     YLoc
                jsr     XorPreshiftShape  ;draw s2 dropping to pot
@_5             ldx     s2DumpIdx
                dec     s2DumpState2,x
                bmi     @_6
                lda     s2DumpState2,x
                tay
                lda     tbls2dumpX,x
                sta     tblS2dumpOldX,x
                lda     tbls2dumpY,x
                sta     tblS2dumpOldY,x
                lda     TblS2UpRailX,y
                sta     tbls2dumpX,x
                lda     TblS2UpRailY,y
                sta     tbls2dumpY,x
                rts

@_6             lda     #$00
                sta     s2DumpState1,x
                sta     s2Tbldump1,x
                lda     tbls2dumpX,x
                sta     XLocDiv7
                sta     XLocation
                lda     tbls2dumpY,x
                sta     YLoc
                sta     YLocation
                lda     #>dumpPreshift
                sta     SrcP+1
                lda     #$8b
                sta     Src_Erase+1
                jsr     XorPreshiftShape
                rts

S2PressV5       .dd1    $00
S2Pv8           .dd1    $00
S2PressVar1     .dd1    $00
                .dd1    $00
S2PressVar2     .dd1    $00
S2PressVar3     .dd1    $01
                .dd1    $06
                .dd1    $00
S2PressVar4     .dd1    $00
S2PressV6       .dd1    $00
S2Presser_XByte .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00

s2updPresser    lda     S2PressVar3
                beq     @_1
                dec     S2PressVar3
                rts

@_1             lda     S2PressVar1
                beq     @_2
                lda     S2PressV5
                sta     S2Pv8
                sta     S2PressVar1+1
                clc
                adc     #$04
                sta     S2PressV5
                sta     S2PressVar2
                jmp     @_3

@_2             lda     S2PressV5
                sta     S2Pv8
                sta     S2PressVar1+1
                sec
                sbc     #$04
                sta     S2PressV5
                sta     S2PressVar2
@_3             jsr     doSt2Press
                jsr     pressTHing2
                lda     S2PressVar1
                bne     @_4
                lda     S2PressV5
                cmp     S2PressVar4
                bne     @_exit
                lda     #$01
                sta     S2PressVar1
                lda     #$10
                sta     S2PressVar3
                rts

@_4             lda     S2PressV5
                cmp     S2PressV6
                bne     @_exit
                lda     #$00
                sta     S2PressVar1
                lda     ZeroIfStandStill
                bne     @_exit
                ldy     #>PresserTune
                ldx     #<PresserTune
                jsr     InitTune
@_exit          rts

doSt2Press      lda     S2Presser_XByte
                sta     XLocDiv7
                sta     XLocation
                lda     S2PressV5
                sta     YLoc
                lda     S2Pv8
                sta     YLocation
                lda     #>s3Stamper
                sta     SrcP+1
                sta     Src_Erase+1
                lda     #<s3Stamper
                sta     SrcP
                sta     Src_Erase
                jsr     BltBytes          ;Stage 2 right Pressing thing
                rts

pressTHing2     lda     S2Presser_XByte+3
                sta     Yline
                lda     S2Presser_XByte+1
                sta     StartLineByte
                sta     EndLineByte
                lda     S2PressVar1+1
                sec
                sbc     S2PressVar3+1
                sta     Ything2
                jsr     drawGroundLine
                lda     S2Presser_XByte+3
                sta     Yline
                lda     S2Presser_XByte+1
                sta     StartLineByte
                sta     EndLineByte
                lda     S2PressVar2
                sec
                sbc     S2PressVar3+1
                sta     Ything2
                jsr     drawGroundLine
                lda     S2Presser_XByte+3
                sta     Yline
                lda     S2Presser_XByte+2
                sta     StartLineByte
                sta     EndLineByte
                lda     S2PressVar1+1
                sec
                sbc     S2PressVar3+1
                sta     Ything2
                jsr     drawGroundLine
                lda     S2Presser_XByte+3
                sta     Yline
                lda     S2Presser_XByte+2
                sta     StartLineByte
                sta     EndLineByte
                lda     S2PressVar2
                sec
                sbc     S2PressVar3+1
                sta     Ything2
                jsr     drawGroundLine
                rts

S2LiftY         .dd1    $00
S2LiftYpos      .dd1    $00
S2LiftYbackup   .dd1    $00
S2LiftDirection .dd1    $00
tblS2LiftShape  .dd1    $40
                .dd1    $00
                .dd1    $00
                .dd1    $60
S2LiftWaitbeforeMove .dd1 $00
S2LiftWait      .dd1    $00

doS2Lift        lda     S2LiftWait
                beq     @_1
                rts

@_1             lda     S2LiftWaitbeforeMove
                beq     @_2
                dec     S2LiftWaitbeforeMove
                rts

@_2             lda     S2LiftDirection
                bne     @goDown
                jsr     @notBottom
                dec     S2LiftYpos
                jmp     @_4

@goDown         inc     S2LiftYpos
@_4             jsr     DrawS2Lift
                lda     #$00
                sta     OrByte
                lda     S2LiftYpos
                sta     S2LiftYbackup
                lda     S2LiftDirection
                bne     @testReachBottm   ;test for go down type
                lda     S2LiftYpos        ;go up, so check if reaching top
                cmp     #79
                bne     @exit
                lda     #$01              ;go down
                sta     S2LiftDirection
                lda     #10               ;wait 10 cycle before moving
                sta     S2LiftWaitbeforeMove
@exit           rts

@testReachBottm lda     S2LiftYpos
                cmp     #168
                bne     @notBottom
                lda     #$00
                sta     S2LiftDirection   ;change direction
                lda     #10               ;wait 10 cycle before moving
                sta     S2LiftWaitbeforeMove
@notBottom      lda     #$7c
                sta     XLocDiv7
                lda     S2LiftYpos
                sec
                sbc     #$08
                sta     YLoc
                jsr     drawRod
                rts

DrawS2Lift      lda     #14
                sta     timer1
                ldy     #3
                sty     indexVar
@_1             ldy     indexVar
                lda     timer1
                sta     XLocDiv7
                sta     XLocation
                lda     #$e0
                clc
                adc     tblS2LiftShape,y
                sta     SrcP
                sta     Src_Erase
                lda     #$7f
                adc     #$00
                sta     SrcP+1
                sta     Src_Erase+1
                lda     S2LiftYpos
                sta     YLoc
                lda     S2LiftYbackup
                sta     YLocation
                lda     #$01
                sta     BitBltParm
                jsr     BltBytes
                inc     timer1
                inc     timer1
                dec     indexVar
                bpl     @_1
                lda     S2LiftYpos
                sec
                sbc     #$08
                sta     S2LiftY
                rts

S2CraneToggle   .dd1    $00
s2CraneWait     .dd1    $10
tblCraneStyle   .dd1    $00               ;offset to get 2 shape address
                .dd1    $20

s2CraneHandler  dec     s2CraneWait
                beq     @_1
                rts

@_1             lda     #10
                sta     s2CraneWait
                lda     S2CraneToggle     ;toggle between 0 nd 1
                beq     @_2
                lda     #$00
                sta     S2CraneToggle
                jmp     @_3

@_2             lda     #$01
                sta     S2CraneToggle
@_3             lda     #$0e
                sta     XLocDiv7
                clc
                adc     #$01
                sta     WidthDiv7
                lda     #$27
                sta     YLoc
                sec
                sbc     #$10
                sta     Ycount
                ldy     S2CraneToggle
                lda     #>S2Crane1
                sta     SrcP+1
                clc
                lda     #<S2Crane1
                adc     tblCraneStyle,y
                sta     SrcP
                jsr     BitBlt1
                rts

tnt             .dd1    $00
tntShapeSav     .dd1    $00
                .dd1    $00
tntErase        .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $20
s2TNTAnimateCount .dd1  $01

s2UpdateTNT     dec     s2TNTAnimateCount
                beq     @_a
                rts

@_a             lda     #2
                sta     s2TNTAnimateCount
                lda     tnt
                bne     @_2
                lda     #$1a
                sta     XLocDiv7
                sta     XLocation
                lda     #188
                sta     YLoc
                sta     YLocation
                lda     #>tntShape1
                sta     SrcP+1
                sta     tntErase+1
                lda     #<tntShape1
                sta     SrcP
                sta     tntErase
                lda     #$8b              ;blank shape
                sta     Src_Erase+1
                lda     #$00
                sta     Src_Erase
                jsr     BltBytes          ;draw TNT
                lda     #$01
                sta     tnt
                lda     #>tntShape2
                sta     tntShapeSav+1
                lda     #<tntShape2
                sta     tntShapeSav
                rts

@_2             lda     #$1a
                sta     XLocDiv7
                sta     XLocation
                lda     #188
                sta     YLoc
                sta     YLocation
                lda     tntErase+1
                sta     Src_Erase+1
                lda     tntErase
                sta     Src_Erase
                lda     tntShapeSav+1
                sta     SrcP+1
                lda     tntShapeSav
                sta     SrcP
                jsr     BltBytes          ;draw stage2 lower left red explosive
                lda     tntShapeSav+1
                sta     tntErase+1
                lda     tntShapeSav
                sta     tntErase
                lda     tntErase+2
                eor     #$01
                sta     tntErase+2
                tay
                clc
                lda     #<tntShape1
                adc     tntErase+3,y
                sta     tntShapeSav
                lda     #>tntShape1
                adc     #$00
                sta     tntShapeSav+1
                rts

                .junk   239

s1BaseStand     .bulk   0000000000003f703f703f701f601f600a400a40050005000a400a401f601f60

purplePipe      .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   00002a552a557f7f
                .bulk   2a557f7f2a552a55

purplePipeDrop  .bulk   000000000000052a
                .bulk   077e052a077e052a
                .bulk   052a0a550a550f7f
                .bulk   0a55077f02550055

Chain           .bulk   0060011001100110
                .bulk   0060011001100110
                .bulk   0060011001100110
                .bulk   0060011001100110

s2KillBlock     .bulk   3f7f2a553f7f2a553f7f2a553f7f000000000000000000000000000000000000

s3Stamper       .dd1    $3f
                .dd1    $7f
                .dd1    $3a
                .dd1    $57
                .dd1    $3b
                .dd1    $5f
                .dd1    $3e
                .dd1    $77
                .dd1    $3a
                .dd1    $57
                .dd1    $1f
                .dd1    $7e
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00

Flame           .bulk   0000d480d580d588d7b8d5bed7aad5ea91a2958a8ca2849b85c381c781c68180

                .bulk   c080d480d580c588d7b8d5bef78ad5ec918695808d80858085b080b080b080a0

                .bulk   c080d080f180c580d7a0dda0e780c5c080a08080808080808080808080808080

collapseMack1   .bulk   1e1e0e1c0b340a54  ;Mack Death
                .bulk   025003300d2c1d2e
                .bulk   1d2e025002500f7c
                .bulk   0778073803300000

collapseMack2   .bulk   1e1e0e1c0a54033005283d2f02500f7c07780330000000000000000000000000

collapseMack3   .bulk   1e1e0b3403301d2e02500f7c0330000000000000000000000000000000000000

jumpPadSprite   .bulk   2a542a540420042009100910091004200520552a552a7f7e0000000000000000

jumpPadSprite2  .bulk   2a542a5409101108210411080910552a552a7f7e000000000000000000000000

jumpPadSprite3  .bulk   2a542a54552a552a7f7e00000000000000000000000000000000000000000000

BonusHammer     .bulk   02400340034003400240024002400240024002433a4e3f7c3f78380000000000

BonusHexTool    .bulk   0000003c007c00600063007f017e037007603f407f00630063000f000e000000

S2Crane1        .bulk   1f7c3a5e39163526352639163a5e1f7c0c2818283028617e407c001000000000

S2Crane2        .bulk   3f7e6a5769176527652769176a573f7e0c28197e307c60104000000000000000

LiftPoleSprite  .bulk   0370057006700730035005700670073003500570067007300350057006700730

s2Toolbox2      .bulk   ffffd5ebd5ebd5ebfefffeffbfbe9fdc8490849083e080808080808080808080

S1clockSprite   .bulk   1f7c2a542a5035543554355435542a543a753e753e550e50060006000f400700

S1clock2Sprite  .bulk   3f7c2a552a503550355435552a543a743e743e551e57060506000f4007000000
                 +      007c005f017a011f0175004f003a000000000000010000000000000000008080

                .bulk   005e0177011b017d004e007c0028003800000000000000000000000000000000

s1Block1        .bulk   00a080e081e083a4878e8dac9db8b5b0f1e0d5c08780868084808080

s1block2        .bulk   80808080848086808780a5c0f1e0b5b09db88dac878e83aa81e080e080a08080
                 +      80808080

S1CrossBeam2    .bulk   aad5aad52a552251
                .bulk   22512a55aad5aad5
                .bulk   0000000000000000
                .bulk   0000000000000000

                .bulk   aad5aad52a552a55
                .bulk   2a552a55aad5aad5
                .bulk   0000000000000000
                .bulk   0000000000000000

                .bulk   aad5aad502550255
                .bulk   02550255aad5aad5
                .bulk   0000000000000000
                .bulk   0000000000000000

                .bulk   aad5aad52a502a50
                .bulk   2a502a50aad5aad5
                .bulk   0000000000000000
                .bulk   0000000000000000

S2CrossBeam     .bulk   aad5aad5552a4522
                .bulk   4522552aaad5aad5
                .bulk   0000000000000000
                .bulk   0000000000000000

                .bulk   aad5aad5552a552a
                .bulk   552a552aaad5aad5
                .bulk   0000000000000000
                .bulk   0000000000000000

greenCrossBeamRight .bulk aad5aad5052a052a
                .bulk   052a052aaad5aad5
                .bulk   0000000000000000
                .bulk   0000000000000000

greenCrossBeamLeft .bulk aad5aad555285528
                .bulk   55285528aad5aad5
                .bulk   0000000000000000
                .bulk   0000000000000080

                .bulk   2850552e557e554e
                .bulk   557e572e7d2e452e
                .bulk   7d2e552e7f7e0c00
                .bulk   0c003f001e00

Toolbox         .bulk   0c002850552e557e557e572e452e7d2e7f7e0c003f001e000c00000000000000
                .dd1    $00               ;s2pot
                .dd1    $00

s2pot           .bulk   012a5520012a5520
                .bulk   0005280000052800
                .bulk   003f7f00007f7140
                .bulk   1d7f7c60157f7c60
                .bulk   3f7f7c60297f7c60
                .bulk   397f7f6001700360
                .bulk   0160016000600140
                .bulk   00700340001f7e00

ConveyorBelt    .bulk   9fff8080808080fe
                .bulk   9ed58080808087ef
                .bulk   9ed680808080bfef
                .bulk   9ffc80808083f5ef
                .bulk   9c808080809ed5ef
                .bulk   9c80808081faf5fe
                .bulk   9c8080808faaf7f0
                .bulk   9c808080fdbadf00
                .bulk   9c808087d5baf800
                .bulk   9c8080beddafc000
                .bulk   9c8083eaddbc0000
                .bulk   9c809faed7e00000
                .bulk   9c81f5aede000000
                .bulk   9c8fd7abf0000000
                .bulk   9cfad7af80000000
                .bulk   9febd5f800000000
                .bulk   bfabd7c000000000
                .bulk   f7aafc0000000000
                .bulk   f7abe00000000000
                .bulk   f7be000000000000
                .bulk   f7f0000000000000
                .bulk   bf00000000000000

s3belt          .dd1    $02
                .dd1    $55
                .dd1    $2a
                .dd1    $55
                .dd1    $2a
                .dd1    $55
                .dd1    $2a
                .dd1    $55
                .dd1    $2a
                .dd1    $55
                .dd1    $2a
                .dd1    $50
                .dd1    $0b
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $74
                .dd1    $2f
                .dd1    $2a
                .dd1    $40
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $55
                .dd1    $3d
                .dd1    $2f
                .dd1    $2e
                .dd1    $40
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $5d
                .dd1    $3d
                .dd1    $2f
                .dd1    $2e
                .dd1    $40
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $5d
                .dd1    $3d
                .dd1    $2f
                .dd1    $2a
                .dd1    $40
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $55
                .dd1    $3d
                .dd1    $0b
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $7f
                .dd1    $74
                .dd1    $02
                .dd1    $55
                .dd1    $2a
                .dd1    $55
                .dd1    $2a
                .dd1    $55
                .dd1    $2a
                .dd1    $55
                .dd1    $2a
                .dd1    $55
                .dd1    $2a
                .dd1    $50

railType1       .bulk   aad5aad5aad5aad5aad5aad5aad5aad5aad5aad5aad5aad5052a552a552a552a
                 +      552a552a052a4522552a552a4522552a052a4522552a552a4522552a052a552a
                 +      552a552a552a552aaad5aad5aad5aad5aad5aad5aad5aad5aad5aad5aad5aad5

railType2       .bulk   d5aad5aad5aad5aa
                .bulk   d5aad5aad5aad5aa
                .bulk   d5aad5aad5aad5aa
                .bulk   8ad5aad5aad5aad5
                .bulk   aad5aad58ad5a2d1
                .bulk   aad5aad5a2d1aad5
                .bulk   8ad5a2d1aad5aad5
                .bulk   a2d1aad58ad5aad5
                .bulk   aad5aad5aad5aad5
                .bulk   d5aad5aad5aad5aa
                .bulk   d5aad5aad5aad5aa
                .bulk   d5aad5aad5aad5aa

RailTypeA       .bulk   aad5aad5aad5aad5
                .bulk   aad5aad5aad5aad5
                .bulk   aad5aad5aad5aad5
                .bulk   152a552a552a552a
                .bulk   552a5528152a4522
                .bulk   552a552a45225528
                .bulk   152a4522552a552a
                .bulk   45225528152a552a
                .bulk   552a552a552a5528
                .bulk   aad5aad5aad5aad5
                .bulk   aad5aad5aad5aad5
                .bulk   aad5aad5aad5aad5

RailTypeB       .bulk   d5aad5aad5aad5aa  ;12 x 8 Right S3 platform
                .bulk   d5aad5aad5aad5aa
                .bulk   d5aad5aad5aad5aa
                .bulk   aad5aad5aad5aad5
                .bulk   aad5aad0aad5a2d1
                .bulk   aad5aad5a2d1aad0
                .bulk   aad5a2d1aad5aad5
                .bulk   a2d1aad0aad5aad5
                .bulk   aad5aad5aad5aad0
                .bulk   d5aad5aad5aad5aa
                .bulk   d5aad5aad5aad5aa
                .bulk   d5aad5aad5aad5aa

s3BigRoll       .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .bulk   1528500a47624f524e524a724b724762500a1528
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00

                .bulk   1528500a46624e724e724e724e724662500a1528
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00

                .bulk   1528500a47624b724a724e524f524762500a1528
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00

                .bulk   1528500a47624f724a524a524f724762500a1528

                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $68
                .dd1    $16
                .dd1    $1f
                .dd1    $7c
                .dd1    $07
                .dd1    $70

S3Storage4x32   .dd1    $ff
                .dd1    $ff
                .dd1    $ff
                .dd1    $ff
                .dd1    $ea
                .dd1    $d5
                .dd1    $aa
                .dd1    $d7
                .dd1    $ea
                .dd1    $d5
                .dd1    $aa
                .dd1    $d7
                .dd1    $ea
                .dd1    $ff
                .dd1    $ff
                .dd1    $d7
                .dd1    $ea
                .dd1    $ea
                .dd1    $d5
                .dd1    $d7
                .dd1    $ea
                .dd1    $ea
                .dd1    $d5
                .dd1    $d7
                .dd1    $ea
                .dd1    $ea
                .dd1    $d5
                .dd1    $d7
                .dd1    $ea
                .dd1    $fa
                .dd1    $d5
                .dd1    $d7
                .dd1    $ea
                .dd1    $fa
                .dd1    $d5
                .dd1    $d7
                .dd1    $ea
                .dd1    $ea
                .dd1    $d5
                .dd1    $d7
                .dd1    $ea
                .dd1    $ea
                .dd1    $dd
                .dd1    $d7
                .dd1    $ea
                .dd1    $ea
                .dd1    $dd
                .dd1    $d7
                .dd1    $ea
                .dd1    $ea
                .dd1    $dd
                .dd1    $d7
                .dd1    $ea
                .dd1    $fa
                .dd1    $d5
                .dd1    $d7
                .dd1    $ea
                .dd1    $fa
                .dd1    $d5
                .dd1    $d7
                .dd1    $ea
                .dd1    $ea
                .dd1    $d5
                .dd1    $d7
                .dd1    $ea
                .dd1    $ea
                .dd1    $d5
                .dd1    $d7
                .dd1    $ea
                .dd1    $ff
                .dd1    $ff
                .dd1    $d7
                .dd1    $ea
                .dd1    $d5
                .dd1    $aa
                .dd1    $d7
                .dd1    $ea
                .dd1    $d5
                .dd1    $aa
                .dd1    $d7
                .dd1    $eb
                .dd1    $ff
                .dd1    $ff
                .dd1    $f7
                .dd1    $eb
                .dd1    $92
                .dd1    $92
                .dd1    $b7
                .dd1    $eb
                .dd1    $92
                .dd1    $92
                .dd1    $b7
                .dd1    $eb
                .dd1    $ff
                .dd1    $ff
                .dd1    $f7
                .dd1    $eb
                .dd1    $92
                .dd1    $92
                .dd1    $b7
                .dd1    $eb
                .dd1    $92
                .dd1    $92
                .dd1    $b7
                .dd1    $eb
                .dd1    $ff
                .dd1    $ff
                .dd1    $f7
                .dd1    $ea
                .dd1    $d5
                .dd1    $aa
                .dd1    $d7
                .dd1    $ff
                .dd1    $ff
                .dd1    $ff
                .dd1    $ff

liftSprite      .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   3f7f7f7f3f7f7f7f
                .bulk   3d2a552f3d2a552f
                .bulk   3f7f7f7f30000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   300000033f7f7f7f
                .bulk   3a552a573a552a57
                .bulk   3f7f7f7f00000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   00000000

mackInLift      .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000

                .bulk   3f7f7f7f3f7f7f7f
                .bulk   3d2a552f3d2a552f
                .bulk   3f7f7f7f303c3c03
                .bulk   301c380330166803
                .bulk   3015280330052003
                .bulk   30066003301a5803
                .bulk   303a5c03303a5c03
                .bulk   3005200330052003
                .bulk   301f7803300f7003
                .bulk   300e700330066003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   3000000330000003
                .bulk   300000033f7f7f7f
                .bulk   3a552a573a552a57
                .bulk   3f7f7f7f00000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   00000000

s1FilledOrangeBox .bulk ffffffffd5abd5abd5abd5abffffffff

fireMack1       .bulk   8580858887b895be978a95ec918695a08c8ca480a4b0c1b0d0b0d0a0e1c0e180

fireMack2       .bulk   8780858885f897ae9dca95ac918695a08cac89a085f0828085a084a080e08080

fireMack3       .bulk   8580858885f895ae9d8a97ec918695a08cac84ac84e4828681828382838c8180

mackDrown1      .bulk   3333352b352f1d2e025002500f7c077807380330000000000000000000000000

mackDrown2      .bulk   025002500f7c077807380330
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000

VerticalsteelBar .bulk  352c352c352c342c342c352c352c352c352c352c342c342c352c352c352c352c
                 +      352c352c352c352c352c352c352c352c35
                .bulk   000000000000000000000000000000000000000000000000000000

s2Incinerator   .bulk   3f7f2a542e742e742a542a542f742a543f7d330d300d3f7d2a552a5414281428

tntShape1       .bulk   85a885a885a882d085a885a885a885a880c08180828088808280808080808080

tntShape2       .bulk   85a885a885a882d085a885a885a885a880c08180848082808880808080808080

rail2Holes      .bulk   d5aad5aaaad5a2d1a2d1aad5d5aad5aa00000000000000000000000000000000

railFilled      .bulk   d5aad5aaaad5aad5aad5aad5d5aad5aa00000000000000000000000000000000

                .bulk   d5aad5aa8ad58ad58ad58ad5d5aad5aa00000000000000000000000000000000

                .bulk   d5aad5aaaad0aad0aad0aad0d5aad5aa00000000000000000000000000000000

S3nailPotSprite .bulk   1f7e352b350335333533352b377b380710020f7c000000000000000000000000

BonusMixer      .bulk   3f7f2a55052807380120033007380e1c1f7c3f7c2378237013400e0000000000

BonusDrill      .bulk   0010002000300010002000300010007001280128013801282b382b282b280178

S1Bell3Sprite   .bulk   02200340076007780f7c0f701740090008400420000000000000000000000000

S1BellSprite    .bulk   00400f7c07780778037003700160021002100210000000000000000000000000

S1Bell2Sprite   .bulk   0220016003700f701f7807780174004801080210000000000000000000000000

                .bulk   03600360255a0f58177a0f702500000000000000000000000000000000000000

                .bulk   077007702d501f7c0e6b4f7e151a0f5c2f780540000000000000000000000000

                .bulk   077007700770077007703f727d57377f7e7c72683d7e7f6e1d7d0f7050040110

InArrowSprite   .bulk   0000004001600370
                .bulk   0778016001600160
                .bulk   016000000000195e
                .bulk   1d4c1f4c1b4c195e

InBurner        .bulk   1f7f7f7f7f7e1d2a552a552e1c224a54510e1f2a552a553e036a552a5570007a
                 +      4a1457401f1a4a14563e1f6e552a5d7e0f66552a597c075b7f7f767803596a55
                 +      667001580a54066000780778074000380f4c070000001f66000000003f7f0000

ConveyorRoll1   .bulk   80fe87efbfeff5efd5eff5fef7f0df80

                .bulk   80fe87f3bfe7f5cfd59ff5fef7f0df80

                .bulk   80fe87ffbf83f583d5fff5fef7f0df80

                .bulk   80fe87dfbfc7f5f3d5fbf5fef7f0df80

ConveyorRoll2   .bulk   bfaaf7aaf7abf7bef7f0bf8080808080

                .bulk   bfaaf9aaf3abe7beeff0bf8080808080

                .bulk   bfaaffaac1abc1befff0bf8080808080

                .bulk   bfaaefaae7abf3befbf0bf8080808080

                .bulk   0100110013000d08014812300c00000000000000000000000000000000000000

                .bulk   0100110013000d0801484131410136660c180000000000000000000000000000

                .bulk   0100010011104102110813494d3001024102410432440c380000000000000000

S3spike1        .bulk   808180818081828b80a1818188918181808180c1848181a38889818180818081

s3spike2        .bulk   808190c18081858b80a190818281808180818281a081858ba0a1828190818081

s3spike3        .bulk   80c18881819180c184a980838081848180c19281818188a1818b808180818081
                .bulk   ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
BlankShape      .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000
                .bulk   0000000000000000

FONT            .dd1    $38
                .dd1    $38
                .dd1    $38
                .dd1    $38
                .dd1    $00
                .dd1    $38
                .dd1    $00
                .dd1    $00
                .dd1    $36
                .dd1    $36
                .dd1    $24
                .dd1    $12
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $80
                .dd1    $24
                .dd1    $7e
                .dd1    $24
                .dd1    $7e
                .dd1    $24
                .dd1    $80
                .dd1    $00
                .dd1    $08
                .dd1    $3e
                .dd1    $02
                .dd1    $3e
                .dd1    $20
                .dd1    $3e
                .dd1    $08
                .dd1    $00
                .dd1    $42
                .dd1    $25
                .dd1    $12
                .dd1    $08
                .dd1    $24
                .dd1    $52
                .dd1    $21
                .dd1    $00
                .dd1    $0c
                .dd1    $16
                .dd1    $02
                .dd1    $04
                .dd1    $2a
                .dd1    $12
                .dd1    $2c
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $10
                .dd1    $08
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $38
                .dd1    $1c
                .dd1    $0e
                .dd1    $0e
                .dd1    $0e
                .dd1    $1c
                .dd1    $38
                .dd1    $00
                .dd1    $0e
                .dd1    $1c
                .dd1    $38
                .dd1    $38
                .dd1    $38
                .dd1    $1c
                .dd1    $0e
                .dd1    $00
                .dd1    $22
                .dd1    $1c
                .dd1    $36
                .dd1    $1c
                .dd1    $22
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $08
                .dd1    $08
                .dd1    $3e
                .dd1    $08
                .dd1    $08
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $10
                .dd1    $08
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $7e
                .dd1    $7e
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $00
                .dd1    $00
                .dd1    $60
                .dd1    $70
                .dd1    $38
                .dd1    $1c
                .dd1    $0e
                .dd1    $06
                .dd1    $00
                .dd1    $00

ChrBitmap       .bulk   1e333b3f37331e00

Chr1            .bulk   0c0e0f0c0c0c3f00
Chr2            .bulk   1e3330180c063f00
Chr3            .bulk   1e
                .dd1    $33
                .dd1    $30
                .dd1    $1c
                .dd1    $30
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $38
                .dd1    $3c
                .dd1    $36
                .dd1    $33
                .dd1    $3f
                .dd1    $30
                .dd1    $30
                .dd1    $00
                .dd1    $3f
                .dd1    $03
                .dd1    $03
                .dd1    $1f
                .dd1    $30
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $1c
                .dd1    $06
                .dd1    $03
                .dd1    $1f
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $3f
                .dd1    $33
                .dd1    $18
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $3e
                .dd1    $30
                .dd1    $18
                .dd1    $0c
                .dd1    $00
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $10
                .dd1    $08
                .dd1    $10
                .dd1    $18
                .dd1    $1c
                .dd1    $1e
                .dd1    $1c
                .dd1    $18
                .dd1    $10
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $7e
                .dd1    $00
                .dd1    $7e
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $04
                .dd1    $0c
                .dd1    $1c
                .dd1    $3c
                .dd1    $1c
                .dd1    $0c
                .dd1    $04
                .dd1    $00
                .dd1    $3c
                .dd1    $7e
                .dd1    $62
                .dd1    $30
                .dd1    $18
                .dd1    $00
                .dd1    $18
                .dd1    $00
                .dd1    $90
                .dd1    $88
                .dd1    $b6
                .dd1    $ff
                .dd1    $ff
                .dd1    $ff
                .dd1    $be
                .dd1    $b6
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $3f
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $00
                .dd1    $1f
                .dd1    $33
                .dd1    $33
                .dd1    $1f
                .dd1    $33
                .dd1    $33
                .dd1    $1f
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $0f
                .dd1    $1b
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $1b
                .dd1    $0f
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $03
                .dd1    $1f
                .dd1    $03
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $03
                .dd1    $1f
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $03
                .dd1    $3b
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $3f
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $00
                .dd1    $3f
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $3f
                .dd1    $00
                .dd1    $30
                .dd1    $30
                .dd1    $30
                .dd1    $30
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $33
                .dd1    $1b
                .dd1    $0f
                .dd1    $07
                .dd1    $0f
                .dd1    $1b
                .dd1    $33
                .dd1    $00
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $3f
                .dd1    $00
                .dd1    $33
                .dd1    $3f
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $37
                .dd1    $3b
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $1f
                .dd1    $33
                .dd1    $33
                .dd1    $1f
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $37
                .dd1    $3b
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $1f
                .dd1    $33
                .dd1    $33
                .dd1    $1f
                .dd1    $0f
                .dd1    $1b
                .dd1    $33
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $03
                .dd1    $1e
                .dd1    $30
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $3f
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $0c
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $3f
                .dd1    $33
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $0c
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $00

ChrZ            .bulk   3f30180c06033f00
                .dd1    $1e
                .dd1    $1e
                .dd1    $06
                .dd1    $06
                .dd1    $1e
                .dd1    $1e
                .dd1    $00
                .dd1    $00
                .dd1    $06
                .dd1    $0e
                .dd1    $1c
                .dd1    $38
                .dd1    $70
                .dd1    $60
                .dd1    $00
                .dd1    $00
                .dd1    $78
                .dd1    $78
                .dd1    $60
                .dd1    $60
                .dd1    $78
                .dd1    $78
                .dd1    $00
                .dd1    $00

                .dd1    $08
                .dd1    $1c
                .dd1    $3e
                .dd1    $7f
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $7f
                .dd1    $00

EAlogo          .bulk   0e0e1b5c38735d671b47071f3e7f110409081109084849020852244210040508
                 +      10090c484502004204020e04070760090a484702004e04120104090420090948
                 +      49020042041e11244904210908484912285204120e3f474240735d67075f671f
                 +      0e020000000240000000000000000042000000010000000000000000007f0000
                 +      0000000000000000000000000000000000000000000000000000000000000000
                 +      00000000000000000000000f7f7f7f7c3f7f7800000000000007700038034000
                 +      1c000000000000077f7f7f7f7f7f7e000000000000037001700020001f000000
                 +      000000037f7f7f7f7f7f7f000000000000017807600038001f00000000000001
                 +      7f7f7f7f7f7f7f00000000000000780f40003c001f
                .bulk   000000000000007f7f7f7f7f7f7f000000000000003c0f00003c001f00000000
                 +      0000003f7f7f7f7f7f7f000000000000001c0e00003c001f000000000000001f
                 +      7f7f7f7f7f7f000000000000000e0000003c001f000000000000000f7f7f7f7f
                 +      7f7f000000000000000600000038001f0000000000000007737f7f7f7f7f0000
                 +      00000000000200000020001f0000000000000003607f7f7f7f7e000000000000
                 +      000100000300001c0000000000000001400f7c3f7f78000000494e0000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000
                 +      0000000000000000000000

LogoHardHat     .bulk   02552a552a552a552a552a552a552a552a552a552a552a552a500a552a552a55
                 +      2a552a552a552a552a552a552a552a552a552a54aad5aad5aad5aad5aad5aad5
                 +      aad5aad5aad5aad5aad5aad5aad5000000000000000000000000000000000000
                 +      0000000000000000
                .bulk   3c0e063038071c0700000360700e380e0000076e3c0e3807380e1e0e1e3c3807
                 +      1c0700000360700e380e00000f6e1e0e3807380e0f0e3e3e1f4e1c0700000360
                 +      3f5c380e00001f6e0f0e1f6e380e074e380e1f4e1c07000003603f1c380e0000
                 +      3c0e074e1f4e380e036e00070e1c1c07000003601c38380e0000380e000e0e1c
                 +      380e016e00070e1c1c07000003601c383b6e0000380e036e0e1c3b6e006e0007
                 +      07181c67000003600e703b6e0000380e0f6e07383b6e002e000707081d730000
                 +      03600e303b6e0000380e1f6e07183b6e030e000703401f79000003600700380e
                 +      0000380e1c0e0340380e074e380e03401f7c000000000700380e00003c0e1c0e
                 +      0340380e0f0e3e3e01601f1e00003f7e0340380e00001f6e1f6e0160380e1e0e
                 +      1e3c01601e0f00003f7e0340380e00000f6e0f6e0160380e3c0e063000401c07
                 +      00003f7e0100380e0000076e036e0040380e0000000000000000000000000000
                 +      000000000000000000000000aad5aad5aad5aad5aad5aad5aad5aad5aad5aad5
                 +      aad5aad5aad50a552a552a552a552a552a552a552a552a552a552a552a552a54
                 +      02552a552a552a552a552a552a552a552a552a552a552a552a50
others          .bulk   0e0e0e0e0e0e0e
                .bulk   0f0f0f0f0f0f0f
                .bulk   10101010101010
                .bulk   11111111111111
                .bulk   12121212121212
                .bulk   13131313131313
                .bulk   14141414

                .bulk   00001668000005200000066000003a5c00003a5c000005200000052000001f78
                 +      00000f7000000e700000066000000000

                .bulk   00003c000000143c0000142800001668000005200000010000004a5200004a52
                 +      00004b520000352c000006600000052000000a50000014280000224400000420

                .bulk   0000003c00003c280000142800001668000005200000410200004a5200006a56
                 +      00001b5800000520000006600000052000001250000014440000252800000a24

macWalkRightSprite .bulk 00001c0700000c0700000e1f00000a5600000254000035280000352800001128
                 +      00000050000002500000035000001f7c0000077c000003780000017000000000

                .bulk   0000380e0000180e00001c3e0000152c0000052800006a5000006a5000002250
                 +      00000120000005200000072000003f7800000f78000007700000036000000000

                .bulk   0000701c0000301c0000387c00002a5800000a50000155200001552000004520
                 +      0000024000000a4000000e4000007f7000001f7000000f600000074000000000

                .bulk   000160380000603800007178000055300000152000032a4000032a4000010a40
                 +      000005000000150000001d0000017f6000003f6000001f4000000f0000000000

Macxxx          .bulk   0003407000014070
                .bulk   0001637000012a60
                .bulk   00002a4000065500
                .bulk   0006550000021500
                .bulk   00000a0000002a00
                .bulk   00003a0000037f40
                .bulk   00007f4000003f00
                .bulk   00001e0000000000

                .bulk   0007016000030160000347600002554000005500000d2a00000d2a0000042a00
                 +      00001400000054000000740000077f0000017f0000007e0000003c0000000000

                .bulk   000e03400006034000070f4000052b0000012a00001a5400001a540000085400
                 +      000028000001280000016800000f7e0000037e0000017c000000780000000000
                .junk   64

macStandRightSprite .bulk 0000037000000070000001700000025000000250000001280000052800003528
                 +      00003450000012500000035000001f7c0000077c000003780000017000000000
                .bulk   00000760000001600000036000000520000005200000025000000a5000006a50
                 +      00006920000025200000072000003f7800000f78000007700000036000000000
                .bulk   00000f40000003400000074000000a4000000a40000005200000152000015520
                 +      0001524000004a4000000e4000007f7000001f7000000f600000074000000000
                .bulk   00001f000000070000000f00000015000000150000000a4000002a4000032a40
                 +      000325000001150000001d0000017f6000003f6000001f4000000f0000000000
                .bulk   00003e0000000e0000001e0000002a0000002a00000015000000550000065500
                 +      00064a0000022a0000003a0000037f4000007f4000003f0000001e0000000000
                .bulk   00007c0000001c0000003c00000054000000540000002a0000012a00000d2a00
                 +      000d1400000454000000740000077f0000017f0000007e0000003c0000000000
                .bulk   00017800000038000000780000012800000128000000540000025400001a5400
                 +      001a28000009280000016800000f7e0000037e0000017c000000780000000000
                .junk   64

                .bulk   0000003c0000381c00007c1c00000a5400000a54000007680000056800000528
                 +      00000050000002500000035000001f7c0000077c000003780000017000000000
                .bulk   000000780000703800017838000015280000152800000f5000000b5000000a50
                 +      00000120000005200000072000003f7800000f78000007700000036000000000
                .bulk   00000170000160700003707000002a5000002a5000001f200000172000001520
                 +      0000024000000a4000000e4000007f7000001f7000000f600000074000000000
                .bulk   000003600003416000076160000055200000552000003e4000002e4000002a40
                 +      000005000000150000001d0000017f6000003f6000001f4000000f0000000000
                .bulk   0000074000070340000f434000012a4000012a4000007d0000005d0000005500
                 +      00000a0000002a0000003a0000037f4000007f4000003f0000001e0000000000
                .bulk   00000f00000e0700001f0700000255000002550000017a0000013a0000012a00
                 +      00001400000054000000740000077f0000017f0000007e0000003c0000000000
                .bulk   00001e00001c0e00003e0e0000052a0000052a00000374000002740000025400
                 +      000028000001280000016800000f7e0000037e0000017c000000780000000000
                .junk   64

macWalkLeftSprite .bulk 0000380e0000380c00003e1c00001a5400000a500000052b0000052b00000522
                 +      00000240000002500000027000000f7e00000f78000007700000036000000000
                .bulk   0000701c0000701800007c38000035280000152000000a5600000a5600000a44
                 +      00000500000005200000056000001f7c00001f7000000f600000074000000000
                .bulk   00016038000160300001787000006a5000002a400000152c0000152c00001508
                 +      00000a0000000a4000000b4000003f7800003f6000001f4000000f0000000000
                .bulk   000340700003406000037160000155200000550000002a5800002a5800002a10
                 +      00001400000015000000170000007f7000007f4000003f0000001e0000000000
                .bulk   00070160000701400007634000032a4000012a00000055300000553000005420
                 +      0000280000002a0000002e0000017f6000017f0000007e0000003c0000000000
                .bulk   000e0340000e0300000f4700000655000002540000012a6000012a6000012840
                 +      000050000000540000005c0000037f4000037e0000017c000000780000000000

                .bulk   001c0700001c0600001f0e00000d2a0000052800000255400002554000025100
                 +      00012000000128000001380000077f0000077c00000378000001700000000000
                .junk   64

mackStandLeftSprite .bulk 000003700000034000000360000002500000025000000520000005280000052b
                 +      0000024b000002520000027000000f7e00000f78000007700000036000000000
                .bulk   000007600000070000000740000005200000052000000a4000000a5000000a56
                 +      00000516000005240000056000001f7c00001f7000000f600000074000000000
                .bulk   00000f4000000e0000000f0000000a4000000a4000001500000015200000152c
                 +      00000a2c00000a4800000b4000003f7800003f6000001f4000000f0000000000
                .bulk   00001f0000001c0000001e00000015000000150000002a0000002a4000002a58
                 +      00001458000015100000170000007f7000007f4000003f0000001e0000000000
                .bulk   00003e000000380000003c0000002a0000002a00000054000000550000005530
                 +      0000293000002a2000002e0000017f6000017f0000007e0000003c0000000000
                .bulk   00007c00000070000000780000005400000054000001280000012a0000012a60
                 +      000052600000544000005c0000037f4000037e0000017c000000780000000000

                .bulk   0001780000016000000170000001280000012800000250000002540000025540
                 +      00012540000129000001380000077f0000077c00000378000001700000000000
                .junk   64

mac2WalkLeftSprite .bulk 00000f0000000e0700000e0f00000a5400000a54000005780000056800000528
                 +      00000240000002500000027000000f7e00000f78000007700000036000000000
                .bulk   00001e0000001c0e00001c1e000015280000152800000b7000000b5000000a50
                 +      00000500000005200000056000001f7c00001f7000000f600000074000000000
                .bulk   00003c000000381c0000383c00002a5000002a50000017600000172000001520
                 +      00000a0000000a4000000b4000003f7800003f6000001f4000000f0000000000
                .bulk   000078000000703800007078000055200000552000002f4000002e4000002a40
                 +      00001400000015000000170000007f7000007f4000003f0000001e0000000000
                .bulk   00017000000160700001617000012a4000012a4000005f0000005d0000005500
                 +      0000280000002a0000002e0000017f6000017f0000007e0000003c0000000000
                .bulk   000360000003416000034360000255000002550000013e0000013a0000012a00
                 +      000050000000540000005c0000037f4000037e0000017c000000780000000000

                .bulk   00074000000703400007074000052a0000052a0000027c000002740000025400
                 +      00012000000128000001380000077f0000077c00000378000001700000000000
                .junk   64

macJumpRightSprite .bulk 0000000000001c0f00001e1f00000a5400000254000035280000352800001128
                 +      00000050000002500000035000001f7c0000077c000003780000017000000000
                .bulk   000000000000381e00003c3e000015280000052800006a5000006a5000002250
                 +      00000120000005200000072000003f7800000f78000007700000036000000000
                .bulk   000000000000703c0000787c00002a5000000a50000155200001552000004520
                 +      0000024000000a4000000e4000007f7000001f7000000f600000074000000000
                .bulk   000000000001607800017178000055200000152000032a4000032a4000010a40
                 +      000005000000150000001d0000017f6000003f6000001f4000000f0000000000
                .bulk   00000000000341700003637000012a4000002a40000655000006550000021500
                 +      00000a0000002a0000003a0000037f4000007f4000003f0000001e0000000000
                .bulk   0000000000070360000747600002550000005500000d2a00000d2a0000042a00
                 +      00001400000054000000740000077f0000017f0000007e0000003c0000000000

                .bulk   00000000000e0740000f0f4000052a0000012a00001a5400001a540000085400
                 +      000028000001280000016800000f7e0000037e0000017c000000780000000000
                .bulk   2020cd0152415749
                .bulk   4e5055540d058501
                .bulk   3c310d0cc402234e
                .bulk   594441544145310d
                .bulk   0a86014241444441
                .bulk   54410d03a0000d13
                .bulk   5e31202020202020
                .bulk   cd01524157494e50

macJumpLeftSprite .bulk 0000000000003c0e00003e1e00000a5400000a500000052b0000052b00000522
                 +      00000240000002500000027000000f7e00000f78000007700000036000000000

                .bulk   000000000000781c00007c3c000015280000152000000a5600000a5600000a44
                 +      00000500000005200000056000001f7c00001f7000000f600000074000000000
                .bulk   00000000000170380001787800002a5000002a400000152c0000152c00001508
                 +      00000a0000000a4000000b4000003f7800003f6000001f4000000f0000000000
                .bulk   000000000003607000037170000055200000550000002a5800002a5800002a10
                 +      00001400000015000000170000007f7000007f4000003f0000001e0000000000
                .bulk   00000000000741600007636000012a4000012a00000055300000553000005420
                 +      0000280000002a0000002e0000017f6000017f0000007e0000003c0000000000
                .bulk   00000000000f0340000f4740000255000002540000012a6000012a6000012840
                 +      000050000000540000005c0000037f4000037e0000017c000000780000000000
                .bulk   00000000001e0700001f0f0000052a0000052800000255400002554000025100
                 +      00012000000128000001380000077f0000077c00000378000001700000000000
                .junk   64

mackFrontSprite .bulk   00003c3c00001c380000166800001528000005200000066000001a5800003a5c
                 +      00003a5c000005200000052000001f7800000f7000000e700000066000000000
                .bulk   000078780000387000002d5000002a5000000a4000000d400000353000007538
                 +      0000753800000a4000000a4000003f7000001f6000001d6000000d4000000000
                .bulk   000171700000716000005b20000055200000150000001b0000006a6000016a70
                 +      00016a70000015000000150000007f6000003f4000003b4000001b0000000000

                .bulk   00036360000163400001364000012a4000002a00000036000001554000035560
                 +      0003556000002a0000002a0000017f4000007f00000077000000360000000000
                .bulk   000747400003470000026d00000255000000540000006c0000032b0000072b40
                 +      00072b40000054000000540000037f0000017e0000016e0000006c0000000000
                .bulk   000f0f0000070e0000055a0000052a00000128000001580000065600000e5700
                 +      000e5700000128000001280000077e0000037c0000035c000001580000000000
                .bulk   001e1e00000e1c00000b3400000a54000002500000033000000d2c00001d2e00
                 +      001d2e000002500000025000000f7c0000077800000738000003300000000000
                .junk   64

mackFront2Sprite .bulk  000000000000000000003c3c00001c3800001668000005200000066000003a5c
                 +      00003a5c000005200000052000001f7800000f7000000e700000066000000000

                .bulk   0000000000000000000078780000387000002d5000000a4000000d4000007538
                 +      0000753800000a4000000a4000003f7000001f6000001d6000000d4000000000

                .bulk   0000000000000000000171700000716000005b200000150000001b0000016a70
                 +      00016a70000015000000150000007f6000003f4000003b4000001b0000000000

                .bulk   000000000000000000036360000163400001364000002a000000360000035560
                 +      0003556000002a0000002a0000017f4000007f00000077000000360000000000

                .bulk   0000000000000000000747400003470000026d000000540000006c0000072b40
                 +      00072b40000054000000540000037f0000017e0000016e0000006c0000000000

                .bulk   0000000000000000000f0f0000070e0000055a000001280000015800000e5700
                 +      000e5700000128000001280000077e0000037c0000035c000001580000000000

                .bulk   0000000000000000001e1e00000e1c00000b34000002500000033000001d2e00
                 +      001d2e000002500000025000000f7c0000077800000738000003300000000000
                .junk   64

                .bulk   00003c000000143c0000142800001668000005200000010000004a5200004a52
                 +      00004b520000352c000006600000052000000a50000014280000224400000420

                .bulk   00007800000028780000285000002d5000000a40000002000001152400011524
                 +      0001172400006a5800000d4000000a4000001520000028500000450800000840
                .bulk   00017000000051700000512000005b20000015000000040000022a4800022a48
                 +      00022e480001553000001b000000150000002a400000512000010a1000001100
                .bulk   0003600000012360000122400001364000002a00000008000004551000045510
                 +      00045d1000032a600000360000002a0000005500000122400002142000002200
                .bulk   00074000000247400002450000026d00000054000000100000092a2000092a20
                 +      00093a200006554000006c000000540000012a00000245000004284000004400
                .bulk   000f000000050f0000050a0000055a0000012800000020000012544000125440
                 +      00127440000d2b0000015800000128000002540000050a000008510000010800
                .bulk   001e0000000a1e00000a1400000b340000025000000040000025290000252900
                 +      00256900001a5600000330000002500000052800000a14000011220000021000
                .junk   64

                .bulk   0000003c00003c280000142800001668000005200000410200004a5200006a56
                 +      00001b5800000520000006600000052000001250000014440000252800000a24
                .bulk   00000078000078500000285000002d5000000a4000010204000115240001552c
                 +      0000373000000a4000000d4000000a40000025200000290800004a5000001448
                .bulk   00000170000171200000512000005b20000015000002040800022a4800032a58
                 +      00006e600000150000001b000000150000004a40000052100001152000002910
                .bulk   0000036000036240000122400001364000002a00000408100004551000065530
                 +      00015d4000002a000000360000002a00000115000001242000022a4000005220
                .bulk   00000740000745000002450000026d00000054000008102000092a20000d2a60
                 +      00033b000000540000006c000000540000022a00000248400004550000012440
                .bulk   00000f00000f0a0000050a0000055a00000128000010204000125440001a5540
                 +      00067600000128000001580000012800000454000005110000092a0000024900
                .bulk   00001e00001e1400000a1400000b340000025000002041000025290000352b00
                 +      000d6c0000025000000330000002500000092800000a22000012540000051200
                .junk   64

                .bulk   00000f000000073c000005380000052800000528000005280000065800000658
                 +      00000e5c00003f3f000031630000021000000778000006580000077800000250
                .bulk   00001e0000000e7800000a7000000a5000000a5000000a5000000d3000000d30
                 +      00001d3800007e7e000063460000042000000f7000000d3000000f7000000520
                .bulk   00003c0000001d700000156000001520000015200000152000001a6000001a60
                 +      00003a7000017d7c0001470c0000084000001f6000001a6000001f6000000a40
                .bulk   0000780000003b6000002b4000002a4000002a4000002a400000354000003540
                 +      0000756000037b7800030e180000110000003f400000354000003f4000001500
                .bulk   00017000000077400000570000005500000055000000550000006b0000006b00
                 +      00016b400007777000061c300000220000007f0000006b0000007f0000002a00
                .bulk   0003600000016f0000012e0000012a0000012a0000012a000001560000015600
                 +      00035700000f6f60000c38600000440000017e000001560000017e0000005400
                .bulk   0007400000035e0000025c0000025400000254000002540000032c0000032c00
                 +      00072e00001f5f40001871400001080000037c0000032c0000037c0000012800
                .junk   64

                .bulk   0000003c00000f38000007280000052800000528000005280000065800000658
                 +      00000e5c00001f3e00001162000032130000377b000006580000077800000250
                .bulk   0000007800001e7000000e5000000a5000000a5000000a5000000d3000000d30
                 +      00001d3800003e7c000023440000642600006f7600000d3000000f7000000520
                .bulk   0000017000003d6000001d2000001520000015200000152000001a6000001a60
                 +      00003a7000007d78000047080001484c00015f6c00001a6000001f6000000a40
                .bulk   0000036000007b4000003a4000002a4000002a4000002a400000354000003540
                 +      0000756000017b7000010e100003111800033f580000354000003f4000001500
                .bulk   00000740000177000000750000005500000055000000550000006b0000006b00
                 +      00016b400003776000021c200006223000067f3000006b0000007f0000002a00
                .bulk   00000f0000036e0000016a0000012a0000012a0000012a000001560000015600
                 +      0003570000076f4000043840000c4460000d7e600001560000017e0000005400
                .bulk   00001e0000075c000003540000025400000254000002540000032c0000032c00
                 +      00072e00000f5f000008710000190940001b7d4000032c0000037c0000012800
                .junk   64

JackHammerPreshifted .bulk 0000014000000140000001400000014000000360000002500000025000000370
                 +      0000025000000370000002500000025000003f7e00007f7f0000016000000000

                .bulk   0000030000000300000003000000030000000740000005200000052000000760
                 +      0000052000000760000005200000052000007f7c00017f7e0000034000000000

                .bulk   0000060000000600000006000000060000000f0000000a4000000a4000000f40
                 +      00000a4000000f4000000a4000000a4000017f7800037f7c0000070000000000

                .bulk   00000c0000000c0000000c0000000c0000001e00000015000000150000001f00
                 +      0000150000001f00000015000000150000037f7000077f7800000e0000000000

                .bulk   0000180000001800000018000000180000003c0000002a0000002a0000003e00
                 +      00002a0000003e0000002a0000002a0000077f60000f7f7000001c0000000000

                .bulk   0000300000003000000030000000300000007800000054000000540000007c00
                 +      0000540000007c000000540000005400000f7f40001f7f600000380000000000

                .bulk   0000600000006000000060000000600000017000000128000001280000017800
                 +      00012800000178000001280000012800001f7f00003f7f400000700000000000
                .junk   64

                .bulk   0000014000000360000002500000025000000370000002500000037000000250
                 +      0000025000003f7e00007f7f0000016000000000000000000000000000000000

                .bulk   0000030000000740000005200000052000000760000005200000076000000520
                 +      0000052000007f7c00017f7e0000034000000000000000000000000000000000

                .bulk   0000060000000f0000000a4000000a4000000f4000000a4000000f4000000a40
                 +      00000a4000017f7800037f7c0000070000000000000000000000000000000000

                .bulk   00000c0000001e00000015000000150000001f000000150000001f0000001500
                 +      0000150000037f7000077f7800000e0000000000000000000000000000000000

                .bulk   0000180000003c0000002a0000002a0000003e0000002a0000003e0000002a00
                 +      00002a0000077f60000f7f7000001c0000000000000000000000000000000000

                .bulk   0000300000007800000054000000540000007c000000540000007c0000005400
                 +      00005400000f7f40001f7f600000380000000000000000000000000000000000

                .bulk   0000600000017000000128000001280000017800000128000001780000012800
                 +      00012800001f7f00003f7f400000700000000000000000000000000000000000
                .junk   64

s3boxBitmap     .bulk   00000f7f00003e5700007657000056570000577f00005d2b0000752c00007f70
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00001f7e00007d2e00016d2e00012d2e00012f7e00013a5600016a5800017f60
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00003f7c00017a5c00035a5c00025a5c00025f7c0002752c0003553000037f40
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00007f7800037538000735380005353800053f7800056a5800072a6000077f00
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00017f7000076a70000e6a70000a6a70000a7f70000b5530000e5540000f7e00
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00037f60000f5560001d55600015556000157f6000172a60001d2b00001f7c00
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00077f40001f2b40003b2b40002b2b40002b7f40002e5540003a5600003f7800
                 +      0000000000000000000000000000000000000000000000000000000000000000
                .junk   64

                .bulk   0000ffff0000ffff0000d5aa0000d5aa0000d5aa0000d5aa0000ffff0000ffff
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0081fffe0081fffe0081aad40081aad40081aad40081aad40081fffe0081fffe
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0083fffc0083fffc0082d5a80082d5a80082d5a80082d5a80083fffc0083fffc
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0087fff80087fff80085aad00085aad00085aad00085aad00087fff80087fff8
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   008ffff0008ffff0008ad5a0008ad5a0008ad5a0008ad5a0008ffff0008ffff0
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   009fffe0009fffe00095aac00095aac00095aac00095aac0009fffe0009fffe0
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00bfffc000bfffc000aad50000aad50000aad50000aad50000bfffc000bfffc0
                 +      0000000000000000000000000000000000000000000000000000000000000000
                .junk   64

dumpPreshift    .bulk   000000040000001c0000033e00002f5400003a3e00002b6a00000d1e00000674
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00000008000000380000067c00005f280000747c0000575400001a3c00000d68
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   000000100000007000000d7800013e500001697800012f280000347800001b50
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   000000200000016000001b7000027d200003537000025e500000697000003720
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00000040000003400000376000057a400007276000053d200001536000006e40
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   000001000000070000006f40000b7500000e4f40000a7a400003274000015d00
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0000020000000e0000015f0000176a00001d1f000015750000064f0000033a00
                 +      0000000000000000000000000000000000000000000000000000000000000000
                .junk   64

s2MagnetShape   .bulk   00002a5400007f7e00002a5400003f7c00001f78000002400000024000000240
                 +      0000024000000240000002400000024000000240000002400000024000000240

                .bulk   0000552800017f7c0000552800007f7800003f70000005000000050000000500
                 +      0000050000000500000005000000050000000500000005000000050000000500

                .bulk   00012a5000037f7800012a5000017f7000007f6000000a0000000a0000000a00
                 +      00000a0000000a0000000a0000000a0000000a0000000a0000000a0000000a00

                .bulk   0002552000077f700002552000037f6000017f40000014000000140000001400
                 +      0000140000001400000014000000140000001400000014000000140000001400

                .bulk   00052a40000f7f6000052a4000077f4000037f00000028000000280000002800
                 +      0000280000002800000028000000280000002800000028000000280000002800

                .bulk   000a5500001f7f40000a5500000f7f0000077e00000050000000500000005000
                 +      0000500000005000000050000000500000005000000050000000500000005000

                .bulk   00152a00003f7f0000152a00001f7e00000f7c00000120000001200000012000
                 +      0001200000012000000120000001200000012000000120000001200000012000
                .junk   64

                .bulk   0000003c00003c3c00001668000015280000066000000a5000007a5e00000520
                 +      00001f7800000f70000006600000000000000000000000000000000000000000

                .bulk   000000780000787800002d5000002a5000000d40000015200001753c00000a40
                 +      00003f7000001f6000000d400000000000000000000000000000000000000000

                .bulk   000001700001717000005b200000552000001b0000002a4000036a7800001500
                 +      00007f6000003f4000001b000000000000000000000000000000000000000000

                .bulk   00000360000363600001364000012a4000003600000055000007557000002a00
                 +      00017f4000007f00000036000000000000000000000000000000000000000000

                .bulk   000007400007474000026d000002550000006c0000012a00000f2b6000005400
                 +      00037f0000017e0000006c000000000000000000000000000000000000000000

                .bulk   00000f00000f0f0000055a0000052a000001580000025400001e574000012800
                 +      00077e0000037c00000158000000000000000000000000000000000000000000

                .bulk   00001e00001e1e00000b3400000a54000003300000052800003d2f0000025000
                 +      000f7c0000077800000330000000000000000000000000000000000000000000
                .junk   64

                .bulk   00003c3c000016680000066000003a5c0000052000001f780000066000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0000787800002d5000000d400000753800000a4000003f7000000d4000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0001717000005b2000001b0000016a700000150000007f6000001b0000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0003636000013640000036000003556000002a0000017f400000360000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0007474000026d0000006c0000072b400000540000037f0000006c0000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   000f0f0000055a0000015800000e57000001280000077e000001580000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   001e1e00000b340000033000001d2e0000025000000f7c000003300000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000
                .junk   64
dd1    $7e
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $00
                .dd1    $00
                .dd1    $60
                .dd1    $70
                .dd1    $38
                .dd1    $1c
                .dd1    $0e
                .dd1    $06
                .dd1    $00
                .dd1    $00

ChrBitmap       .bulk   1e333b3f37331e00

Chr1            .bulk   0c0e0f0c0c0c3f00
Chr2            .bulk   1e3330180c063f00
Chr3            .bulk   1e
                .dd1    $33
                .dd1    $30
                .dd1    $1c
                .dd1    $30
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $38
                .dd1    $3c
                .dd1    $36
                .dd1    $33
                .dd1    $3f
                .dd1    $30
                .dd1    $30
                .dd1    $00
                .dd1    $3f
                .dd1    $03
                .dd1    $03
                .dd1    $1f
                .dd1    $30
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $1c
                .dd1    $06
                .dd1    $03
                .dd1    $1f
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $3f
                .dd1    $33
                .dd1    $18
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $3e
                .dd1    $30
                .dd1    $18
                .dd1    $0c
                .dd1    $00
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $00
                .dd1    $18
                .dd1    $18
                .dd1    $10
                .dd1    $08
                .dd1    $10
                .dd1    $18
                .dd1    $1c
                .dd1    $1e
                .dd1    $1c
                .dd1    $18
                .dd1    $10
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $7e
                .dd1    $00
                .dd1    $7e
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $04
                .dd1    $0c
                .dd1    $1c
                .dd1    $3c
                .dd1    $1c
                .dd1    $0c
                .dd1    $04
                .dd1    $00
                .dd1    $3c
                .dd1    $7e
                .dd1    $62
                .dd1    $30
                .dd1    $18
                .dd1    $00
                .dd1    $18
                .dd1    $00
                .dd1    $90
                .dd1    $88
                .dd1    $b6
                .dd1    $ff
                .dd1    $ff
                .dd1    $ff
                .dd1    $be
                .dd1    $b6
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $3f
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $00
                .dd1    $1f
                .dd1    $33
                .dd1    $33
                .dd1    $1f
                .dd1    $33
                .dd1    $33
                .dd1    $1f
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $0f
                .dd1    $1b
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $1b
                .dd1    $0f
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $03
                .dd1    $1f
                .dd1    $03
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $03
                .dd1    $1f
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $03
                .dd1    $3b
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $3f
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $00
                .dd1    $3f
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $3f
                .dd1    $00
                .dd1    $30
                .dd1    $30
                .dd1    $30
                .dd1    $30
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $33
                .dd1    $1b
                .dd1    $0f
                .dd1    $07
                .dd1    $0f
                .dd1    $1b
                .dd1    $33
                .dd1    $00
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $3f
                .dd1    $00
                .dd1    $33
                .dd1    $3f
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $37
                .dd1    $3b
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $1f
                .dd1    $33
                .dd1    $33
                .dd1    $1f
                .dd1    $03
                .dd1    $03
                .dd1    $03
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $37
                .dd1    $3b
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $1f
                .dd1    $33
                .dd1    $33
                .dd1    $1f
                .dd1    $0f
                .dd1    $1b
                .dd1    $33
                .dd1    $00
                .dd1    $1e
                .dd1    $33
                .dd1    $03
                .dd1    $1e
                .dd1    $30
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $3f
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $0c
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $3f
                .dd1    $33
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $0c
                .dd1    $1e
                .dd1    $33
                .dd1    $33
                .dd1    $00
                .dd1    $33
                .dd1    $33
                .dd1    $33
                .dd1    $1e
                .dd1    $0c
                .dd1    $0c
                .dd1    $0c
                .dd1    $00

ChrZ            .bulk   3f30180c06033f00
                .dd1    $1e
                .dd1    $1e
                .dd1    $06
                .dd1    $06
                .dd1    $1e
                .dd1    $1e
                .dd1    $00
                .dd1    $00
                .dd1    $06
                .dd1    $0e
                .dd1    $1c
                .dd1    $38
                .dd1    $70
                .dd1    $60
                .dd1    $00
                .dd1    $00
                .dd1    $78
                .dd1    $78
                .dd1    $60
                .dd1    $60
                .dd1    $78
                .dd1    $78
                .dd1    $00
                .dd1    $00

                .dd1    $08
                .dd1    $1c
                .dd1    $3e
                .dd1    $7f
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $00
                .dd1    $7f
                .dd1    $00

                .bulk   0e0e1b5c38735d671b47071f3e7f110409081109084849020852244210040508
                 +      10090c484502004204020e04070760090a484702004e04120104090420090948
                 +      49020042041e11244904210908484912285204120e3f474240735d67075f671f
                 +      0e020000000240000000000000000042000000010000000000000000007f0000
                 +      0000000000000000000000000000000000000000000000000000000000000000
                 +      00000000000000000000000f7f7f7f7c3f7f7800000000000007700038034000
                 +      1c000000000000077f7f7f7f7f7f7e000000000000037001700020001f000000
                 +      000000037f7f7f7f7f7f7f000000000000017807600038001f00000000000001
                 +      7f7f7f7f7f7f7f00000000000000780f40003c001f
                .bulk   000000000000007f7f7f7f7f7f7f000000000000003c0f00003c001f00000000
                 +      0000003f7f7f7f7f7f7f000000000000001c0e00003c001f000000000000001f
                 +      7f7f7f7f7f7f000000000000000e0000003c001f000000000000000f7f7f7f7f
                 +      7f7f000000000000000600000038001f0000000000000007737f7f7f7f7f0000
                 +      00000000000200000020001f0000000000000003607f7f7f7f7e000000000000
                 +      000100000300001c0000000000000001400f7c3f7f78000000494e0000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000
                 +      0000000000000000000000

LogoHardHat     .bulk   02552a552a552a552a552a552a552a552a552a552a552a552a500a552a552a55
                 +      2a552a552a552a552a552a552a552a552a552a54aad5aad5aad5aad5aad5aad5
                 +      aad5aad5aad5aad5aad5aad5aad5000000000000000000000000000000000000
                 +      0000000000000000
                .bulk   3c0e063038071c0700000360700e380e0000076e3c0e3807380e1e0e1e3c3807
                 +      1c0700000360700e380e00000f6e1e0e3807380e0f0e3e3e1f4e1c0700000360
                 +      3f5c380e00001f6e0f0e1f6e380e074e380e1f4e1c07000003603f1c380e0000
                 +      3c0e074e1f4e380e036e00070e1c1c07000003601c38380e0000380e000e0e1c
                 +      380e016e00070e1c1c07000003601c383b6e0000380e036e0e1c3b6e006e0007
                 +      07181c67000003600e703b6e0000380e0f6e07383b6e002e000707081d730000
                 +      03600e303b6e0000380e1f6e07183b6e030e000703401f79000003600700380e
                 +      0000380e1c0e0340380e074e380e03401f7c000000000700380e00003c0e1c0e
                 +      0340380e0f0e3e3e01601f1e00003f7e0340380e00001f6e1f6e0160380e1e0e
                 +      1e3c01601e0f00003f7e0340380e00000f6e0f6e0160380e3c0e063000401c07
                 +      00003f7e0100380e0000076e036e0040380e0000000000000000000000000000
                 +      000000000000000000000000aad5aad5aad5aad5aad5aad5aad5aad5aad5aad5
                 +      aad5aad5aad50a552a552a552a552a552a552a552a552a552a552a552a552a54
                 +      02552a552a552a552a552a552a552a552a552a552a552a552a50
others          .bulk   0e0e0e0e0e0e0e
                .bulk   0f0f0f0f0f0f0f
                .bulk   10101010101010
                .bulk   11111111111111
                .bulk   12121212121212
                .bulk   13131313131313
                .bulk   14141414

                .bulk   00001668000005200000066000003a5c00003a5c000005200000052000001f78
                 +      00000f7000000e700000066000000000

                .bulk   00003c000000143c0000142800001668000005200000010000004a5200004a52
                 +      00004b520000352c000006600000052000000a50000014280000224400000420

                .bulk   0000003c00003c280000142800001668000005200000410200004a5200006a56
                 +      00001b5800000520000006600000052000001250000014440000252800000a24

macWalkRightSprite .bulk 00001c0700000c0700000e1f00000a5600000254000035280000352800001128
                 +      00000050000002500000035000001f7c0000077c000003780000017000000000

                .bulk   0000380e0000180e00001c3e0000152c0000052800006a5000006a5000002250
                 +      00000120000005200000072000003f7800000f78000007700000036000000000

                .bulk   0000701c0000301c0000387c00002a5800000a50000155200001552000004520
                 +      0000024000000a4000000e4000007f7000001f7000000f600000074000000000

                .bulk   000160380000603800007178000055300000152000032a4000032a4000010a40
                 +      000005000000150000001d0000017f6000003f6000001f4000000f0000000000

Macxxx          .bulk   0003407000014070
                .bulk   0001637000012a60
                .bulk   00002a4000065500
                .bulk   0006550000021500
                .bulk   00000a0000002a00
                .bulk   00003a0000037f40
                .bulk   00007f4000003f00
                .bulk   00001e0000000000

                .bulk   0007016000030160000347600002554000005500000d2a00000d2a0000042a00
                 +      00001400000054000000740000077f0000017f0000007e0000003c0000000000

                .bulk   000e03400006034000070f4000052b0000012a00001a5400001a540000085400
                 +      000028000001280000016800000f7e0000037e0000017c000000780000000000
                .junk   64

macStandRightSprite .bulk 0000037000000070000001700000025000000250000001280000052800003528
                 +      00003450000012500000035000001f7c0000077c000003780000017000000000
                .bulk   00000760000001600000036000000520000005200000025000000a5000006a50
                 +      00006920000025200000072000003f7800000f78000007700000036000000000
                .bulk   00000f40000003400000074000000a4000000a40000005200000152000015520
                 +      0001524000004a4000000e4000007f7000001f7000000f600000074000000000
                .bulk   00001f000000070000000f00000015000000150000000a4000002a4000032a40
                 +      000325000001150000001d0000017f6000003f6000001f4000000f0000000000
                .bulk   00003e0000000e0000001e0000002a0000002a00000015000000550000065500
                 +      00064a0000022a0000003a0000037f4000007f4000003f0000001e0000000000
                .bulk   00007c0000001c0000003c00000054000000540000002a0000012a00000d2a00
                 +      000d1400000454000000740000077f0000017f0000007e0000003c0000000000
                .bulk   00017800000038000000780000012800000128000000540000025400001a5400
                 +      001a28000009280000016800000f7e0000037e0000017c000000780000000000
                .junk   64

                .bulk   0000003c0000381c00007c1c00000a5400000a54000007680000056800000528
                 +      00000050000002500000035000001f7c0000077c000003780000017000000000
                .bulk   000000780000703800017838000015280000152800000f5000000b5000000a50
                 +      00000120000005200000072000003f7800000f78000007700000036000000000
                .bulk   00000170000160700003707000002a5000002a5000001f200000172000001520
                 +      0000024000000a4000000e4000007f7000001f7000000f600000074000000000
                .bulk   000003600003416000076160000055200000552000003e4000002e4000002a40
                 +      000005000000150000001d0000017f6000003f6000001f4000000f0000000000
                .bulk   0000074000070340000f434000012a4000012a4000007d0000005d0000005500
                 +      00000a0000002a0000003a0000037f4000007f4000003f0000001e0000000000
                .bulk   00000f00000e0700001f0700000255000002550000017a0000013a0000012a00
                 +      00001400000054000000740000077f0000017f0000007e0000003c0000000000
                .bulk   00001e00001c0e00003e0e0000052a0000052a00000374000002740000025400
                 +      000028000001280000016800000f7e0000037e0000017c000000780000000000
                .junk   64

macWalkLeftSprite .bulk 0000380e0000380c00003e1c00001a5400000a500000052b0000052b00000522
                 +      00000240000002500000027000000f7e00000f78000007700000036000000000
                .bulk   0000701c0000701800007c38000035280000152000000a5600000a5600000a44
                 +      00000500000005200000056000001f7c00001f7000000f600000074000000000
                .bulk   00016038000160300001787000006a5000002a400000152c0000152c00001508
                 +      00000a0000000a4000000b4000003f7800003f6000001f4000000f0000000000
                .bulk   000340700003406000037160000155200000550000002a5800002a5800002a10
                 +      00001400000015000000170000007f7000007f4000003f0000001e0000000000
                .bulk   00070160000701400007634000032a4000012a00000055300000553000005420
                 +      0000280000002a0000002e0000017f6000017f0000007e0000003c0000000000
                .bulk   000e0340000e0300000f4700000655000002540000012a6000012a6000012840
                 +      000050000000540000005c0000037f4000037e0000017c000000780000000000

                .bulk   001c0700001c0600001f0e00000d2a0000052800000255400002554000025100
                 +      00012000000128000001380000077f0000077c00000378000001700000000000
                .junk   64

mackStandLeftSprite .bulk 000003700000034000000360000002500000025000000520000005280000052b
                 +      0000024b000002520000027000000f7e00000f78000007700000036000000000
                .bulk   000007600000070000000740000005200000052000000a4000000a5000000a56
                 +      00000516000005240000056000001f7c00001f7000000f600000074000000000
                .bulk   00000f4000000e0000000f0000000a4000000a4000001500000015200000152c
                 +      00000a2c00000a4800000b4000003f7800003f6000001f4000000f0000000000
                .bulk   00001f0000001c0000001e00000015000000150000002a0000002a4000002a58
                 +      00001458000015100000170000007f7000007f4000003f0000001e0000000000
                .bulk   00003e000000380000003c0000002a0000002a00000054000000550000005530
                 +      0000293000002a2000002e0000017f6000017f0000007e0000003c0000000000
                .bulk   00007c00000070000000780000005400000054000001280000012a0000012a60
                 +      000052600000544000005c0000037f4000037e0000017c000000780000000000

                .bulk   0001780000016000000170000001280000012800000250000002540000025540
                 +      00012540000129000001380000077f0000077c00000378000001700000000000
                .junk   64

mac2WalkLeftSprite .bulk 00000f0000000e0700000e0f00000a5400000a54000005780000056800000528
                 +      00000240000002500000027000000f7e00000f78000007700000036000000000
                .bulk   00001e0000001c0e00001c1e000015280000152800000b7000000b5000000a50
                 +      00000500000005200000056000001f7c00001f7000000f600000074000000000
                .bulk   00003c000000381c0000383c00002a5000002a50000017600000172000001520
                 +      00000a0000000a4000000b4000003f7800003f6000001f4000000f0000000000
                .bulk   000078000000703800007078000055200000552000002f4000002e4000002a40
                 +      00001400000015000000170000007f7000007f4000003f0000001e0000000000
                .bulk   00017000000160700001617000012a4000012a4000005f0000005d0000005500
                 +      0000280000002a0000002e0000017f6000017f0000007e0000003c0000000000
                .bulk   000360000003416000034360000255000002550000013e0000013a0000012a00
                 +      000050000000540000005c0000037f4000037e0000017c000000780000000000

                .bulk   00074000000703400007074000052a0000052a0000027c000002740000025400
                 +      00012000000128000001380000077f0000077c00000378000001700000000000
                .junk   64

macJumpRightSprite .bulk 0000000000001c0f00001e1f00000a5400000254000035280000352800001128
                 +      00000050000002500000035000001f7c0000077c000003780000017000000000
                .bulk   000000000000381e00003c3e000015280000052800006a5000006a5000002250
                 +      00000120000005200000072000003f7800000f78000007700000036000000000
                .bulk   000000000000703c0000787c00002a5000000a50000155200001552000004520
                 +      0000024000000a4000000e4000007f7000001f7000000f600000074000000000
                .bulk   000000000001607800017178000055200000152000032a4000032a4000010a40
                 +      000005000000150000001d0000017f6000003f6000001f4000000f0000000000
                .bulk   00000000000341700003637000012a4000002a40000655000006550000021500
                 +      00000a0000002a0000003a0000037f4000007f4000003f0000001e0000000000
                .bulk   0000000000070360000747600002550000005500000d2a00000d2a0000042a00
                 +      00001400000054000000740000077f0000017f0000007e0000003c0000000000

                .bulk   00000000000e0740000f0f4000052a0000012a00001a5400001a540000085400
                 +      000028000001280000016800000f7e0000037e0000017c000000780000000000
                .bulk   2020cd0152415749
                .bulk   4e5055540d058501
                .bulk   3c310d0cc402234e
                .bulk   594441544145310d
                .bulk   0a86014241444441
                .bulk   54410d03a0000d13
                .bulk   5e31202020202020
                .bulk   cd01524157494e50

macJumpLeftSprite .bulk 0000000000003c0e00003e1e00000a5400000a500000052b0000052b00000522
                 +      00000240000002500000027000000f7e00000f78000007700000036000000000

                .bulk   000000000000781c00007c3c000015280000152000000a5600000a5600000a44
                 +      00000500000005200000056000001f7c00001f7000000f600000074000000000
                .bulk   00000000000170380001787800002a5000002a400000152c0000152c00001508
                 +      00000a0000000a4000000b4000003f7800003f6000001f4000000f0000000000
                .bulk   000000000003607000037170000055200000550000002a5800002a5800002a10
                 +      00001400000015000000170000007f7000007f4000003f0000001e0000000000
                .bulk   00000000000741600007636000012a4000012a00000055300000553000005420
                 +      0000280000002a0000002e0000017f6000017f0000007e0000003c0000000000
                .bulk   00000000000f0340000f4740000255000002540000012a6000012a6000012840
                 +      000050000000540000005c0000037f4000037e0000017c000000780000000000
                .bulk   00000000001e0700001f0f0000052a0000052800000255400002554000025100
                 +      00012000000128000001380000077f0000077c00000378000001700000000000
                .junk   64

mackFrontSprite .bulk   00003c3c00001c380000166800001528000005200000066000001a5800003a5c
                 +      00003a5c000005200000052000001f7800000f7000000e700000066000000000
                .bulk   000078780000387000002d5000002a5000000a4000000d400000353000007538
                 +      0000753800000a4000000a4000003f7000001f6000001d6000000d4000000000
                .bulk   000171700000716000005b20000055200000150000001b0000006a6000016a70
                 +      00016a70000015000000150000007f6000003f4000003b4000001b0000000000

                .bulk   00036360000163400001364000012a4000002a00000036000001554000035560
                 +      0003556000002a0000002a0000017f4000007f00000077000000360000000000
                .bulk   000747400003470000026d00000255000000540000006c0000032b0000072b40
                 +      00072b40000054000000540000037f0000017e0000016e0000006c0000000000
                .bulk   000f0f0000070e0000055a0000052a00000128000001580000065600000e5700
                 +      000e5700000128000001280000077e0000037c0000035c000001580000000000
                .bulk   001e1e00000e1c00000b3400000a54000002500000033000000d2c00001d2e00
                 +      001d2e000002500000025000000f7c0000077800000738000003300000000000
                .junk   64

mackFront2Sprite .bulk  000000000000000000003c3c00001c3800001668000005200000066000003a5c
                 +      00003a5c000005200000052000001f7800000f7000000e700000066000000000

                .bulk   0000000000000000000078780000387000002d5000000a4000000d4000007538
                 +      0000753800000a4000000a4000003f7000001f6000001d6000000d4000000000

                .bulk   0000000000000000000171700000716000005b200000150000001b0000016a70
                 +      00016a70000015000000150000007f6000003f4000003b4000001b0000000000

                .bulk   000000000000000000036360000163400001364000002a000000360000035560
                 +      0003556000002a0000002a0000017f4000007f00000077000000360000000000

                .bulk   0000000000000000000747400003470000026d000000540000006c0000072b40
                 +      00072b40000054000000540000037f0000017e0000016e0000006c0000000000

                .bulk   0000000000000000000f0f0000070e0000055a000001280000015800000e5700
                 +      000e5700000128000001280000077e0000037c0000035c000001580000000000

                .bulk   0000000000000000001e1e00000e1c00000b34000002500000033000001d2e00
                 +      001d2e000002500000025000000f7c0000077800000738000003300000000000
                .junk   64

                .bulk   00003c000000143c0000142800001668000005200000010000004a5200004a52
                 +      00004b520000352c000006600000052000000a50000014280000224400000420

                .bulk   00007800000028780000285000002d5000000a40000002000001152400011524
                 +      0001172400006a5800000d4000000a4000001520000028500000450800000840
                .bulk   00017000000051700000512000005b20000015000000040000022a4800022a48
                 +      00022e480001553000001b000000150000002a400000512000010a1000001100
                .bulk   0003600000012360000122400001364000002a00000008000004551000045510
                 +      00045d1000032a600000360000002a0000005500000122400002142000002200
                .bulk   00074000000247400002450000026d00000054000000100000092a2000092a20
                 +      00093a200006554000006c000000540000012a00000245000004284000004400
                .bulk   000f000000050f0000050a0000055a0000012800000020000012544000125440
                 +      00127440000d2b0000015800000128000002540000050a000008510000010800
                .bulk   001e0000000a1e00000a1400000b340000025000000040000025290000252900
                 +      00256900001a5600000330000002500000052800000a14000011220000021000
                .junk   64

                .bulk   0000003c00003c280000142800001668000005200000410200004a5200006a56
                 +      00001b5800000520000006600000052000001250000014440000252800000a24
                .bulk   00000078000078500000285000002d5000000a4000010204000115240001552c
                 +      0000373000000a4000000d4000000a40000025200000290800004a5000001448
                .bulk   00000170000171200000512000005b20000015000002040800022a4800032a58
                 +      00006e600000150000001b000000150000004a40000052100001152000002910
                .bulk   0000036000036240000122400001364000002a00000408100004551000065530
                 +      00015d4000002a000000360000002a00000115000001242000022a4000005220
                .bulk   00000740000745000002450000026d00000054000008102000092a20000d2a60
                 +      00033b000000540000006c000000540000022a00000248400004550000012440
                .bulk   00000f00000f0a0000050a0000055a00000128000010204000125440001a5540
                 +      00067600000128000001580000012800000454000005110000092a0000024900
                .bulk   00001e00001e1400000a1400000b340000025000002041000025290000352b00
                 +      000d6c0000025000000330000002500000092800000a22000012540000051200
                .junk   64

                .bulk   00000f000000073c000005380000052800000528000005280000065800000658
                 +      00000e5c00003f3f000031630000021000000778000006580000077800000250
                .bulk   00001e0000000e7800000a7000000a5000000a5000000a5000000d3000000d30
                 +      00001d3800007e7e000063460000042000000f7000000d3000000f7000000520
                .bulk   00003c0000001d700000156000001520000015200000152000001a6000001a60
                 +      00003a7000017d7c0001470c0000084000001f6000001a6000001f6000000a40
                .bulk   0000780000003b6000002b4000002a4000002a4000002a400000354000003540
                 +      0000756000037b7800030e180000110000003f400000354000003f4000001500
                .bulk   00017000000077400000570000005500000055000000550000006b0000006b00
                 +      00016b400007777000061c300000220000007f0000006b0000007f0000002a00
                .bulk   0003600000016f0000012e0000012a0000012a0000012a000001560000015600
                 +      00035700000f6f60000c38600000440000017e000001560000017e0000005400
                .bulk   0007400000035e0000025c0000025400000254000002540000032c0000032c00
                 +      00072e00001f5f40001871400001080000037c0000032c0000037c0000012800
                .junk   64

                .bulk   0000003c00000f38000007280000052800000528000005280000065800000658
                 +      00000e5c00001f3e00001162000032130000377b000006580000077800000250
                .bulk   0000007800001e7000000e5000000a5000000a5000000a5000000d3000000d30
                 +      00001d3800003e7c000023440000642600006f7600000d3000000f7000000520
                .bulk   0000017000003d6000001d2000001520000015200000152000001a6000001a60
                 +      00003a7000007d78000047080001484c00015f6c00001a6000001f6000000a40
                .bulk   0000036000007b4000003a4000002a4000002a4000002a400000354000003540
                 +      0000756000017b7000010e100003111800033f580000354000003f4000001500
                .bulk   00000740000177000000750000005500000055000000550000006b0000006b00
                 +      00016b400003776000021c200006223000067f3000006b0000007f0000002a00
                .bulk   00000f0000036e0000016a0000012a0000012a0000012a000001560000015600
                 +      0003570000076f4000043840000c4460000d7e600001560000017e0000005400
                .bulk   00001e0000075c000003540000025400000254000002540000032c0000032c00
                 +      00072e00000f5f000008710000190940001b7d4000032c0000037c0000012800
                .junk   64

                .bulk   0000014000000140000001400000014000000360000002500000025000000370
                 +      0000025000000370000002500000025000003f7e00007f7f0000016000000000

                .bulk   0000030000000300000003000000030000000740000005200000052000000760
                 +      0000052000000760000005200000052000007f7c00017f7e0000034000000000

                .bulk   0000060000000600000006000000060000000f0000000a4000000a4000000f40
                 +      00000a4000000f4000000a4000000a4000017f7800037f7c0000070000000000

                .bulk   00000c0000000c0000000c0000000c0000001e00000015000000150000001f00
                 +      0000150000001f00000015000000150000037f7000077f7800000e0000000000

                .bulk   0000180000001800000018000000180000003c0000002a0000002a0000003e00
                 +      00002a0000003e0000002a0000002a0000077f60000f7f7000001c0000000000

                .bulk   0000300000003000000030000000300000007800000054000000540000007c00
                 +      0000540000007c000000540000005400000f7f40001f7f600000380000000000

                .bulk   0000600000006000000060000000600000017000000128000001280000017800
                 +      00012800000178000001280000012800001f7f00003f7f400000700000000000
                .junk   64

                .bulk   0000014000000360000002500000025000000370000002500000037000000250
                 +      0000025000003f7e00007f7f0000016000000000000000000000000000000000

                .bulk   0000030000000740000005200000052000000760000005200000076000000520
                 +      0000052000007f7c00017f7e0000034000000000000000000000000000000000

                .bulk   0000060000000f0000000a4000000a4000000f4000000a4000000f4000000a40
                 +      00000a4000017f7800037f7c0000070000000000000000000000000000000000

                .bulk   00000c0000001e00000015000000150000001f000000150000001f0000001500
                 +      0000150000037f7000077f7800000e0000000000000000000000000000000000

                .bulk   0000180000003c0000002a0000002a0000003e0000002a0000003e0000002a00
                 +      00002a0000077f60000f7f7000001c0000000000000000000000000000000000

                .bulk   0000300000007800000054000000540000007c000000540000007c0000005400
                 +      00005400000f7f40001f7f600000380000000000000000000000000000000000

                .bulk   0000600000017000000128000001280000017800000128000001780000012800
                 +      00012800001f7f00003f7f400000700000000000000000000000000000000000
                .junk   64

s3boxBitmap     .bulk   00000f7f00003e5700007657000056570000577f00005d2b0000752c00007f70
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00001f7e00007d2e00016d2e00012d2e00012f7e00013a5600016a5800017f60
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00003f7c00017a5c00035a5c00025a5c00025f7c0002752c0003553000037f40
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00007f7800037538000735380005353800053f7800056a5800072a6000077f00
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00017f7000076a70000e6a70000a6a70000a7f70000b5530000e5540000f7e00
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00037f60000f5560001d55600015556000157f6000172a60001d2b00001f7c00
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00077f40001f2b40003b2b40002b2b40002b7f40002e5540003a5600003f7800
                 +      0000000000000000000000000000000000000000000000000000000000000000
                .junk   64

                .bulk   0000ffff0000ffff0000d5aa0000d5aa0000d5aa0000d5aa0000ffff0000ffff
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0081fffe0081fffe0081aad40081aad40081aad40081aad40081fffe0081fffe
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0083fffc0083fffc0082d5a80082d5a80082d5a80082d5a80083fffc0083fffc
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0087fff80087fff80085aad00085aad00085aad00085aad00087fff80087fff8
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   008ffff0008ffff0008ad5a0008ad5a0008ad5a0008ad5a0008ffff0008ffff0
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   009fffe0009fffe00095aac00095aac00095aac00095aac0009fffe0009fffe0
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00bfffc000bfffc000aad50000aad50000aad50000aad50000bfffc000bfffc0
                 +      0000000000000000000000000000000000000000000000000000000000000000
                .junk   64

                .bulk   000000040000001c0000033e00002f5400003a3e00002b6a00000d1e00000674
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00000008000000380000067c00005f280000747c0000575400001a3c00000d68
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   000000100000007000000d7800013e500001697800012f280000347800001b50
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   000000200000016000001b7000027d200003537000025e500000697000003720
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   00000040000003400000376000057a400007276000053d200001536000006e40
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   000001000000070000006f40000b7500000e4f40000a7a400003274000015d00
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0000020000000e0000015f0000176a00001d1f000015750000064f0000033a00
                 +      0000000000000000000000000000000000000000000000000000000000000000
                .junk   64

s2MagnetShape   .bulk   00002a5400007f7e00002a5400003f7c00001f78000002400000024000000240
                 +      0000024000000240000002400000024000000240000002400000024000000240

                .bulk   0000552800017f7c0000552800007f7800003f70000005000000050000000500
                 +      0000050000000500000005000000050000000500000005000000050000000500

                .bulk   00012a5000037f7800012a5000017f7000007f6000000a0000000a0000000a00
                 +      00000a0000000a0000000a0000000a0000000a0000000a0000000a0000000a00

                .bulk   0002552000077f700002552000037f6000017f40000014000000140000001400
                 +      0000140000001400000014000000140000001400000014000000140000001400

                .bulk   00052a40000f7f6000052a4000077f4000037f00000028000000280000002800
                 +      0000280000002800000028000000280000002800000028000000280000002800

                .bulk   000a5500001f7f40000a5500000f7f0000077e00000050000000500000005000
                 +      0000500000005000000050000000500000005000000050000000500000005000

                .bulk   00152a00003f7f0000152a00001f7e00000f7c00000120000001200000012000
                 +      0001200000012000000120000001200000012000000120000001200000012000
                .junk   64

                .bulk   0000003c00003c3c00001668000015280000066000000a5000007a5e00000520
                 +      00001f7800000f70000006600000000000000000000000000000000000000000

                .bulk   000000780000787800002d5000002a5000000d40000015200001753c00000a40
                 +      00003f7000001f6000000d400000000000000000000000000000000000000000

                .bulk   000001700001717000005b200000552000001b0000002a4000036a7800001500
                 +      00007f6000003f4000001b000000000000000000000000000000000000000000

                .bulk   00000360000363600001364000012a4000003600000055000007557000002a00
                 +      00017f4000007f00000036000000000000000000000000000000000000000000

                .bulk   000007400007474000026d000002550000006c0000012a00000f2b6000005400
                 +      00037f0000017e0000006c000000000000000000000000000000000000000000

                .bulk   00000f00000f0f0000055a0000052a000001580000025400001e574000012800
                 +      00077e0000037c00000158000000000000000000000000000000000000000000

                .bulk   00001e00001e1e00000b3400000a54000003300000052800003d2f0000025000
                 +      000f7c0000077800000330000000000000000000000000000000000000000000
                .junk   64

                .bulk   00003c3c000016680000066000003a5c0000052000001f780000066000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0000787800002d5000000d400000753800000a4000003f7000000d4000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0001717000005b2000001b0000016a700000150000007f6000001b0000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0003636000013640000036000003556000002a0000017f400000360000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   0007474000026d0000006c0000072b400000540000037f0000006c0000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   000f0f0000055a0000015800000e57000001280000077e000001580000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000

                .bulk   001e1e00000b340000033000001d2e0000025000000f7c000003300000000000
                 +      0000000000000000000000000000000000000000000000000000000000000000
                .junk   64
